// dis_data.asp
//
// Data for the x86 Disassembly algorithms
//




;; Macros
macro @instr_bytes
|| bytes
{{
    mov     fs:instruction_bytes,bytes
    IF bytes EQ 1
        inc     esi
    
    } #else {
        add     esi,bytes
    }
}}

macro @instr_text
|| instr
|| len
{{
    mov     fs:instruction_text_offset,offset instr
    mov     fs:instruction_text_length,len
}}

_NO_SPECIAL       = 0
_CONTROL_REGS     = 1
_DEBUG_REGS       = 2
_TEST_REGS        = 3
_SEG_REGS         = 4
_STx_REGS         = 5
_MMX_REGS         = 6
_XMM_REGS         = 7


;; Data
  // Used by debi_disassemble_instruction()
    cpu_mode                u32 0                                   // 0-32 bit pmode, 1-16-bit pmode, 2-real, 3-v86
    prefix_bytes            u32 0
    sreg_override           u32 0
    sign_extend             u32 0
    reverse_regs            u32 0
    special_reg             u32 0
    sib_byte                u32 0
    byte_word_size          u32 0
    seg_override            u32 0
    op_size_override        u32 0
    adr_size_override       u32 0
    reverse_mod_reg_rm      u32 0
    scale_factor            u32 0
    movxx_register          u32 0
    first_gp_register       u32 0
    second_gp_register      u32 0
    display_second_register u32 0
    gp_reg_count            u32 0
    special_control         u32 0

    instruction_offset      u32 0                                   // Ptr to start of instruction
    instruction_bytes       u32 0                                   // number of bytes there
    instruction_text_length u32 0                                   // Ptr to start of instruction text (like "adc")
    instruction_text_offset u32 0                                   // number of bytes there
    parameters_text_length  u32 0                                   // Ptr to start of parameters in local memory
    parameters_text_offset  u32 0                                   // number of bytes there
    displacement_offset     u32 0                                   // Ptr to start of displacement text (if any) in parameters
    displacement_bytes      u32 0                                   // number of bytes there (the [esi] part of "ds:[esi],ebx")
    displacement_data       u32 0                                   // dword value indicating the actual displacement part
                                                                    // (such as the 1234 value in "ds:[esi+1234]")
    mod_reg_rm_offset       u32 0                                   // Ptr to start of mod_reg_rm byte in instruction
    mod_reg_rm_bytes        u32 0                                   // Number of instruction bytes used by mod_reg_rm requirements
    sib_offset              u32 0                                   // Ptr to start of SIB byte in instruction
    sib_bytes               u32 0                                   // Number of instruction bytes used by SIB requirements
    immediate_offset        u32 0                                   // Ptr to start of immediate data in instruction
    immediate_bytes         u32 0                                   // Number of bytes used in immediate
    immediate_data          u32 0                                   // The immediate value
    operand_size            u32 0

  // Used by debi_simplify_disassembly()
    prefix_bytes_start      u32 0                                   // Start and end of the prefix bytes (if any)
    prefix_bytes_end        u32 0
    instruction_bytes_start u32 0
    instruction_bytes_end   u32 0
    instruction_text_start  u32 0
    instruction_text_end    u32 0
    parameters_text_start   u32 0
    parameters_text_end     u32 0


  opcode_map:
                            u16 lowword(offset _add)                    // 00
                            u16 lowword(offset _add)                    // 01
                            u16 lowword(offset _add)                    // 02
                            u16 lowword(offset _add)                    // 03
                            u16 lowword(offset _add_immed8)             // 04
                            u16 lowword(offset _add_immed16_32)         // 05
                            u16 lowword(offset _push_es)                // 06
                            u16 lowword(offset _pop_es)                 // 07
                            u16 lowword(offset _or_rm)                  // 08
                            u16 lowword(offset _or_rm)                  // 09
                            u16 lowword(offset _or_rm)                  // 0a
                            u16 lowword(offset _or_rm)                  // 0b
                            u16 lowword(offset _or_accum)               // 0c
                            u16 lowword(offset _or_accum)               // 0d
                            u16 lowword(offset _push_cs)                // 0e
                            u16 lowword(offset _two_byte_instruction)   // 0f
                            u16 lowword(offset _adc)                    // 10
                            u16 lowword(offset _adc)                    // 11
                            u16 lowword(offset _adc)                    // 12
                            u16 lowword(offset _adc)                    // 13
                            u16 lowword(offset _adc_immed8)             // 14
                            u16 lowword(offset _adc_immed16_32)         // 15
                            u16 lowword(offset _push_ss)                // 16
                            u16 lowword(offset _pop_ss)                 // 17
                            u16 lowword(offset _sbb_rm_reg8)            // 18
                            u16 lowword(offset _sbb_rm_reg16_32)        // 19
                            u16 lowword(offset _sbb_reg8_rm)            // 1a
                            u16 lowword(offset _sbb_reg16_32_rm)        // 1b
                            u16 lowword(offset _sbb_accum_immed8)       // 1c
                            u16 lowword(offset _sbb_accum_immed16_32)   // 1d
                            u16 lowword(offset _push_ds)                // 1e
                            u16 lowword(offset _pop_ds)                 // 1f
                            u16 lowword(offset _and)                    // 20
                            u16 lowword(offset _and)                    // 21
                            u16 lowword(offset _and)                    // 22
                            u16 lowword(offset _and)                    // 23
                            u16 lowword(offset _and_immed8)             // 24
                            u16 lowword(offset _and_immed16_32)         // 25
                            u16 lowword(offset _es_override)            // 26
                            u16 lowword(offset _daa)                    // 27
                            u16 lowword(offset _sub_rm_reg8)            // 28
                            u16 lowword(offset _sub_rm_reg16_32)        // 29
                            u16 lowword(offset _sub_reg8_rm)            // 2a
                            u16 lowword(offset _sub_reg16_32_rm)        // 2b
                            u16 lowword(offset _sub_accum_immed8)       // 2c
                            u16 lowword(offset _sub_accum_immed16_32)   // 2d
                            u16 lowword(offset _cs_override)            // 2e
                            u16 lowword(offset _das)                    // 2f
                            u16 lowword(offset _xor_rm_reg8)            // 30
                            u16 lowword(offset _xor_rm_reg16_32)        // 31
                            u16 lowword(offset _xor_reg8_rm)            // 32
                            u16 lowword(offset _xor_reg16_32_rm)        // 33
                            u16 lowword(offset _xor_accum_immed8)       // 34
                            u16 lowword(offset _xor_accum_immed16_32)   // 35
                            u16 lowword(offset _ss_override)            // 36
                            u16 lowword(offset _aaa)                    // 37
                            u16 lowword(offset _cmp_rm8_r8)             // 38
                            u16 lowword(offset _cmp_rm16_r16)           // 39
                            u16 lowword(offset _cmp_r8_rm8)             // 3a
                            u16 lowword(offset _cmp_r16_rm16)           // 3b
                            u16 lowword(offset _cmp_immed8)             // 3c
                            u16 lowword(offset _cmp_immed16_32)         // 3d
                            u16 lowword(offset _ds_override)            // 3e
                            u16 lowword(offset _aas)                    // 3f
                            u16 lowword(offset _inc_xax)                // 40
                            u16 lowword(offset _inc_xcx)                // 41
                            u16 lowword(offset _inc_xdx)                // 42
                            u16 lowword(offset _inc_xbx)                // 43
                            u16 lowword(offset _inc_xsp)                // 44
                            u16 lowword(offset _inc_xbp)                // 45
                            u16 lowword(offset _inc_xsi)                // 46
                            u16 lowword(offset _inc_xdi)                // 47
                            u16 lowword(offset _dec_xax)                // 48
                            u16 lowword(offset _dec_xcx)                // 49
                            u16 lowword(offset _dec_xdx)                // 4a
                            u16 lowword(offset _dec_xbx)                // 4b
                            u16 lowword(offset _dec_xsp)                // 4c
                            u16 lowword(offset _dec_xbp)                // 4d
                            u16 lowword(offset _dec_xsi)                // 4e
                            u16 lowword(offset _dec_xdi)                // 4f
                            u16 lowword(offset _push_xax)               // 50
                            u16 lowword(offset _push_xcx)               // 51
                            u16 lowword(offset _push_xdx)               // 52
                            u16 lowword(offset _push_xbx)               // 53
                            u16 lowword(offset _push_xsp)               // 54
                            u16 lowword(offset _push_xbp)               // 55
                            u16 lowword(offset _push_xsi)               // 56
                            u16 lowword(offset _push_xdi)               // 57
                            u16 lowword(offset _pop_xax)                // 58
                            u16 lowword(offset _pop_xcx)                // 59
                            u16 lowword(offset _pop_xdx)                // 5a
                            u16 lowword(offset _pop_xbx)                // 5b
                            u16 lowword(offset _pop_xsp)                // 5c
                            u16 lowword(offset _pop_xbp)                // 5d
                            u16 lowword(offset _pop_xsi)                // 5e
                            u16 lowword(offset _pop_xdi)                // 5f
                            u16 lowword(offset _pusha)                  // 60
                            u16 lowword(offset _popa)                   // 61
                            u16 lowword(offset _bound)                  // 62
                            u16 lowword(offset _arpl)                   // 63
                            u16 lowword(offset _fs_override)            // 64
                            u16 lowword(offset _gs_override)            // 65
                            u16 lowword(offset _op_size_override)       // 66
                            u16 lowword(offset _adr_size_override)      // 67
                            u16 lowword(offset _push_immed16_32)        // 68
                            u16 lowword(offset _imul_3_parms_immed16_32); 69
                            u16 lowword(offset _push_immed8)            // 6a
                            u16 lowword(offset _imul_3_parms_immed8)    // 6b
                            u16 lowword(offset _insb)                   // 6c
                            u16 lowword(offset _insw)                   // 6d
                            u16 lowword(offset _outsb)                  // 6e
                            u16 lowword(offset _outsw)                  // 6f
                            u16 lowword(offset _jo)                     // 70
                            u16 lowword(offset _jno)                    // 71
                            u16 lowword(offset _jc)                     // 72
                            u16 lowword(offset _jnc)                    // 73
                            u16 lowword(offset _jz)                     // 74
                            u16 lowword(offset _jnz)                    // 75
                            u16 lowword(offset _jna)                    // 76
                            u16 lowword(offset _ja)                     // 77
                            u16 lowword(offset _js)                     // 78
                            u16 lowword(offset _jns)                    // 79
                            u16 lowword(offset _jpe)                    // 7a
                            u16 lowword(offset _jpo)                    // 7b
                            u16 lowword(offset _jl)                     // 7c
                            u16 lowword(offset _jnl)                    // 7d
                            u16 lowword(offset _jng)                    // 7e
                            u16 lowword(offset _jg)                     // 7f
                            u16 lowword(offset _check_reg_80)           // 80
                            u16 lowword(offset _check_reg_81)           // 81
                            u16 lowword(offset _check_reg_82)           // 82
                            u16 lowword(offset _check_reg_83)           // 83
                            u16 lowword(offset _test_rm_reg_8)          // 84
                            u16 lowword(offset _test_rm_reg16_32)       // 85
                            u16 lowword(offset _xchg_byte)              // 86
                            u16 lowword(offset _xchg)                   // 87
                            u16 lowword(offset _mov_rm_reg_8)           // 88
                            u16 lowword(offset _mov_rm_reg_16_32)       // 89
                            u16 lowword(offset _mov_reg_rm_8)           // 8a
                            u16 lowword(offset _mov_reg_rm_16_32)       // 8b
                            u16 lowword(offset _mov_reg16_32_sreg)      // 8c
                            u16 lowword(offset _lea)                    // 8d
                            u16 lowword(offset _mov_sreg_reg16_32)      // 8e
                            u16 lowword(offset _check_reg_8f)           // 8f
                            u16 lowword(offset _nop)                    // 90
                            u16 lowword(offset _xchg_xcx)               // 91
                            u16 lowword(offset _xchg_xdx)               // 92
                            u16 lowword(offset _xchg_xbx)               // 93
                            u16 lowword(offset _xchg_xsp)               // 94
                            u16 lowword(offset _xchg_xbp)               // 95
                            u16 lowword(offset _xchg_xsi)               // 96
                            u16 lowword(offset _xchg_xdi)               // 97
                            u16 lowword(offset _cbw)                    // 98
                            u16 lowword(offset _cwd)                    // 99
                            u16 lowword(offset _call_far_operand)       // 9a
                            u16 lowword(offset _wait)                   // 9b
                            u16 lowword(offset _pushf)                  // 9c
                            u16 lowword(offset _popf)                   // 9d
                            u16 lowword(offset _sahf)                   // 9e
                            u16 lowword(offset _lahf)                   // 9f
                            u16 lowword(offset _mov_accum_mem_8)        // a0
                            u16 lowword(offset _mov_accum_mem_16_32)    // a1
                            u16 lowword(offset _mov_mem_accum_8)        // a2
                            u16 lowword(offset _mov_mem_accum_16_32)    // a3
                            u16 lowword(offset _movsb)                  // a4
                            u16 lowword(offset _movsw)                  // a5
                            u16 lowword(offset _cmpsb)                  // a6
                            u16 lowword(offset _cmpsw)                  // a7
                            u16 lowword(offset _test_accum_imm8)        // a8
                            u16 lowword(offset _test_accum_imm16_32)    // a9
                            u16 lowword(offset _stosb)                  // aa
                            u16 lowword(offset _stosw)                  // ab
                            u16 lowword(offset _lodsb)                  // ac
                            u16 lowword(offset _lodsw)                  // ad
                            u16 lowword(offset _scasb)                  // ae
                            u16 lowword(offset _scasw)                  // af
                            u16 lowword(offset _mov_reg_immed8)         // b0
                            u16 lowword(offset _mov_reg_immed8)         // b1
                            u16 lowword(offset _mov_reg_immed8)         // b2
                            u16 lowword(offset _mov_reg_immed8)         // b3
                            u16 lowword(offset _mov_reg_immed8)         // b4
                            u16 lowword(offset _mov_reg_immed8)         // b5
                            u16 lowword(offset _mov_reg_immed8)         // b6
                            u16 lowword(offset _mov_reg_immed8)         // b7
                            u16 lowword(offset _mov_reg_immed16_32)     // b8
                            u16 lowword(offset _mov_reg_immed16_32)     // b9
                            u16 lowword(offset _mov_reg_immed16_32)     // ba
                            u16 lowword(offset _mov_reg_immed16_32)     // bb
                            u16 lowword(offset _mov_reg_immed16_32)     // bc
                            u16 lowword(offset _mov_reg_immed16_32)     // bd
                            u16 lowword(offset _mov_reg_immed16_32)     // be
                            u16 lowword(offset _mov_reg_immed16_32)     // bf
                            u16 lowword(offset _check_reg_c0)           // c0
                            u16 lowword(offset _check_reg_c1)           // c1
                            u16 lowword(offset _retn_immed)             // c2
                            u16 lowword(offset _retn)                   // c3
                            u16 lowword(offset _les)                    // c4
                            u16 lowword(offset _lds)                    // c5
                            u16 lowword(offset _check_reg_c6)           // c6
                            u16 lowword(offset _check_reg_c7)           // c7
                            u16 lowword(offset _enter)                  // c8
                            u16 lowword(offset _leave)                  // c9
                            u16 lowword(offset _retf_immed)             // ca
                            u16 lowword(offset _retf)                   // cb
                            u16 lowword(offset _int3)                   // cc
                            u16 lowword(offset _intx)                   // cd
                            u16 lowword(offset _into)                   // ce
                            u16 lowword(offset _iret)                   // cf
                            u16 lowword(offset _check_reg_d0)           // d0
                            u16 lowword(offset _check_reg_d1)           // d1
                            u16 lowword(offset _check_reg_d2)           // d2
                            u16 lowword(offset _check_reg_d3)           // d3
                            u16 lowword(offset _aam)                    // d4
                            u16 lowword(offset _aad)                    // d5
                            u16 lowword(offset _unused)                 // d6
                            u16 lowword(offset _xlat)                   // d7
                            u16 lowword(offset _fpu_d8)                 // d8
                            u16 lowword(offset _fpu_d9)                 // d9
                            u16 lowword(offset _fpu_da)                 // da
                            u16 lowword(offset _fpu_db)                 // db
                            u16 lowword(offset _fpu_dc)                 // dc
                            u16 lowword(offset _fpu_dd)                 // dd
                            u16 lowword(offset _fpu_de)                 // de
                            u16 lowword(offset _fpu_df)                 // df
                            u16 lowword(offset _loopne)                 // e0
                            u16 lowword(offset _loope)                  // e1
                            u16 lowword(offset _loop)                   // e2
                            u16 lowword(offset _jcxz)                   // e3
                            u16 lowword(offset _in8_immed8)             // e4
                            u16 lowword(offset _in16_32_immed8)         // e5
                            u16 lowword(offset _out)                    // e6
                            u16 lowword(offset _out)                    // e7
                            u16 lowword(offset _call_near_relative)     // e8
                            u16 lowword(offset _jmp16_32)               // e9
                            u16 lowword(offset _jmp_far)                // ea
                            u16 lowword(offset _jmp8)                   // eb
                            u16 lowword(offset _in_byte)                // ec
                            u16 lowword(offset _in)                     // ed
                            u16 lowword(offset _out_byte)               // ee
                            u16 lowword(offset _out)                    // ef
                            u16 lowword(offset _lock_prefix)            // f0
                            u16 lowword(offset _unused)                 // f1
                            u16 lowword(offset _repne_prefix)           // f2
                            u16 lowword(offset _repe_prefix)            // f3
                            u16 lowword(offset _hlt)                    // f4
                            u16 lowword(offset _cmc)                    // f5
                            u16 lowword(offset _check_reg_f6)           // f6
                            u16 lowword(offset _check_reg_f7)           // f7
                            u16 lowword(offset _clc)                    // f8
                            u16 lowword(offset _stc)                    // f9
                            u16 lowword(offset _cli)                    // fa
                            u16 lowword(offset _sti)                    // fb
                            u16 lowword(offset _cld)                    // fc
                            u16 lowword(offset _std)                    // fd
                            u16 lowword(offset _check_reg_fe)           // fe
                            u16 lowword(offset _check_reg_ff)           // ff


// Used by _two_byte_instruction
  two_byte_opcode_map:
                            u16 lowword(offset _check_reg_0f00)         // 00
                            u16 lowword(offset _check_reg_0f01)         // 01
                            u16 lowword(offset _lar)                    // 02
                            u16 lowword(offset _lsl)                    // 03
                            u16 lowword(offset _two_byte_unused)        // 04
                            u16 lowword(offset _two_byte_unused)        // 05
                            u16 lowword(offset _clts)                   // 06
                            u16 lowword(offset _two_byte_unused)        // 07
                            u16 lowword(offset _invd)                   // 08
                            u16 lowword(offset _wbinvd)                 // 09
                            u16 lowword(offset _two_byte_unused)        // 0a
                            u16 lowword(offset _ud2_f0b)                // 0b
                            u16 lowword(offset _two_byte_unused)        // 0c
                            u16 lowword(offset _two_byte_unused)        // 0d
                            u16 lowword(offset _two_byte_unused)        // 0e
                            u16 lowword(offset _two_byte_unused)        // 0f
                            u16 lowword(offset _two_byte_unused)        // 10
                            u16 lowword(offset _two_byte_unused)        // 11
                            u16 lowword(offset _two_byte_unused)        // 12
                            u16 lowword(offset _two_byte_unused)        // 13
                            u16 lowword(offset _two_byte_unused)        // 14
                            u16 lowword(offset _two_byte_unused)        // 15
                            u16 lowword(offset _two_byte_unused)        // 16
                            u16 lowword(offset _two_byte_unused)        // 17
                            u16 lowword(offset _two_byte_unused)        // 18
                            u16 lowword(offset _two_byte_unused)        // 19
                            u16 lowword(offset _two_byte_unused)        // 1a
                            u16 lowword(offset _two_byte_unused)        // 1b
                            u16 lowword(offset _two_byte_unused)        // 1c
                            u16 lowword(offset _two_byte_unused)        // 1d
                            u16 lowword(offset _two_byte_unused)        // 1e
                            u16 lowword(offset _two_byte_unused)        // 1f
                            u16 lowword(offset _mov_gp_control)         // 20
                            u16 lowword(offset _mov_gp_debug)           // 21
                            u16 lowword(offset _mov_gp_control)         // 22
                            u16 lowword(offset _mov_gp_debug)           // 23
                            u16 lowword(offset _mov_gp_test)            // 24
                            u16 lowword(offset _two_byte_unused)        // 25
                            u16 lowword(offset _mov_gp_test)            // 26
                            u16 lowword(offset _two_byte_unused)        // 27
                            u16 lowword(offset _two_byte_unused)        // 28
                            u16 lowword(offset _two_byte_unused)        // 29
                            u16 lowword(offset _two_byte_unused)        // 2a
                            u16 lowword(offset _two_byte_unused)        // 2b
                            u16 lowword(offset _two_byte_unused)        // 2c
                            u16 lowword(offset _two_byte_unused)        // 2d
                            u16 lowword(offset _two_byte_unused)        // 2e
                            u16 lowword(offset _two_byte_unused)        // 2f
                            u16 lowword(offset _wrmsr)                  // 30
                            u16 lowword(offset _rdtsc)                  // 31
                            u16 lowword(offset _rdmsr)                  // 32
                            u16 lowword(offset _rdpmc)                  // 33
                            u16 lowword(offset _two_byte_unused)        // 34
                            u16 lowword(offset _two_byte_unused)        // 35
                            u16 lowword(offset _two_byte_unused)        // 36
                            u16 lowword(offset _two_byte_unused)        // 37
                            u16 lowword(offset _two_byte_unused)        // 38
                            u16 lowword(offset _two_byte_unused)        // 39
                            u16 lowword(offset _two_byte_unused)        // 3a
                            u16 lowword(offset _two_byte_unused)        // 3b
                            u16 lowword(offset _two_byte_unused)        // 3c
                            u16 lowword(offset _two_byte_unused)        // 3d
                            u16 lowword(offset _two_byte_unused)        // 3e
                            u16 lowword(offset _two_byte_unused)        // 3f
                            u16 lowword(offset _cmovo)                  // 40
                            u16 lowword(offset _cmovno)                 // 41
                            u16 lowword(offset _cmovc)                  // 42
                            u16 lowword(offset _cmovnc)                 // 43
                            u16 lowword(offset _cmovz)                  // 44
                            u16 lowword(offset _cmovnz)                 // 45
                            u16 lowword(offset _cmovna)                 // 46
                            u16 lowword(offset _cmova)                  // 47
                            u16 lowword(offset _cmovs)                  // 48
                            u16 lowword(offset _cmovns)                 // 49
                            u16 lowword(offset _cmovpe)                 // 4a
                            u16 lowword(offset _cmovpo)                 // 4b
                            u16 lowword(offset _cmovl)                  // 4c
                            u16 lowword(offset _cmovnl)                 // 4d
                            u16 lowword(offset _cmovng)                 // 4e
                            u16 lowword(offset _cmovg)                  // 4f
                            u16 lowword(offset _two_byte_unused)        // 50
                            u16 lowword(offset _two_byte_unused)        // 51
                            u16 lowword(offset _two_byte_unused)        // 52
                            u16 lowword(offset _two_byte_unused)        // 53
                            u16 lowword(offset _two_byte_unused)        // 54
                            u16 lowword(offset _two_byte_unused)        // 55
                            u16 lowword(offset _two_byte_unused)        // 56
                            u16 lowword(offset _two_byte_unused)        // 57
                            u16 lowword(offset _two_byte_unused)        // 58
                            u16 lowword(offset _two_byte_unused)        // 59
                            u16 lowword(offset _two_byte_unused)        // 5a
                            u16 lowword(offset _two_byte_unused)        // 5b
                            u16 lowword(offset _two_byte_unused)        // 5c
                            u16 lowword(offset _two_byte_unused)        // 5d
                            u16 lowword(offset _two_byte_unused)        // 5e
                            u16 lowword(offset _two_byte_unused)        // 5f
                            u16 lowword(offset _punpcklbw)              // 60
                            u16 lowword(offset _punpcklwd)              // 61
                            u16 lowword(offset _punpckldq)              // 62
                            u16 lowword(offset _packsswb)               // 63
                            u16 lowword(offset _pcmpgtb)                // 64
                            u16 lowword(offset _pcmpgtw)                // 65
                            u16 lowword(offset _pcmpgtd)                // 66
                            u16 lowword(offset _packuswb)               // 67
                            u16 lowword(offset _punpckhbw)              // 68
                            u16 lowword(offset _punpckhwd)              // 69
                            u16 lowword(offset _punpckhdq)              // 6a
                            u16 lowword(offset _packssdw)               // 6b
                            u16 lowword(offset _two_byte_unused)        // 6c
                            u16 lowword(offset _two_byte_unused)        // 6d
                            u16 lowword(offset _movd_mmx_gp)            // 6e
                            u16 lowword(offset _movq_mmx_mm_mmx)        // 6f
                            u16 lowword(offset _two_byte_unused)        // 70
                            u16 lowword(offset _check_reg_0f71)         // 71
                            u16 lowword(offset _check_reg_0f72)         // 72
                            u16 lowword(offset _two_byte_unused)        // 73
                            u16 lowword(offset _pcmpeqb)                // 74
                            u16 lowword(offset _pcmpeqw)                // 75
                            u16 lowword(offset _pcmpeqd)                // 76
                            u16 lowword(offset _emms)                   // 77
                            u16 lowword(offset _two_byte_unused)        // 78
                            u16 lowword(offset _two_byte_unused)        // 79
                            u16 lowword(offset _two_byte_unused)        // 7a
                            u16 lowword(offset _two_byte_unused)        // 7b
                            u16 lowword(offset _two_byte_unused)        // 7c
                            u16 lowword(offset _two_byte_unused)        // 7d
                            u16 lowword(offset _movd_gp_mmx)            // 7e
                            u16 lowword(offset _movq_mm_mmx_mmx)        // 7f
                            u16 lowword(offset _jo_l)                   // 80
                            u16 lowword(offset _jno_l)                  // 81
                            u16 lowword(offset _jc_l)                   // 82
                            u16 lowword(offset _jnc_l)                  // 83
                            u16 lowword(offset _jz_l)                   // 84
                            u16 lowword(offset _jnz_l)                  // 85
                            u16 lowword(offset _jna_l)                  // 86
                            u16 lowword(offset _ja_l)                   // 87
                            u16 lowword(offset _js_l)                   // 88
                            u16 lowword(offset _jns_l)                  // 89
                            u16 lowword(offset _jpe_l)                  // 8a
                            u16 lowword(offset _jpo_l)                  // 8b
                            u16 lowword(offset _jl_l)                   // 8c
                            u16 lowword(offset _jnl_l)                  // 8d
                            u16 lowword(offset _jng_l)                  // 8e
                            u16 lowword(offset _jg_l)                   // 8f
                            u16 lowword(offset _seto)                   // 90
                            u16 lowword(offset _setno)                  // 91
                            u16 lowword(offset _setc)                   // 92
                            u16 lowword(offset _setnc)                  // 93
                            u16 lowword(offset _setz)                   // 94
                            u16 lowword(offset _setnz)                  // 95
                            u16 lowword(offset _setna)                  // 96
                            u16 lowword(offset _seta)                   // 97
                            u16 lowword(offset _sets)                   // 98
                            u16 lowword(offset _setns)                  // 99
                            u16 lowword(offset _setpe)                  // 9a
                            u16 lowword(offset _setpo)                  // 9b
                            u16 lowword(offset _setl)                   // 9c
                            u16 lowword(offset _setnl)                  // 9d
                            u16 lowword(offset _setng)                  // 9e
                            u16 lowword(offset _setg)                   // 9f
                            u16 lowword(offset _push_fs)                // a0
                            u16 lowword(offset _pop_fs)                 // a1
                            u16 lowword(offset _cpuid)                  // a2
                            u16 lowword(offset _bt)                     // a3
                            u16 lowword(offset _shld_immed)             // a4
                            u16 lowword(offset _shld_cl)                // a5
                            u16 lowword(offset _two_byte_unused)        // a6
                            u16 lowword(offset _two_byte_unused)        // a7
                            u16 lowword(offset _push_gs)                // a8
                            u16 lowword(offset _pop_gs)                 // a9
                            u16 lowword(offset _rsm)                    // aa
                            u16 lowword(offset _bts)                    // ab
                            u16 lowword(offset _shrd_immed)             // ac
                            u16 lowword(offset _shrd_cl)                // ad
                            u16 lowword(offset _two_byte_unused)        // ae
                            u16 lowword(offset _imul_2_params)          // af
                            u16 lowword(offset _cmpxchg_byte)           // b0
                            u16 lowword(offset _cmpxchg)                // b1
                            u16 lowword(offset _lss)                    // b2
                            u16 lowword(offset _btr)                    // b3
                            u16 lowword(offset _lfs)                    // b4
                            u16 lowword(offset _lgs)                    // b5
                            u16 lowword(offset _movzx_byte)             // b6
                            u16 lowword(offset _movzx_word)             // b7
                            u16 lowword(offset _two_byte_unused)        // b8
                            u16 lowword(offset _ud2_fb9)                // b9
                            u16 lowword(offset _check_reg_0fba)         // ba
                            u16 lowword(offset _btc)                    // bb
                            u16 lowword(offset _bsf)                    // bc
                            u16 lowword(offset _bsr)                    // bd
                            u16 lowword(offset _movsx_byte)             // be
                            u16 lowword(offset _movsx_word)             // bf
                            u16 lowword(offset _xadd_byte)              // c0
                            u16 lowword(offset _xadd)                   // c1
                            u16 lowword(offset _two_byte_unused)        // c2
                            u16 lowword(offset _two_byte_unused)        // c3
                            u16 lowword(offset _two_byte_unused)        // c4
                            u16 lowword(offset _two_byte_unused)        // c5
                            u16 lowword(offset _two_byte_unused)        // c6
                            u16 lowword(offset _check_reg_0fc7)         // c7
                            u16 lowword(offset _bswap_eax)              // c8
                            u16 lowword(offset _bswap_ecx)              // c9
                            u16 lowword(offset _bswap_edx)              // ca
                            u16 lowword(offset _bswap_ebx)              // cb
                            u16 lowword(offset _bswap_esp)              // cc
                            u16 lowword(offset _bswap_ebp)              // cd
                            u16 lowword(offset _bswap_esi)              // ce
                            u16 lowword(offset _bswap_edi)              // cf
                            u16 lowword(offset _two_byte_unused)        // d0
                            u16 lowword(offset _psrlw)                  // d1
                            u16 lowword(offset _psrld)                  // d2
                            u16 lowword(offset _psrlq)                  // d3
                            u16 lowword(offset _two_byte_unused)        // d4
                            u16 lowword(offset _pmullw)                 // d5
                            u16 lowword(offset _two_byte_unused)        // d6
                            u16 lowword(offset _two_byte_unused)        // d7
                            u16 lowword(offset _psubusb)                // d8
                            u16 lowword(offset _psubusw)                // d9
                            u16 lowword(offset _two_byte_unused)        // da
                            u16 lowword(offset _pand)                   // db
                            u16 lowword(offset _paddusb)                // dc
                            u16 lowword(offset _paddusw)                // dd
                            u16 lowword(offset _two_byte_unused)        // de
                            u16 lowword(offset _pandn)                  // df
                            u16 lowword(offset _two_byte_unused)        // e0
                            u16 lowword(offset _psraw)                  // e1
                            u16 lowword(offset _psrad)                  // e2
                            u16 lowword(offset _two_byte_unused)        // e3
                            u16 lowword(offset _pmulhw)                 // e4
                            u16 lowword(offset _two_byte_unused)        // e5
                            u16 lowword(offset _two_byte_unused)        // e6
                            u16 lowword(offset _two_byte_unused)        // e7
                            u16 lowword(offset _psubsb)                 // e8
                            u16 lowword(offset _psubsw)                 // e9
                            u16 lowword(offset _two_byte_unused)        // ea
                            u16 lowword(offset _por)                    // eb
                            u16 lowword(offset _paddsb)                 // ec
                            u16 lowword(offset _paddsw)                 // ed
                            u16 lowword(offset _two_byte_unused)        // ee
                            u16 lowword(offset _pxor)                   // ef
                            u16 lowword(offset _two_byte_unused)        // f0
                            u16 lowword(offset _psllw)                  // f1
                            u16 lowword(offset _pslld)                  // f2
                            u16 lowword(offset _psllq)                  // f3
                            u16 lowword(offset _two_byte_unused)        // f4
                            u16 lowword(offset _pmaddwd)                // f5
                            u16 lowword(offset _two_byte_unused)        // f6
                            u16 lowword(offset _two_byte_unused)        // f7
                            u16 lowword(offset _psubb)                  // f8
                            u16 lowword(offset _psubw)                  // f9
                            u16 lowword(offset _psubd)                  // fa
                            u16 lowword(offset _two_byte_unused)        // fb
                            u16 lowword(offset _paddb)                  // fc
                            u16 lowword(offset _paddw)                  // fd
                            u16 lowword(offset _paddd)                  // fe
                            u16 lowword(offset _two_byte_unused)        // ff

;; Miscellaneous text
    sx_to_word_text         u8  "  {as_16_bits}",0
    sx_to_dword_text        u8  "  {as_32_bits}",0

;; CPU instructions
    int3_phrase             u8  "int3"
    aaa_text                u8  "aaa"
    xadd_text               u8  "x"
    add_text                u8  "add"
    aas_text                u8  "aas"
    cbw_text                u8  "cbw"
  cwde_text:
    cwd_text                u8  "cwd"
                            u8  "e"
    cdq_text                u8  "cdq"
    clc_text                u8  "clc"
    cld_text                u8  "cld"
    cli_text                u8  "cli"
    cmc_text                u8  "cmc"
    daa_text                u8  "daa"
    das_text                u8  "das"
    hlt_text                u8  "hlt"
    into_text               u8  "into"
  iretd_text:
    iret_text               u8  "iret"
                            u8  "d"
    lahf_text               u8  "lahf"
    leave_text              u8  "leave"
    lock_text               u8  "lock"
    nop_text                u8  "nop"
  popad_text:
    popa_text               u8  "popa"
                            u8  "d"
  popfd_text:
    popf_text               u8  "popf"
                            u8  "d"
  pushad_text:
    pusha_text              u8  "pusha"
                            u8  "d"
  pushfd_text:
    pushf_text              u8  "pushf"
                            u8  "d"
    ret_text                u8  "ret"
    retf_text               u8  "retf"
    sahf_text               u8  "sahf"
    stc_text                u8  "stc"
    std_text                u8  "std"
    sti_text                u8  "sti"
    wait_text               u8  "wait"
    xlat_text               u8  "xlat"
    aad_text                u8  "aad"
    aam_text                u8  "aam"
    clts_text               u8  "clts"
    wbinvd_text             u8  "wb"
    invd_text               u8  "invd"
    arpl_text               u8  "arpl"
    bound_text              u8  "bound"
    bswap_text              u8  "bswap"
  ()
    db()  "call"
                            u8  "f"
  cmpxchg8b_text:
    cmpxchg_text            u8  "cmpxchg"
                            u8  "8b"
    enter_text              u8  "enter"
    int_text                u8  "int"
    ja_text                 u8  "ja"
    jc_text                 u8  "jc"
    jcxz_text               u8  "jcxz"
    jecxz_text              u8  "jecxz"
    jg_text                 u8  "jg"
    jl_text                 u8  "jl"
    jna_text                u8  "jna"
    jnc_text                u8  "jnc"
    jng_text                u8  "jng"
    jnl_text                u8  "jnl"
    jno_text                u8  "jno"
    jns_text                u8  "jns"
    jnz_text                u8  "jnz"
    jo_text                 u8  "jo"
    jpe_text                u8  "jpe"
    jpo_text                u8  "jpo"
    js_text                 u8  "js"
    jz_text                 u8  "jz"
    cmovo_text              u8  "cmovo"
    cmovno_text             u8  "cmovno"
    cmovc_text              u8  "cmovc"
    cmovnc_text             u8  "cmovnc"
    cmovz_text              u8  "cmovz"
    cmovnz_text             u8  "cmovnz"
    cmovna_text             u8  "cmovna"
    cmova_text              u8  "cmova"
    cmovs_text              u8  "cmovs"
    cmovns_text             u8  "cmovns"
    cmovpe_text             u8  "cmovpe"
    cmovpo_text             u8  "cmovpo"
    cmovl_text              u8  "cmovl"
    cmovnl_text             u8  "cmovnl"
    cmovng_text             u8  "cmovng"
    cmovg_text              u8  "cmovg"
    seto_text               u8  "seto"
    setno_text              u8  "setno"
    setc_text               u8  "setc"
    setnc_text              u8  "setnc"
    setz_text               u8  "setz"
    setnz_text              u8  "setnz"
    setna_text              u8  "setna"
    seta_text               u8  "seta"
    sets_text               u8  "sets"
    setns_text              u8  "setns"
    setpe_text              u8  "setpe"
    setpo_text              u8  "setpo"
    setl_text               u8  "setl"
    setnl_text              u8  "setnl"
    setng_text              u8  "setng"
    setg_text               u8  "setg"

  jmp_far_text:
    jmp_text                u8  "jmp"
                            u8  "f"
    movd_text               u8  "movd"
    movq_text               u8  "movq"
  movsx_text:
    mov_text                u8  "mov"
                            u8  "sx"
    movzx_text              u8  "movzx"
    lds_text                u8  "lds"
    les_text                u8  "les"
    lea_text                u8  "lea"
  loopne_text:
    loop_text               u8  "loop"
                            u8  "ne"
  looped_text:
    loope_text              u8  "loope"
    pop_text                u8  "pop"
  pushd_text:
    push_text               u8  "push"
                            u8  "d"
  repne_text:
    rep_text                u8  "rep"
                            u8  "ne"
    movsb_text              u8  "movsb"
    movsw_text              u8  "movsw"
    movsd_text              u8  "movsd"
    stosb_text              u8  "stosb"
    stosw_text              u8  "stosw"
    stosd_text              u8  "stosd"
    lodsb_text              u8  "lodsb"
    lodsw_text              u8  "lodsw"
    lodsd_text              u8  "lodsd"
    insb_text               u8  "insb"
    insw_text               u8  "insw"
    insd_text               u8  "insd"
    outsb_text              u8  "outsb"
    outsw_text              u8  "outsw"
    outsd_text              u8  "outsd"
    cmpsb_text              u8  "cmpsb"
    cmpsw_text              u8  "cmpsw"
    cmpsd_text              u8  "cmpsd"
    scasb_text              u8  "scasb"
    scasw_text              u8  "scasw"
    scasd_text              u8  "scasd"
    setccc_text             u8  "setccc"
    bsf_text                u8  "bsf"
    bsr_text                u8  "bsr"
  btc_text:
    bt_text                 u8  "bt"
                            u8  "c"
    bts_text                u8  "bts"
    btr_text                u8  "btr"
    invlpg_text             u8  "invlpg"
    lar_text                u8  "lar"
    lfs_text                u8  "lfs"
    lgs_text                u8  "lgs"
    lss_text                u8  "lss"
    lgdt_text               u8  "lgdt"
    lidt_text               u8  "lidt"
    lldt_text               u8  "lldt"
    lmsw_text               u8  "lmsw"
    lsl_text                u8  "lsl"
    ltr_text                u8  "ltr"
    sldt_text               u8  "sldt"
    str_text                u8  "str"
    verr_text               u8  "verr"
    verw_text               u8  "verw"
    sgdt_text               u8  "sgdt"
    sidt_text               u8  "sidt"
    smsw_text               u8  "smsw"
  shld_text:
    shl_text                u8  "shl"
                            u8  "d"
    sal_text                u8  "sal"
  shrd_text:
    shr_text                u8  "shr"
                            u8  "d"
    sar_text                u8  "sar"
    imul_text               u8  "i"
    mul_text                u8  "mul"
    test_text               u8  "test"
    not_text                u8  "not"
    neg_text                u8  "neg"
    idiv_text               u8  "i"
    div_text                u8  "div"
  inc_text:
    in_text                 u8  "in"
                            u8  "c"
    dec_text                u8  "dec"
    rol_text                u8  "rol"
    rcl_text                u8  "rcl"
    ror_text                u8  "ror"
    rcr_text                u8  "rcr"
    xchg_text               u8  "xchg"
    or_text                 u8  "or"
    adc_text                u8  "adc"
    xxx_text                u8  "??? "
    and_text                u8  "and"
    xor_text                u8  "xor"
    cmp_text                u8  "cmp"

;; Newer instructions
    cpuid_text              u8  "cpuid"
    rdmsr_text              u8  "rdmsr"
    rdpmc_text              u8  "rdpmc"
    rdtsc_text              u8  "rdtsc"
    rsm_text                u8  "rsm"
    ud2_0f0b_text           u8  "ud2_0f0b"
    ud2_0fb9_text           u8  "ud2_0fb9"
    wrmsr_text              u8  "wrmsr"

;; FPU instructions
    fcmovb_text             u8  "fcmovb"
    fcmovz_text             u8  "fcmovz"
    fcmovng_text            u8  "fcmovng"
    fcmovpo_text            u8  "fcmovpo"
    fcmovnb_text            u8  "fcmovnb"
    fcmovnz_text            u8  "fcmovnz"
    fcmovg_text             u8  "fcmovg"
    fcmovpe_text            u8  "fcmovpe"
  fcomi_text:
    fcomip_text             u8  "fcomip"
  fucomi_text:
    fucomip_text            u8  "fucomip"
    fpu_text                u8  "fpu"
  faddp_text:
    fadd_text               u8  "fadd"
                            u8  "p"
  fmulp_text:
    fmul_text               u8  "fmul"
                            u8  "p"
  fcompp_text:
  fcomp_text:
    fcom_text               u8  "fcom"
                            u8  "p"
                            u8  "p"
  fsubrp_text:
  fsubr_text:
    fsub_text               u8  "fsub"
                            u8  "r"
                            u8  "p"
    fsubp_text              u8  "fsubp"
  fdivr_text:
    fdiv_text               u8  "fdiv"
                            u8  "r"
    fdivp_text              u8  "fdivp"
    fdivrp_text             u8  "fdivrp"
  fldcw_text:
    fld_text                u8  "fld"
                            u8  "cw"
  fstp_text:
    fst_text                u8  "fst"
                            u8  "p"
    fxch_text               u8  "fxch"
    fnop_text               u8  "fnop"
    fchs_text               u8  "fchs"
    fabs_text               u8  "fabs"
    ftst_text               u8  "ftst"
    fxam_text               u8  "fxam"
    fld1_text               u8  "fld1"
    fldl2t_text             u8  "fldl2t"
    fldl2e_text             u8  "fldl2e"
    fldpi_text              u8  "fldpi"
    fldlg2_text             u8  "fldlg2"
    fldln2_text             u8  "fldln2"
    fldz_text               u8  "fldz"
    f2xm1_text              u8  "f2xm1"
    fyl2x_text              u8  "fyl2x"
    fptan_text              u8  "fptan"
    fpatan_text             u8  "fpatan"
    fxtract_text            u8  "fxtract"
  fprem_text:
    fprem1_text             u8  "fprem1"
    fdecstp_text            u8  "fdecstp"
    fincstp_text            u8  "fincstp"
    fyl2xp1_text            u8  "fyl2xp1"
    fsqrt_text              u8  "fsqrt"
    fsincos_text            u8  "fsincos"
    frndint_text            u8  "frndint"
    fscale_text             u8  "fscale"
    fsin_text               u8  "fsin"
    fcos_text               u8  "fcos"
    fldenv_text             u8  "fldenv"
    fnstenv_text            u8  "fnstenv"
    fnstcw_text             u8  "fnstcw"
  fucom_text:
  fucomp_text:
    fucompp_text            u8  "fucompp"
    fiadd_text              u8  "fiadd"
    fimul_text              u8  "fimul"
  ficomp_text:
    ficom_text              u8  "ficom"
                            u8  "p"
  fisubr_text:
    fisub_text              u8  "fisub"
                            u8  "r"
  fidivr_text:
    fidiv_text              u8  "fidiv"
                            u8  "r"
    fnclex_text             u8  "fnclex"
    fninit_text             u8  "fninit"
    fild_text               u8  "fild"
  fistp_text:
    fist_text               u8  "fist"
                            u8  "p"
    ffree_text              u8  "ffree"
    frstor_text             u8  "frstor"
    fnstsw_text             u8  "fnstsw"
    fbld_text               u8  "fbld"
    fbstp_text              u8  "fbstp"
    fnsave_text             u8  "fnsave"

;; MMX and SSE/SSE2 instructions
    emms_text               u8  "emms"
    packssdw_text           u8  "packssdw"
    packsswb_text           u8  "packsswb"
    packuswb_text           u8  "packuswb"
    paddb_text              u8  "paddb"
    paddsb_text             u8  "paddsb"
    paddsw_text             u8  "paddsw"
    paddusb_text            u8  "paddusb"
    paddusw_text            u8  "paddusw"
    paddw_text              u8  "paddw"
    paddd_text              u8  "paddd"
    pand_text               u8  "pand"
    pandn_text              u8  "pandn"
    pcmpeqb_text            u8  "pcmpeqb"
    pcmpeqd_text            u8  "pcmpeqd"
    pcmpeqw_text            u8  "pcmpeqw"
    pcmpgtb_text            u8  "pcmpgtb"
    pcmpgtd_text            u8  "pcmpgtd"
    pcmpgtw_text            u8  "pcmpgtw"
    pmaddwd_text            u8  "pmaddwd"
    pmulhw_text             u8  "pmulhw"
    pmullw_text             u8  "pmullw"
    por_text                u8  "por"
    pslld_text              u8  "pslld"
    psllq_text              u8  "psllq"
    psllw_text              u8  "psllw"
    psrad_text              u8  "psrad"
    psraw_text              u8  "psraw"
    psrld_text              u8  "psrld"
    psrlq_text              u8  "psrlq"
    psrlw_text              u8  "psrlw"
    psubb_text              u8  "psubb"
    psubd_text              u8  "psubd"
    psubsb_text             u8  "psubsb"
    psubsw_text             u8  "psubsw"
    psubusb_text            u8  "psubusb"
    psubusw_text            u8  "psubusw"
    psubw_text              u8  "psubw"
    punpckhbw_text          u8  "punpckhbw"
    punpckhwd_text          u8  "punpckhwd"
    punpckhdq_text          u8  "punpckhdq"
    punpcklbw_text          u8  "punpcklbw"
    punpcklwd_text          u8  "punpcklwd"
    punpckldq_text          u8  "punpckldq"
    pxor_text               u8  "pxor"

    null_text               u8  0
    bytes_94_108_text       u8  "{94 or 108 bytes}",0
  dword_text                u8  "d"
    word_text               u8  "word",0
    qword_text              u8  "qword",0
    real4_text              u8  "real32",0
    real8_text              u8  "real64",0
    real10_text             u8  "real80",0
    st0_comma_sti_text      u8  "st0,sti",0
    sti_comma_st0_text      u8  "sti,st0",0

    fpu_unknown_opcode      u8  "fpu opcode xx xx"
    unknown_opcode          u8  "opcode xx"
  illegal_register:
    unknown_text            u8  "???",0

    temp_buffer             u8  100 dup(0)
    temp_buffer2            u8  100 dup(0)
