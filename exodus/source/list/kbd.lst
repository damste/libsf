Microsoft (R) Macro Assembler Version 6.11a		    03/07/09 22:34:58
standard 104-keyboard Driver				     Page 1 - 1


				; kbd.asm
				;
				; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				; ³ standard 104-keyboard ³
				; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				;
				; Exodus native primative keyboard functions for 104-key keyboards
				;

				TITLE standard 104-keyboard Driver

				    .MODEL tiny

				    .STACK 0h

				INCLUDE \exodus\source\common\equates.asp
			      C ; equates.asp
			      C ;
			      C ; Exodus constants.  These are used at various places.
			      C ; This file provides a common area to modify constant values, rather than sifting through programs, etc.
			      C ;
			      C 
			      C 
			      C 
			      C INCLUDE x86_eq.asp
			      C ; x86_eq.asp
			      C ;
			      C ; Constants specific to the Intel architecture
			      C ;
			      C 
			      C 
			      C 
 = 0000			      C _TSS_BACK_LINK              EQU 0
 = 0004			      C _TSS_ESP0                   EQU 4
 = 0008			      C _TSS_SS0                    EQU 8
 = 000C			      C _TSS_ESP1                   EQU 12
 = 0010			      C _TSS_SS1                    EQU 16
 = 0014			      C _TSS_ESP2                   EQU 20
 = 0018			      C _TSS_SS2                    EQU 24
 = 001C			      C _TSS_CR3                    EQU 28
 = 0020			      C _TSS_EIP                    EQU 32
 = 0024			      C _TSS_EFLAGS                 EQU 36
 = 0028			      C _TSS_EAX                    EQU 40
 = 002C			      C _TSS_ECX                    EQU 44
 = 0030			      C _TSS_EDX                    EQU 48
 = 0034			      C _TSS_EBX                    EQU 52
 = 0038			      C _TSS_ESP                    EQU 56
 = 003C			      C _TSS_EBP                    EQU 60
 = 0040			      C _TSS_ESI                    EQU 64
 = 0044			      C _TSS_EDI                    EQU 68
 = 0048			      C _TSS_ES                     EQU 72
 = 004C			      C _TSS_CS                     EQU 76
 = 0050			      C _TSS_SS                     EQU 80
 = 0054			      C _TSS_DS                     EQU 84
 = 0058			      C _TSS_FS                     EQU 88
 = 005C			      C _TSS_GS                     EQU 92
 = 0060			      C _TSS_LDT                    EQU 96
 = 0064			      C _TSS_TRAP_BIT               EQU 100
 = 0001			      C _TSS_TRAP_BIT_MASK          EQU 1b
 = 0066			      C _TSS_IO_MAP                 EQU 102
			      C ; The following area is used by Exodus.  It appears immediate after the TSS in memory
 = 0068			      C _TSS_FPU_SAVE_AREA          EQU 104
			      C 
			      C 
			      C ; EFLAGS register constants to access individual flags
 = 0000			      C _EFLAGS_CF                  EQU 0
 = 0002			      C _EFLAGS_PF                  EQU 2
 = 0004			      C _EFLAGS_ACF                 EQU 4
 = 0006			      C _EFLAGS_ZF                  EQU 6
 = 0007			      C _EFLAGS_SF                  EQU 7
 = 0008			      C _EFLAGS_TF                  EQU 8
 = 0009			      C _EFLAGS_IF                  EQU 9
 = 000A			      C _EFLAGS_DF                  EQU 10
 = 000B			      C _EFLAGS_OF                  EQU 11
 = 000C			      C _EFLAGS_IOPL                EQU 12
 = 000E			      C _EFLAGS_NT                  EQU 14
 = 0010			      C _EFLAGS_RF                  EQU 16
 = 0011			      C _EFLAGS_VM                  EQU 17
			      C ; Masks to access specific bits
 = 0001			      C _EFLAGS_CF_MASK             EQU  1b SHL _EFLAGS_CF
 = 0004			      C _EFLAGS_PF_MASK             EQU  1b SHL _EFLAGS_PF
 = 0010			      C _EFLAGS_ACF_MASK            EQU  1b SHL _EFLAGS_ACF
 = 0040			      C _EFLAGS_ZF_MASK             EQU  1b SHL _EFLAGS_ZF
 = 0080			      C _EFLAGS_SF_MASK             EQU  1b SHL _EFLAGS_SF
 = 0100			      C _EFLAGS_TF_MASK             EQU  1b SHL _EFLAGS_TF
 = 0200			      C _EFLAGS_IF_MASK             EQU  1b SHL _EFLAGS_IF
 = 0400			      C _EFLAGS_DF_MASK             EQU  1b SHL _EFLAGS_DF
 = 0800			      C _EFLAGS_OF_MASK             EQU  1b SHL _EFLAGS_OF
 = 3000			      C _EFLAGS_IOPL_MASK           EQU 11b SHL _EFLAGS_IOPL
 = 4000			      C _EFLAGS_NT_MASK             EQU  1b SHL _EFLAGS_NT
 = 00010000		      C _EFLAGS_RF_MASK             EQU  1b SHL _EFLAGS_RF
 = 00020000		      C _EFLAGS_VM_MASK             EQU  1b SHL _EFLAGS_VM
			      C 
 = 1000			      C _CW_INFINITY                EQU 1000000000000b
 = 0C00			      C _CW_ROUNDING                EQU  110000000000b
 = 0000			      C _CW_ROUNDING_00             EQU  000000000000b
 = 0400			      C _CW_ROUNDING_01             EQU  010000000000b
 = 0800			      C _CW_ROUNDING_10             EQU  100000000000b
 = 0C00			      C _CW_ROUNDING_11             EQU  110000000000b
 = 0300			      C _CW_PRECISION               EQU    1100000000b
 = 0000			      C _CW_PRECISION_00            EQU    0000000000b
 = 0100			      C _CW_PRECISION_01            EQU    0100000000b
 = 0200			      C _CW_PRECISION_10            EQU    1000000000b
 = 0300			      C _CW_PRECISION_11            EQU    1100000000b
 = 0020			      C _CW_PM                      EQU        100000b
 = 0010			      C _CW_UM                      EQU         10000b
 = 0008			      C _CW_OM                      EQU          1000b
 = 0004			      C _CW_ZM                      EQU           100b
 = 0002			      C _CW_DM                      EQU            10b
 = 0001			      C _CW_IM                      EQU             1b
			      C 
 = 8000			      C _SW_BUSY                    EQU 1000000000000000b
 = 4000			      C _SW_C3                      EQU  100000000000000b
 = 3800			      C _SW_TOS                     EQU   11100000000000b
 = 0400			      C _SW_C2                      EQU      10000000000b
 = 0200			      C _SW_C1                      EQU       1000000000b
 = 0100			      C _SW_C0                      EQU        100000000b
 = 0080			      C _SW_ERROR_SUMMARY           EQU         10000000b
 = 0040			      C _SW_STACK_FAULT             EQU          1000000b
 = 0020			      C _SW_PE                      EQU           100000b
 = 0010			      C _SW_UE                      EQU            10000b
 = 0008			      C _SW_OE                      EQU             1000b
 = 0004			      C _SW_ZE                      EQU              100b
 = 0002			      C _SW_DE                      EQU               10b
 = 0001			      C _SW_IE                      EQU                1b
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ GDT ENTRIES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0008			      C     _sIDT                       EQU 1 * 8       ; IDT
 = 0010			      C     _sGDT                       EQU 2 * 8       ; GDT
 = 0018			      C     _sSTACK                     EQU 3 * 8       ; STACK
 = 0020			      C     _sCODE                      EQU 4 * 8       ; kernel CODE for kernel code
 = 0048			      C     _sDATA                      EQU 9 * 8       ; kernel DATA selector for kernel data
 = 0028			      C     _sGRAPHICS                  EQU 5 * 8       ; Graphics video (0a0000h)
 = 0030			      C     _sMONO                      EQU 6 * 8       ; Mono video (0b0000h)
 = 0038			      C     _sVGA                       EQU 7 * 8       ; VGA video (0b8000h)
 = 0040			      C     _sALL_MEM                   EQU 8 * 8       ; All memory (for debugging)
			      C     ; 9 is above, _sDATA
 = 0050			      C     _sEXODUS_MEM                EQU 10 * 8      ; Exodus assigned memory
 = 0058			      C     _sEXODUS_PORTS              EQU 11 * 8      ; Exodus assigned ports
 = 0060			      C     _sEXODUS_INTS               EQU 12 * 8      ; Exodus assigned ints
			      C     ;_sNOT_USED                                 ; available
 = 0070			      C     _sEXODUS_TSS                EQU 14 * 8      ; Exodus TSS
 = 0078			      C     _sEXODUS_TASK_GATE          EQU 15 * 8      ; Exodus kernel task gate (points to _sEXODUS_TSS)
 = 0080			      C     _sEXODUS_SLAVE_TSS          EQU 16 * 8      ; Exodus Slave TSS
 = 0088			      C     _sEXODUS_SLAVE_TASK_GATE    EQU 17 * 8      ; Exodus kernel slave task gate (points to _sEXODUS_SLAVE_TSS)
			      C     ;_sNOT USED
 = 0098			      C     _sPRIMATIVES                EQU 19 * 8      ; Primative structure for natives
 = 00A0			      C     _sPRIMATIVE_LOAD_INFO       EQU 20 * 8      ; Primative load information (for reporting on each driver)
 = 00A8			      C     _sSYSTEM                    EQU 21 * 8      ; Exodus system memory
 = 00B0			      C     _sEXODUS_REQUESTOR          EQU 22 * 8      ; Call gate to Exodus's requestor() function
 = 00B8			      C     _sSYSTEM_RING1              EQU 23 * 8      ; Exodus system memory for ring-1 apps
 = 00C0			      C     _sSYSTEM_RING2              EQU 24 * 8      ; Exodus system memory for ring-2 apps
 = 00C8			      C     _sSYSTEM_RING3              EQU 25 * 8      ; Exodus system memory for ring-3 apps
 = 00D0			      C     _sDEBI_screen               EQU 26 * 8      ; low-level DEBI debugger's save screen buffer
 = 00D8			      C     _sDEBI_memory               EQU 27 * 8      ; low-level DEBI debugger's memory
 = 00E0			      C     _sFLOPPY_TRACK              EQU 28 * 8      ; Floppy disk data I/O for one full track
 = 00E8			      C     _sVGA_BACKUP                EQU 29 * 8      ; VGA video (060000h, used when in a graphics mode so writes
			      C                                                 ;  to the text screen are still valid)
 = 00F0			      C     _sDEBI_screen2              EQU 30 * 8      ; low-level DEBI debugger's save screen buffer2 (for popups and menus)
 = 00F8			      C     _sDEBI_temp                 EQU 31 * 8      ; low-level DEBI debugger's temporary selector (used for various things)
 = 0100			      C     _sEXODUS_OBJECTS            EQU 32 * 8      ; Exodus objects
 = 0108			      C     _sTASK_SWITCH_TSS           EQU 33 * 8      ; Task Manager's switch_task() function
 = 0110			      C     _sTASK_SWITCH_TASK_GATE     EQU 34 * 8      ; Task Manager's task gate (points to _sTASK_SWITCH_TSS)
 = 0118			      C     _sTASK_STACK                EQU 35 * 8      ; Task Manger task's stack
 = 0120			      C     _sSTACK0                    EQU 36 * 8      ; Exodus Stack 0
 = 0128			      C     _sSTACK1                    EQU 37 * 8      ; Exodus Stack 1
 = 0130			      C     _sSTACK2                    EQU 38 * 8      ; Exodus Stack 2
 = 0138			      C     _sDEBI_dt                   EQU 39 * 8      ; low-level DEBI debugger's DT storage
 = 0140			      C     _sDEBI_np                   EQU 40 * 8      ; low-level DEBI debugger's NP storage
 = 0148			      C     _sDEBI_rp                   EQU 41 * 8      ; low-level DEBI debugger's RP storage
			      C 
			      C   ; Variable base/limit GDT slots setup in INIT32.ASP
 = 0190			      C     _sEXODUS_INI                EQU 50 * 8      ; Holds the parsed EXODUS.INI sructure
 = 0198			      C     _sEXODUS_INI_ERRORS         EQU 51 * 8      ; Holds any errors found while parsing EXODUS.INI
 = 01A0			      C     _sTASK_SYSTEM               EQU 52 * 8      ; Holds all tasks
			      C 
 = 5DA0			      C     _cgTEMP_PRIMATIVE_MAIN      EQU 2996 * 8
 = 5DA8			      C     _cgTEMP_PRIMATIVE_REQUESTOR EQU 2997 * 8
 = 5DB0			      C     _csTEMP_PRIMATIVE           EQU 2998 * 8
 = 5DB8			      C     _dsTEMP_PRIMATIVE           EQU 2999 * 8
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ CONSTANTS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÙ
 = 00C8			      C     _MIN_PRIMATIVE              EQU 200                             ; Start of the primatives
 = 0BB3			      C     _MAX_PRIMATIVE              EQU 2995                            ; End of the primatives
 = 0FFF			      C     _lastGDT                    EQU 4095                            ; Last valid GDT in the GDT
 = 0032			      C     _firstASSIGNMENT            EQU 50                              ; The first Exodus assigned GDT entry for various items
 = 00C7			      C     _lastASSIGNMENT             EQU 199                             ; The last Exodus assigned GDT entry for various items
 = 0BB8			      C     _firstUSER_ASSIGNMENT       EQU 3000
 = 0FFF			      C     _lastUSER_ASSIGNMENT        EQU 4095
 = 00C7			      C     _sGDT_init                  EQU 199                             ; Only initialize the first 199 GDT entries
			      C 
			      C 
			      C   ; Required memory structures for Exodus
			      C   ; Refer to Bootup(internal) document for definitive memory locations
 = 0008A000		      C     _sIDT_base                  EQU 8a000h
 = 0800			      C     _sIDT_limit                 EQU 800h
 = 0800			      C     _sGDT_base                  EQU 0800h
 = 8000			      C     _sGDT_limit                 EQU 8000h
 = 00098000		      C     _sSTACK_base                EQU 98000h
 = 8000			      C     _sSTACK_limit               EQU 8000h
 = 00010000		      C     _sCODE_base                 EQU 10000h
 = 00040000		      C     _sCODE_limit                EQU 40000h
 = 00010000		      C     _sDATA_base                 EQU 10000h
 = 00030000		      C     _sDATA_limit                EQU 30000h
 = 000A0000		      C     _sGRAPHICS_base             EQU 0a0000h
 = 00010000		      C     _sGRAPHICS_limit            EQU 10000h
 = 000B0000		      C     _sMONO_base                 EQU 0b0000h
 = 8000			      C     _sMONO_limit                EQU 8000h
 = 000B8000		      C     _sVGA_base                  EQU 0b8000h     ; Also, see _sVGA_BACKUP_ below
 = 8000			      C     _sVGA_limit                 EQU 8000h
 = 0000			      C     _sALL_MEM_base              EQU 0
 = FFFFFFFF		      C     _sALL_MEM_limit             EQU 0ffffffffh
 = 00070C00		      C     _sEXODUS_MEM_base           EQU 70c00h
 = 4000			      C     _sEXODUS_MEM_limit          EQU 4000h
 = 0006CC00		      C     _sEXODUS_PORTS_base         EQU 6cc00h
 = 4000			      C     _sEXODUS_PORTS_limit        EQU 4000h
 = 00097E00		      C     _sEXODUS_INTS_base          EQU 97e00h
 = 0200			      C     _sEXODUS_INTS_limit         EQU 200h
 = 00068100		      C     _sEXODUS_TSS_base           EQU 68100h
 = 0100			      C     _sEXODUS_TSS_limit          EQU 100h        ; 256 bytes
			      C    ;_sEXODUS_TASK_GATE          EQU task gate pointing to _sEXODUS_TSS
 = 00068200		      C     _sEXODUS_SLAVE_TSS_base     EQU 68200h
 = 0100			      C     _sEXODUS_SLAVE_TSS_limit    EQU 100h        ; 256 bytes
 = 0008D380		      C     _sPRIMATIVES_base           EQU 8d380h
 = 4000			      C     _sPRIMATIVES_limit          EQU 4000h       ; 16k
 = 0008C380		      C     _sPRIMATIVE_LOAD_INFO_base  EQU 8c380h
 = 1000			      C     _sPRIMATIVE_LOAD_INFO_limit EQU 1000h       ; 4k
 = 00089400		      C     _sSYSTEM_base               EQU 89400h
 = 0C00			      C     _sSYSTEM_limit              EQU 0c00h       ; 3k
 = 0800			      C     _sSYSTEM_USER_limit         EQU 0800h       ; 2k
 = 00281400		      C     _sDEBI_screen_base          EQU 281400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000			      C     _sDEBI_screen_limit         EQU 8000h       ; 32k
 = 00279400		      C     _sDEBI_memory_base          EQU 279400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000			      C     _sDEBI_memory_limit         EQU 8000h       ; 32k
 = 00074C00		      C     _sFLOPPY_TRACK_base         EQU 74c00h
 = 4800			      C     _sFLOPPY_TRACK_limit        EQU 4800h       ; 512 bytes per sector * 18 sectors * 2 sides = 18k
 = 00060000		      C     _sVGA_BACKUP_base           EQU 60000h      ; Note, the backup area is used when in graphics modes that use a0000h
 = 8000			      C     _sVGA_BACKUP_limit          EQU 8000h       ; so all video writes to the text window are still saved
 = 00258000		      C     _sDEBI_screen2_base         EQU 258000h
 = 00028000		      C     _sDEBI_screen2_limit        EQU 28000h       ; 32k
 = 00068000		      C     _sTASK_SWITCH_TSS_base      EQU 68000h
 = 0100			      C     _sTASK_SWITCH_TSS_limit     EQU 100h        ; 256 bytes
 = 00220000		      C     _sTASK_STACK_base           EQU 220000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sTASK_STACK_limit          EQU 8000h       ; 32k
 = 00095380		      C     _sSTACK0_base               EQU 95380h
 = 2000			      C     _sSTACK0_limit              EQU 2000h       ; 8k
 = 00093380		      C     _sSTACK1_base               EQU 93380h
 = 2000			      C     _sSTACK1_limit              EQU 2000h       ; 8k
 = 00091380		      C     _sSTACK2_base               EQU 91380h
 = 2000			      C     _sSTACK2_limit              EQU 2000h       ; 8k
 = 00240000		      C     _sDEBI_dt_base              EQU 240000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_dt_limit             EQU 8000h       ; 32k
 = 00248000		      C     _sDEBI_np_base              EQU 248000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_np_limit             EQU 8000h       ; 32k
 = 00250000		      C     _sDEBI_rp_base              EQU 250000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_rp_limit             EQU 8000h       ; 32k
			      C 
 = 00050000		      C     _sEXODUS_OBJECTS_base       EQU 50000h
 = 8000			      C     _sEXODUS_OBJECTS_limit      EQU 8000h       ; 32k
 = 00200000		      C     _sEXODUS_INI_base           EQU 200000h     ; 1MB               ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 00010000		      C     _sEXODUS_INI_limit          EQU 10000h      ; 64k
 = 00210000		      C     _sEXODUS_INI_ERRORS_base    EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 4000			      C     _sEXODUS_INI_ERRORS_limit   EQU 4000h       ; 16k
 = 00210000		      C     _sTASK_SYSTEM_base          EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 00010000		      C     _sTASK_SYSTEM_limit         EQU 010000h     ; 64k
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOOT DT STRUCTURE ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _BOOT_DT_object_type        EQU 0
 = 0001			      C     _BOOT_DT_days               EQU 1
 = 0005			      C     _BOOT_DT_seconds            EQU 5
 = 0008			      C     _BOOT_DT_rp_offset          EQU 8
 = 000A			      C     _BOOT_DT_entry_type         EQU 10
 = 000B			      C     _BOOT_DT_np_offset          EQU 11
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOOT PARAMETER BLOCK STRUCTURE ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _BOOT_PB_size               EQU 0
 = 0004			      C     _BOOT_PB_main               EQU 4
 = 0008			      C     _BOOT_PB_requestor          EQU 8
 = 000C			      C     _BOOT_PB_start_head         EQU 12
 = 000D			      C     _BOOT_PB_start_track        EQU 13
 = 000E			      C     _BOOT_PB_start_sector       EQU 14
 = 0010			      C     _BOOT_PB_end_head           EQU 16
 = 0011			      C     _BOOT_PB_end_track          EQU 17
 = 0012			      C     _BOOT_PB_end_sector         EQU 18
 = 0014			      C     _BOOT_PB_entry_type         EQU 20
 = 0016			      C     _BOOT_PB_linear_offset      EQU 22
 = 001A			      C     _BOOT_PB_dt_offset          EQU 26
 = 001C			      C     _BOOT_PB_crc16              EQU 28
 = 0020			      C     _BOOT_PB_structure_size     EQU 32
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS.INI STRUCTURES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _EXODUS_INI_FIRST_BRACKET       EQU 0
 = 0004			      C     _EXODUS_INI_TOTAL_BYTES         EQU 4
 = 0008			      C     _EXODUS_INI_TOTAL_BRACKET_GROUPS EQU 8
 = 000C			      C     _EXODUS_INI_TOTAL_PAREN_CASKS   EQU 12
 = 0010			      C     _EXODUS_INI_HEADER_LENGTH       EQU 16
			      C 
 = 0000			      C     _EXODUS_BRACKET_NEXT            EQU 0
 = 0004			      C     _EXODUS_BRACKET_PAREN_CASKS     EQU 4
 = 0008			      C     _EXODUS_BRACKET_TOTAL_PARENS    EQU 8
 = 000C			      C     _EXODUS_BRACKET_NAME            EQU 12
 = 0010			      C     _EXODUS_BRACKET_HANDLE          EQU 16
 = 0014			      C     _EXODUS_BRACKET_REQUESTOR       EQU 20
 = 0016			      C     _EXODUS_BRACKET_REQUESTOR_FUNC  EQU 22
 = 001A			      C     _EXODUS_BRACKET_SCRATCH_AREA    EQU 26
 = 001E			      C     _EXODUS_BRACKET_LENGTH          EQU 30
			      C 
 = 0000			      C     _EXODUS_PAREN_NEXT              EQU 0
 = 0004			      C     _EXODUS_PAREN_NEXT_SAME_LINE    EQU 4
 = 0008			      C     _EXODUS_PAREN_DATA_ITEMS        EQU 8
 = 000C			      C     _EXODUS_PAREN_TOTAL_DATA_ITEMS  EQU 12
 = 0010			      C     _EXODUS_PAREN_SOURCE_LINE       EQU 16
 = 0014			      C     _EXODUS_PAREN_SOURCE_LINE_LENGTH EQU 20
 = 0018			      C     _EXODUS_PAREN_HANDLE            EQU 24
 = 001A			      C     _EXODUS_PAREN_REQUESTOR         EQU 26
 = 001E			      C     _EXODUS_PAREN_REQUESTOR_FUNC    EQU 30
 = 0022			      C     _EXODUS_PAREN_SCRATCH_AREA      EQU 34
 = 0026			      C     _EXODUS_PAREN_LENGTH            EQU 38
			      C 
 = 0000			      C     _EXODUS_DATA_NEXT               EQU 0
 = 0004			      C     _EXODUS_DATA_DATA_ITEM_SOURCE   EQU 4
 = 0008			      C     _EXODUS_DATA_DATA_ITEM_LENGTH   EQU 8
 = 000C			      C     _EXODUS_DATA_LENGTH             EQU 12
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS xxx STRUCTURES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _EXODUS_MEM_type                EQU 0
 = 0004			      C     _EXODUS_MEM_base                EQU 4
 = 0008			      C     _EXODUS_MEM_limit               EQU 8
 = 000C			      C     _EXODUS_MEM_gdt                 EQU 12
 = 000E			      C     _EXODUS_MEM_ldt                 EQU 14
 = 0010			      C     _EXODUS_MEM_size                EQU 16
			      C 
 = 0010			      C     _EXODUS_PORTS_size              EQU 16
			      C 
 = 0002			      C     _EXODUS_INTS_size               EQU 2
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS SYSTEM MEMORY ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Note, when updates are made here they need to be reflected in INF\SYSTEM.INF
			      C ; Note, when updates are made here and INF\SYSTEM.INF, the "Exodus Quick Reference" manual needs to be updated
 = 0000			      C     _SYSTEM_SECONDS_SINCE_BOOTUP    EQU 0                           ; dword
 = 0004			      C     _SYSTEM_SECONDS_SINCE_MIDNIGHT  EQU 4                           ; dword
 = 0008			      C     _SYSTEM_HOURS                   EQU 8                           ; byte
 = 0009			      C     _SYSTEM_MINUTES                 EQU 9                           ; byte
 = 000A			      C     _SYSTEM_SECONDS                 EQU 10                          ; byte
 = 000B			      C     _SYSTEM_182S_OF_A_SECOND        EQU 11                          ; byte
 = 000C			      C     _SYSTEM_DAY                     EQU 12                          ; byte
 = 000D			      C     _SYSTEM_MONTH                   EQU 13                          ; byte
 = 000E			      C     _SYSTEM_YEAR                    EQU 14                          ; word
 = 0010			      C     _SYSTEM_DAY_OF_YEAR             EQU 16                          ; word
 = 0012			      C     _SYSTEM_BUILD                   EQU 18                          ; 10-byte string in the format: "mm.dd.yyyy"
 = 001C			      C     _SYSTEM_TOTAL_MEMORY            EQU 28                          ; dword, total ram in bytes
 = 0020			      C     _SYSTEM_VGA_HORIZONTAL          EQU 32                          ; word (pixels-graphics, or columns-text)
 = 0022			      C     _SYSTEM_VGA_VERTICAL            EQU 34                          ; word (pixels-graphics, or rows-text)
 = 0024			      C     _SYSTEM_VGA_VIDEO_MODE          EQU 36                          ; byte (0-graphics, 1-text)
 = 0025			      C     _SYSTEM_MONO_VIDEO_MODE         EQU 37                          ; byte (0-graphics, 1-text, 0ffh-Unknown)
			      C 
			      C   ; Non-user accessible system memory areas (Exodus internal, hence the use of the _i_)
 = 0800			      C     _SYSTEM_i_FATAL                 EQU 2048                        ; dword
 = 0804			      C     _SYSTEM_i_TASKS_CREATED         EQU 2052                        ; dword
 = 0808			      C     _SYSTEM_i_TASKS_BY_USER         EQU 2056                        ; dword
 = 080C			      C     _SYSTEM_i_TASKS_BY_ERROR        EQU 2060                        ; dword
 = 0810			      C     _SYSTEM_i_IRQ6_INDICATOR        EQU 2064                        ; byte, IRQ6 indicator (changes each time an IRQ6 is signaled)
 = 0811			      C     _SYSTEM_i_IRQ6_INDICATOR_LAST   EQU 2065                        ; byte, IRQ6 indicator previous, used to see when an IRQ6 is signaled
 = 0812			      C     _SYSTEM_i_BASE                  EQU 2066                        ; dword
 = 0816			      C     _SYSTEM_i_LIMIT                 EQU 2070                        ; dword
 = 081A			      C     _SYSTEM_i_DWORD_TO_COPY         EQU 2074                        ; word
 = 081C			      C     _SYSTEM_i_LAST_GDT_REFERENCED   EQU 2076                        ; qword
 = 0824			      C     _SYSTEM_i_CODE_GDT_OFFSET       EQU 2084                        ; dword (used temporarily during native primative install)
 = 0828			      C     _SYSTEM_i_DATA_GDT_OFFSET       EQU 2088                        ; dword (used temporarily during native primative install)
 = 082C			      C     _SYSTEM_i_MAIN_GDT_OFFSET       EQU 2092                        ; dword (used temporarily during native primative install)
 = 0830			      C     _SYSTEM_i_REQUESTOR_GDT_OFFSET  EQU 2096                        ; dword (used temporarily during native primative install)
 = 0834			      C     _SYSTEM_i_GDT_TO_ASSIGN         EQU 2100                        ; word (used various places to assign GDT entries)
 = 0836			      C     _SYSTEM_i_USER_GDT_TO_ASSIGN    EQU 2102                        ; word (used various places to assign USER Program GDTs)
			      C   ; Next offset is 2104
			      C 
			      C 
			      C   ; These scratch items exist from end of memory down
 = 0BF8			      C     _SYSTEM_i_SCRATCH_DWORD2        EQU 3064                        ; dword (used various places as a scratch buffer)
 = 0BFC			      C     _SYSTEM_i_SCRATCH_DWORD1        EQU 3068                        ; dword (used various places as a scratch buffer)
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOCHS SUPPORT ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; These equates are used to communicate via INT 0FFh
			      C ; Values here are in ecx, with edx being used for data information.
			      C ; Values in eax must be
 = 12345678		      C     _BOCHS1                         EQU 12345678h
 = 87654321		      C     _BOCHS2                         EQU 87654321h
 = 0000			      C     _BOCHS_GET_MONO_MOUSE_XY        EQU 0
 = 0001			      C     _BOCHS_GET_MONO_CURSOR          EQU 1
			      C 

				    .386P
 00000000			_TEXT32 SEGMENT BYTE 'CODE' USE32
				    ASSUME NOTHING

				; These are required to be the first 2 dwords in the file
 00000000  00000087 R		dd  offset main
 00000004  00000008 R		dd  offset requestor




 00000008			    requestor   PROC
				    ; This routine is called by Exodus.  When this function is called multi-tasking is not installed.  This is a linear function.
				    ;
				    ; Upon entry:   eax - requested function
				    ;                ds - temporary ORG 0h data segment for use with these requestor() functions
				    ;
				    ; Upon exit:    results vary based on value of eax
				    ;
				        .IF (eax == 'info')
 00000008  3D 696E666F	   *	    cmp    eax, 'info'
 0000000D  75 26	   *	    jne    @C0001
				          ; Program information
 0000000F  B8 6E617469		            mov     eax,'nati'                              ; Identifying this program as a native primative
 00000014  B9 00000B0C R	            mov     ecx,offset end_of_required_data         ; The maximum number of bytes to retain after loading

 00000019  BE 00000B0C R	            mov     esi,offset driver_primatives            ; Offset to the native primatives structure
 0000001E  BF 00000880 R	            mov     edi,offset driver_name
 00000023  BB 00000895 R	            mov     ebx,offset version
 00000028  BA 000008A0 R	            mov     edx,offset copyright
 0000002D  BD 000008C0 R	            mov     ebp,offset author
 00000032  F8			            clc
				        .ELSEIF (eax == 'prim')
 00000033  EB 51	   *	    jmp    @C0003
 00000035		   *@C0001:
 00000035  3D 7072696D	   *	    cmp    eax, 'prim'
 0000003A  75 14	   *	    jne    @C0004
				          ; Native primatives this program will use
 0000003C  66| 8C 1D		            mov     ds:data_segment,ds
	   000008D0 R
 00000043  BE 00000A1C R	            mov     esi,offset required_primatives          ; This primative requires these external influence
 00000048  BF 00000A02 R	            mov     edi,offset primative_call_gates
 0000004D  F8			            clc
				        .ELSEIF (eax == 'id  ')
 0000004E  EB 36	   *	    jmp    @C0006
 00000050		   *@C0004:
 00000050  3D 69642020	   *	    cmp    eax, 'id  '
 00000055  75 0F	   *	    jne    @C0007
				          ; Display this program's ID on the VGA monitor
 00000057  BE 00000880 R	            mov     esi,offset driver_name
 0000005C  2E: FF 1D		            call    fword ptr cs:_VID_display_string_nr_vga
	   00000A04 R
 00000063  F8			            clc
				        .ELSEIF (eax == 'note')
 00000064  EB 20	   *	    jmp    @C0009
 00000066		   *@C0007:
 00000066  3D 6E6F7465	   *	    cmp    eax, 'note'
 0000006B  75 18	   *	    jne    @C000A
				          ; Exodus has a note for us
 0000006D  B8 73746F70		            mov     eax,'stop'
 00000072  BB 6C6F6164		            mov     ebx,'load'
 00000077  BE 00000880 R	            mov     esi,offset driver_name
 0000007C  2E: FF 1D		            call    fword ptr cs:_EXODUS_requestor
	   00000A00 R
				        .ELSE
 00000083  EB 01	   *	    jmp    @C000C
 00000085		   *@C000A:
 00000085  F9			            stc
				        .ENDIF
 00000086		   *@C000C:
 00000086		   *@C0009:
 00000086		   *@C0006:
 00000086		   *@C0003:
 00000086  CB			        retf
 00000087			    requestor   ENDP




 00000087			    main    PROC
				    ; This routine is called once by Exodus once initialization is complete (all calls to requestor() are finished)
				    ; It is used by Exodus to allow this driver to properly initialize itself.
				    ; When this function is called multi-tasking is not installed.  This is a linear function.
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    A "continued status of execution" is expected by Exodus.  This indicates whether or not everything
				    ;               initialized ok or is available.  If everything is OK the carry? flag is CLEAR.  If there is an error
				    ;               and this driver cannot continue then the carry? should be SET.
				    ;               carry? - CLEAR=Ok to continue
				    ;                          SET=Error initializing
				    ;
 00000087  66| 2E: 8E 1D	        mov     ds,cs:data_segment
	   000008D0 R
 0000008F  C6 05 000008CF R	        mov     ds:bootup,0
	   00
 00000096  E8 00000001		        call    initialize_driver
				      ; Right now, carry? is SET or CLEAR indicating status of driver
 0000009B  CB			        retf
 0000009C			    main    ENDP




 0000009C			    initialize_driver   PROC
				    ; This routine initializes the keyboard to ensure it's setup correctly
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    The keyboard is initialized if carry? is clear
				    ;
				      ;; Point IRQ1 to the KBD ISR (Exodus remaps IRQs to 70h - 7fh ... how thoughtful. :))
 0000009C  B8 62696E74		        mov     eax,'bint'
 000000A1  B3 71		        mov     bl,71h
 000000A3  B9 00000001		        mov     ecx,1
 000000A8  BA 0000011A R	        mov     edx,offset KBD_handler                              ; Offset to the keyboard ISR
 000000AD  FF 1D 00000A00 R	        call    fword ptr ds:_EXODUS_requestor

 000000B3  FF 1D 00000A0C R	        call    fword ptr ds:_iBIOS_read_8042_64h                   ; See if the keyboard is active
 000000B9  A8 10		        test    al,10000b
				        .IF (!zero?)
 000000BB  74 38	   *	    je     @C000D
 000000BD			          kbd_ok:
 000000BD  E8 00000036		            call    invDisable_keyboard
				          ;; Set the delay and repeat rate
 000000C2  B4 F3		            mov     ah,0f3h                                         ; Typematic control (repeating character rate)
 000000C4  FF 1D 00000A12 R	            call    fword ptr ds:_iBIOS_write_8042_60h
 000000CA  32 E4		            xor     ah,ah                                           ; Delay = 250ms, 30 cps (min delay, max speed)
 000000CC  FF 1D 00000A12 R	            call    fword ptr ds:_iBIOS_write_8042_60h

				          ;; Set the LEDs to all off
 000000D2  B4 ED		            mov     ah,0edh                                         ; LED write
 000000D4  FF 1D 00000A12 R	            call    fword ptr ds:_iBIOS_write_8042_60h
 000000DA  32 E4		            xor     ah,ah                                           ; 00000:x:x:x = CAPS:NUM:SCROLL; 1-on, 0-off
 000000DC  FF 1D 00000A12 R	            call    fword ptr ds:_iBIOS_write_8042_60h
 000000E2  E8 00000022		            call    invEnable_keyboard

				          ;; Display the keyboard logo
 000000E7  BE 000008D4 R	            mov     esi,offset keyboard_logo
 000000EC  FF 1D 00000A02 R	            call    fword ptr ds:_VID_draw_logo

				          ;; Everything's fine
 000000F2  F8			            clc
				        .ELSE
 000000F3  EB 01	   *	    jmp    @C000F
 000000F5		   *@C000D:
 000000F5  F9			            stc
				        .ENDIF
 000000F6		   *@C000F:

 000000F6  F8			        clc
 000000F7  C3			        ret
 000000F8			    initialize_driver   ENDP




 000000F8			    invDisable_keyboard    PROC
				    ; Sends the disable keyboard command to port 64h
 000000F8  50			        push    eax
 000000F9  B4 AD		        mov     ah,0adh                                             ; Disable keyboard command
 000000FB  FF 1D 00000A10 R	        call    fword ptr ds:_iBIOS_write_8042_64h
 00000101  FF 1D 00000A0A R	        call    fword ptr ds:_TIMER_wait_full_tick
 00000107  58			        pop     eax
 00000108  C3			        ret
 00000109			    invDisable_keyboard    ENDP




 00000109			    invEnable_keyboard     PROC
				    ; Sends the enable keyboard command to port 64h
 00000109  50			        push    eax
 0000010A  B4 AE		        mov     ah,0aeh                                             ; Enable keyboard command
 0000010C  FF 1D 00000A10 R	        call    fword ptr ds:_iBIOS_write_8042_64h
 00000112  FF 1D 00000A0A R	        call    fword ptr ds:_TIMER_wait_full_tick
 00000118  58			        pop     eax
 00000119  C3			        ret
 0000011A			    invEnable_keyboard     ENDP




 0000011A			    KBD_handler     PROC
				    ; Right now, we know there's some data ready for us
 0000011A  1E			        push    ds
 0000011B  60			        pushad

				    ;; Just store it for later processing
				    ;; * Note:  The logic to decode the key's scancode isn't in this routine because the ISR should be fast-and-efficient.

 0000011C  66| 2E: 8E 1D	        mov     ds,cs:data_segment
	   000008D0 R
 00000124  E4 60		        in      al,060h                                                 ; Read the scan code
				;pushad
				;push ds:text_x
				;push ds:text_y
				;movzx edx,al
				;mov ebx,16
				;call fword ptr ds:_VID_g_display_radix_in_edx_mono
				;add ds:text_x,8*4
				;.IF (ds:text_x > 720-(8*4))
				;    mov ds:text_x,0
				;    add ds:text_y,10
				;.ENDIF
				;popad
 00000126  E8 00000020		        call    invKBD_interpret_keystroke

				        .IF (!carry?)
 0000012B  72 17	   *	    jb     @C0010
				          ; Action is required (they've done something that might trigger something else)
				            .IF (ds:debi_intercept == 1)
 0000012D  80 3D 000008D2 R
	   01		   *	    cmp    ds : debi_intercept, 001h
 00000134  75 08	   *	    jne    @C0012
 00000136  FF 1D 00000A06 R	                call    fword ptr ds:_iDEBI_kbd_interface
				            .ELSE
 0000013C  EB 06	   *	    jmp    @C0014
 0000013E		   *@C0012:
 0000013E  FF 1D 00000A08 R	                call    fword ptr ds:_iTASK_kbd_interface
				            .ENDIF
				        .ENDIF
 00000144		   *@C0014:
 00000144		   *@C0010:

				      ; Signal end-of-interrupt
 00000144  B0 20		        mov     al,20h
 00000146  E6 20		        out     20h,al

 00000148  61			        popad
 00000149  1F			        pop     ds
 0000014A  CF			        iretd
 0000014B			    KBD_handler     ENDP




 0000014B			    invKBD_interpret_keystroke      PROC
				    ; This routine is an unusual one.  It doesn't get directly called usually, but it can
				    ; When it is directly called the application is specifically waiting for a key
				    ;
				    ; Upon entry:   al - key that was just intercepted
				    ;
				    ; Upon exit:    carry? - SET if key was nothing of significance (such as the release of a key)
				    ;                        CLEAR if action is required (such as this is the user pressing a key)
				    ;
				        .IF (al == 0e0h)
 0000014B  3C E0	   *	    cmp    al, 0E0h
 0000014D  75 0D	   *	    jne    @C0015
				          ; It's an extended keycode
 0000014F  C6 05 000008D3 R	            mov     ds:extended_data,1
	   01
 00000156  F9			            stc
 00000157  E9 00000207		            jmp     quit
				        .ENDIF
 0000015C		   *@C0015:

 0000015C  A8 80		        test    al,80h
				        .IF (!zero?)
 0000015E  0F 84 0000009B  *	    je     @C0017
				          ; They're releasing a key
 00000164  24 7F		            and     al,not 80h
				            .IF (ds:extended_data == 1)
 00000166  80 3D 000008D3 R
	   01		   *	    cmp    ds : extended_data, 001h
 0000016D  75 64	   *	    jne    @C0019
 0000016F  BE 000003FC R	                mov     esi,offset extended_keys
				                .WHILE (dword ptr ds:[esi] != 0ffffffffh)
 00000174  EB 49	   *	    jmp    @C001B
 00000176		   *@C001C:
				                    .IF (byte ptr ds:[esi] == al)
 00000176  38 06	   *	    cmp    byte ptr ds : [esi], al
 00000178  75 42	   *	    jne    @C001D
				                      ; We found our match
 0000017A  25 000000FF		                        and     eax,0ffh
 0000017F  B4 E0		                        mov     ah,0e0h
 00000181  C6 05 000008D3 R	                        mov     ds:extended_data,0
	   00
				                        .IF (dword ptr ds:[esi+1] != 0ffffffffh)
 00000188  83 7E 01 FF	   *	    cmp    dword ptr ds : [esi + 001h], 0FFFFFFFFh
 0000018C  74 29	   *	    je     @C001F
				                          ; The press of this key updates the status of an internal flag only, it doesn't cause any action
 0000018E  8B 76 01		                            mov     esi,dword ptr ds:[esi+1]
				                            .IF (esi >= 80000000h)
 00000191  81 FE 80000000  *	    cmp    esi, 080000000h
 00000197  72 15	   *	    jb     @C0021
				                              ; When the high bit is set it indicates this needs to be toggled
 00000199  81 E6 7FFFFFFF	                                and     esi,not 80000000h
				                                .IF (byte ptr ds:[esi] != 0)
 0000019F  80 3E 00	   *	    cmp    byte ptr ds : [esi], 000h
 000001A2  74 05	   *	    je     @C0023
 000001A4  C6 06 00		                                    mov     byte ptr ds:[esi],0
				                                .ELSE
 000001A7  EB 08	   *	    jmp    @C0025
 000001A9		   *@C0023:
 000001A9  C6 06 01		                                    mov     byte ptr ds:[esi],1
				                                .ENDIF
				                            .ELSE
 000001AC  EB 03	   *	    jmp    @C0026
 000001AE		   *@C0021:
 000001AE  C6 06 00		                                mov     byte ptr ds:[esi],0
				                            .ENDIF
 000001B1		   *@C0026:
 000001B1		   *@C0025:
 000001B1  F9			                            stc
 000001B2  E9 000001AC		                            jmp     quit
				                        .ENDIF
				                      ; Right now, eax - key they've pressed.  This one causes action, we have to report it to the active task
 000001B7		   *@C001F:
 000001B7  E9 000001A6		                        jmp     derive_keyboard_status
				                    .ENDIF
 000001BC		   *@C001D:
 000001BC  83 C6 05		                    add     esi,5
				                .ENDW
 000001BF		   *@C001B:
 000001BF  83 3E FF	   *	    cmp    dword ptr ds : [esi], 0FFFFFFFFh
 000001C2  75 B2	   *	    jne    @C001C
				              ; It wasn't a match, ignore it
 000001C4  C6 05 000008D3 R	                mov     ds:extended_data,0
	   00
 000001CB  F9			                stc
 000001CC  E9 00000192		                jmp     quit
				            .ELSE
 000001D1  EB 21	   *	    jmp    @C0028
 000001D3		   *@C0019:
 000001D3  BE 000003CD R	                mov     esi,offset release_keys
				                .WHILE (word ptr ds:[esi] != 0ffffh)
 000001D8  EB 14	   *	    jmp    @C0029
 000001DA		   *@C002A:
				                    .IF (byte ptr ds:[esi] == al)
 000001DA  38 06	   *	    cmp    byte ptr ds : [esi], al
 000001DC  75 0D	   *	    jne    @C002B
 000001DE  0F B7 76 01		                        movzx   esi,word ptr ds:[esi+1]
 000001E2  C6 06 00		                        mov     byte ptr ds:[esi],0
 000001E5  F9			                        stc
 000001E6  E9 00000178		                        jmp     quit
				                    .ENDIF
 000001EB		   *@C002B:
 000001EB  83 C6 05		                    add     esi,5
				                .ENDW
 000001EE		   *@C0029:
 000001EE  66| 83 3E FF	   *	    cmp    word ptr ds : [esi], 0FFFFh
 000001F2  75 E6	   *	    jne    @C002A
				            .ENDIF
				          ; It's some other key, ignore it
 000001F4		   *@C0028:
 000001F4  F9			            stc
 000001F5  E9 00000169		            jmp     quit
				        .ELSE
 000001FA  E9 00000163	   *	    jmp    @C002E
 000001FF		   *@C0017:
				          ; They're pressing a key
				            .IF (ds:extended_data == 1)
 000001FF  80 3D 000008D3 R
	   01		   *	    cmp    ds : extended_data, 001h
 00000206  75 67	   *	    jne    @C002F
 00000208  BE 000003FC R	                mov     esi,offset extended_keys
				                .WHILE (dword ptr ds:[esi] != 0ffffffffh)
 0000020D  EB 49	   *	    jmp    @C0031
 0000020F		   *@C0032:
				                    .IF (byte ptr ds:[esi] == al)
 0000020F  38 06	   *	    cmp    byte ptr ds : [esi], al
 00000211  75 42	   *	    jne    @C0033
				                      ; We found our match
 00000213  25 000000FF		                        and     eax,0ffh
 00000218  B4 E0		                        mov     ah,0e0h
 0000021A  C6 05 000008D3 R	                        mov     ds:extended_data,0
	   00
				                        .IF (dword ptr ds:[esi+1] != 0ffffffffh)
 00000221  83 7E 01 FF	   *	    cmp    dword ptr ds : [esi + 001h], 0FFFFFFFFh
 00000225  74 29	   *	    je     @C0035
				                          ; The press of this key updates the status of an internal flag only, it doesn't cause any action
 00000227  8B 76 01		                            mov     esi,dword ptr ds:[esi+1]
				                            .IF (esi >= 80000000h)
 0000022A  81 FE 80000000  *	    cmp    esi, 080000000h
 00000230  72 15	   *	    jb     @C0037
				                              ; When the high bit is set it indicates this needs to be toggled
 00000232  81 E6 7FFFFFFF	                                and     esi,not 80000000h
				                                .IF (byte ptr ds:[esi] != 0)
 00000238  80 3E 00	   *	    cmp    byte ptr ds : [esi], 000h
 0000023B  74 05	   *	    je     @C0039
 0000023D  C6 06 00		                                    mov     byte ptr ds:[esi],0
				                                .ELSE
 00000240  EB 08	   *	    jmp    @C003B
 00000242		   *@C0039:
 00000242  C6 06 01		                                    mov     byte ptr ds:[esi],1
				                                .ENDIF
				                            .ELSE
 00000245  EB 03	   *	    jmp    @C003C
 00000247		   *@C0037:
 00000247  C6 06 01		                                mov     byte ptr ds:[esi],1
				                            .ENDIF
 0000024A		   *@C003C:
 0000024A		   *@C003B:
 0000024A  F9			                            stc
 0000024B  E9 00000113		                            jmp     quit
				                        .ENDIF
				                      ; Right now, eax - key they've pressed.  This one causes action, we have to report it to the active task
 00000250		   *@C0035:
 00000250  E9 0000010D		                        jmp     derive_keyboard_status
				                    .ENDIF
 00000255		   *@C0033:
 00000255  83 C6 05		                    add     esi,5
				                .ENDW
 00000258		   *@C0031:
 00000258  83 3E FF	   *	    cmp    dword ptr ds : [esi], 0FFFFFFFFh
 0000025B  75 B2	   *	    jne    @C0032
				              ; It wasn't a match, ignore it
 0000025D  C6 05 000008D3 R	                mov     ds:extended_data,0
	   00
 00000264  F9			                stc
 00000265  E9 000000F9		                jmp     quit
				            .ELSE
 0000026A  E9 000000F3	   *	    jmp    @C003E
 0000026F		   *@C002F:
				              ; Normal mode
				              ; See if it needs immediate action (like shift/ctrl/alt)
 0000026F  BE 00000394 R	                mov     esi,offset depress_keys
				                .WHILE (dword ptr ds:[esi] != 0ffffffffh)
 00000274  EB 30	   *	    jmp    @C003F
 00000276		   *@C0040:
				                    .IF (byte ptr ds:[esi] == al)
 00000276  38 06	   *	    cmp    byte ptr ds : [esi], al
 00000278  75 29	   *	    jne    @C0041
				                      ; We've found our match, now act on what it says to do
 0000027A  8B 76 01		                        mov     esi,dword ptr ds:[esi+1]
				                        .IF (esi >= 80000000h)
 0000027D  81 FE 80000000  *	    cmp    esi, 080000000h
 00000283  72 15	   *	    jb     @C0043
				                          ; When the high bit is set it indicates this needs to be toggled
 00000285  81 E6 7FFFFFFF	                            and     esi,not 80000000h
				                            .IF (byte ptr ds:[esi] != 0)
 0000028B  80 3E 00	   *	    cmp    byte ptr ds : [esi], 000h
 0000028E  74 05	   *	    je     @C0045
 00000290  C6 06 00		                                mov     byte ptr ds:[esi],0
				                            .ELSE
 00000293  EB 08	   *	    jmp    @C0047
 00000295		   *@C0045:
 00000295  C6 06 01		                                mov     byte ptr ds:[esi],1
				                            .ENDIF
				                        .ELSE
 00000298  EB 03	   *	    jmp    @C0048
 0000029A		   *@C0043:
 0000029A  C6 06 01		                            mov     byte ptr ds:[esi],1
				                        .ENDIF
 0000029D		   *@C0048:
 0000029D		   *@C0047:
 0000029D  F9			                        stc
 0000029E  E9 000000C0		                        jmp     quit
				                    .ENDIF
 000002A3		   *@C0041:
 000002A3  83 C6 05		                    add     esi,5
				                .ENDW
 000002A6		   *@C003F:
 000002A6  83 3E FF	   *	    cmp    dword ptr ds : [esi], 0FFFFFFFFh
 000002A9  75 CB	   *	    jne    @C0040

 000002AB  25 000000FF		                and     eax,0ffh
				                .IF (eax <= 58h)
 000002B0  83 F8 58	   *	    cmp    eax, 058h
 000002B3  0F 87 000000A8  *	    ja     @C004A
				                    .IF (ds:l_ctrl_status != 0 || ds:r_ctrl_status != 0)
 000002B9  80 3D 0000038B R
	   00		   *	    cmp    ds : l_ctrl_status, 000h
 000002C0  75 09	   *	    jne    @C004D
 000002C2  80 3D 00000388 R
	   00		   *	    cmp    ds : r_ctrl_status, 000h
 000002C9  74 0A	   *	    je     @C004C
 000002CB		   *@C004D:
 000002CB  BE 000007CC R	                        mov     esi,offset ctrl_keys
				                    .ELSEIF ((ds:l_shift_status != 0 || ds:r_shift_status != 0) && ds:caps_status == 0)
 000002D0  E9 00000084	   *	    jmp    @C004F
 000002D5		   *@C004C:
 000002D5  80 3D 0000038C R
	   00		   *	    cmp    ds : l_shift_status, 000h
 000002DC  75 09	   *	    jne    @C0052
 000002DE  80 3D 00000389 R
	   00		   *	    cmp    ds : r_shift_status, 000h
 000002E5  74 10	   *	    je     @C0050
 000002E7		   *@C0052:
 000002E7  80 3D 0000038E R
	   00		   *	    cmp    ds : caps_status, 000h
 000002EE  75 07	   *	    jne    @C0050
				                      ; Shift by itself
 000002F0  BE 000005AC R	                        mov     esi,offset shift_key_set
				                    .ELSEIF ((ds:l_shift_status != 0 || ds:r_shift_status != 0) && ds:caps_status != 0)
 000002F5  EB 62	   *	    jmp    @C0054
 000002F7		   *@C0050:
 000002F7  80 3D 0000038C R
	   00		   *	    cmp    ds : l_shift_status, 000h
 000002FE  75 09	   *	    jne    @C0057
 00000300  80 3D 00000389 R
	   00		   *	    cmp    ds : r_shift_status, 000h
 00000307  74 10	   *	    je     @C0055
 00000309		   *@C0057:
 00000309  80 3D 0000038E R
	   00		   *	    cmp    ds : caps_status, 000h
 00000310  74 07	   *	    je     @C0055
				                      ; CAPS + Shift (reverses capitalization on letters)
 00000312  BE 00000662 R	                        mov     esi,offset caps_shift_key_set
				                    .ELSEIF (ds:l_shift_status == 0 && ds:r_shift_status == 0 && ds:caps_status != 0)
 00000317  EB 40	   *	    jmp    @C0059
 00000319		   *@C0055:
 00000319  80 3D 0000038C R
	   00		   *	    cmp    ds : l_shift_status, 000h
 00000320  75 19	   *	    jne    @C005A
 00000322  80 3D 00000389 R
	   00		   *	    cmp    ds : r_shift_status, 000h
 00000329  75 10	   *	    jne    @C005A
 0000032B  80 3D 0000038E R
	   00		   *	    cmp    ds : caps_status, 000h
 00000332  74 07	   *	    je     @C005A
				                      ; CAPS by itself
 00000334  BE 000004F8 R	                        mov     esi,offset caps_raw_key_set
				                    .ELSEIF (ds:l_alt_status != 0 || ds:r_alt_status != 0)
 00000339  EB 1E	   *	    jmp    @C005E
 0000033B		   *@C005A:
 0000033B  80 3D 0000038D R
	   00		   *	    cmp    ds : l_alt_status, 000h
 00000342  75 09	   *	    jne    @C0060
 00000344  80 3D 0000038A R
	   00		   *	    cmp    ds : r_alt_status, 000h
 0000034B  74 07	   *	    je     @C005F
 0000034D		   *@C0060:
 0000034D  BE 00000718 R	                        mov     esi,offset alt_keys
				                      ;; REMEMBER, need to add an algorithm to allow 3-digit input from the numeric keypad (ASCII code)
				                    .ELSE
 00000352  EB 05	   *	    jmp    @C0062
 00000354		   *@C005F:
 00000354  BE 00000444 R	                        mov     esi,offset raw_key_set
				                    .ENDIF
 00000359		   *@C0062:
 00000359		   *@C005E:
 00000359		   *@C0059:
 00000359		   *@C0054:
 00000359		   *@C004F:
 00000359  D1 E0		                    shl     eax,1
 0000035B  0F B7 04 30		                    movzx   eax,word ptr ds:[esi+eax]
				                .ELSE
 0000035F  EB 01	   *	    jmp    @C0063
 00000361		   *@C004A:
 00000361  F9			                    stc
				                .ENDIF
				              ; Right now, eax - key they've pressed
				            .ENDIF
 00000362		   *@C0063:
				        .ENDIF
 00000362		   *@C003E:
 00000362		   *@C002E:

 00000362			      derive_keyboard_status:
				      ; Right now, eax - key they've pressed
				      ; Now, build the ebx value (keyboard flags, indicates status of CTRL/ALT/SHIFT, etc.)
				      ; * Refer to KBD\KBD.INF for information about the format of this status dword
 00000362  F8			        clc

 00000363			      quit:
				      ; Right now, the carry? flag indicates whether or not action is required
				      ;   SET-No
				      ; CLEAR-Yes
 00000363  C3			        ret
 00000364			    invKBD_interpret_keystroke      ENDP




 00000364			    iKBD_activate_DEBI_intercept    PROC
				    ; This routine is called only from DEBI.  It indicates that any KBD information should be
				    ; sent to the DEBI algorithm
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    Input is diverted
				    ;
 00000364  1E			        push    ds
 00000365  66| 2E: 8E 1D	        mov     ds,cs:data_segment
	   000008D0 R
 0000036D  C6 05 000008D2 R	        mov     ds:debi_intercept,1
	   01
 00000374  1F			        pop     ds
 00000375  CB			        retf
 00000376			    iKBD_activate_DEBI_intercept    ENDP




 00000376			    iKBD_deactivate_DEBI_intercept      PROC
				    ; This routine is called only from DEBI.  It indicates that any KBD information should now be
				    ; handled in the normal manner (it should not be sent to the DEBI algorithm)
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    Input is diverted
				    ;
 00000376  1E			        push    ds
 00000377  66| 2E: 8E 1D	        mov     ds,cs:data_segment
	   000008D0 R
 0000037F  C6 05 000008D2 R	        mov     ds:debi_intercept,1
	   01
 00000386  1F			        pop     ds
 00000387  CB			        retf
 00000388			    iKBD_deactivate_DEBI_intercept      ENDP









				; Key definitions and constants
				    INCLUDE kbd.asp
			      C ; keyboard.asp
			      C ;
			      C ; Exodus 104-keyboard driver
			      C ;
			      C 
 00000388 00		      C     r_ctrl_status       db  0
 00000389 00		      C     r_shift_status      db  0
 0000038A 00		      C     r_alt_status        db  0
 0000038B 00		      C     l_ctrl_status       db  0
 0000038C 00		      C     l_shift_status      db  0
 0000038D 00		      C     l_alt_status        db  0
 0000038E 00		      C     caps_status         db  0
 0000038F 00		      C     num_status          db  0
 00000390 00		      C     scroll_status       db  0
 00000391 00		      C     l_win_status        db  0
 00000392 00		      C     r_win_status        db  0
 00000393 00		      C     win_menu_status     db  0
			      C 
			      C ; These keys change some internal flags when they're depressed
 00000394		      C   depress_keys:
 00000394  36		      C                         db  036h
 00000395  00000389 R	      C                         dd  offset r_shift_status
 00000399  5C		      C                         db  05ch
 0000039A  0000038A R	      C                         dd  offset r_alt_status
 0000039E  1D		      C                         db  01dh
 0000039F  0000038B R	      C                         dd  offset l_ctrl_status
 000003A3  2A		      C                         db  02ah
 000003A4  0000038C R	      C                         dd  offset l_shift_status
 000003A8  38		      C                         db  038h
 000003A9  0000038D R	      C                         dd  offset l_alt_status
 000003AD  54		      C                         db  054h
 000003AE  00000391 R	      C                         dd  offset l_win_status
 000003B2  55		      C                         db  055h
 000003B3  00000392 R	      C                         dd  offset r_win_status
 000003B7  56		      C                         db  056h
 000003B8  00000393 R	      C                         dd  offset win_menu_status
 000003BC  3A		      C                         db  03ah
 000003BD  8000038E R	      C                         dd  offset caps_status + 80000000h
 000003C1  45		      C                         db  045h
 000003C2  8000038F R	      C                         dd  offset num_status + 80000000h
 000003C6  46		      C                         db  046h
 000003C7  80000390 R	      C                         dd  offset scroll_status + 80000000h
 000003CB  FFFF		      C                         dw  0ffffffffh
			      C 
			      C ; These keys change some internal flags when they're released
 000003CD		      C   release_keys:
 000003CD  5A		      C                         db  05ah
 000003CE  00000388 R	      C                         dd  offset r_ctrl_status
 000003D2  36		      C                         db  036h
 000003D3  00000389 R	      C                         dd  offset r_shift_status
 000003D7  5C		      C                         db  05ch
 000003D8  0000038A R	      C                         dd  offset r_alt_status
 000003DC  1D		      C                         db  01dh
 000003DD  0000038B R	      C                         dd  offset l_ctrl_status
 000003E1  2A		      C                         db  02ah
 000003E2  0000038C R	      C                         dd  offset l_shift_status
 000003E6  38		      C                         db  038h
 000003E7  0000038D R	      C                         dd  offset l_alt_status
 000003EB  54		      C                         db  054h
 000003EC  00000391 R	      C                         dd  offset l_win_status
 000003F0  55		      C                         db  055h
 000003F1  00000392 R	      C                         dd  offset r_win_status
 000003F5  56		      C                         db  056h
 000003F6  00000393 R	      C                         dd  offset win_menu_status
 000003FA  FFFF		      C                         dw  0ffffffffh
			      C 
			      C ; These keys are part of extended two-byte keystroke codes
 000003FC 1C		      C     extended_keys       db  01ch                    ; enter
 000003FD  FFFFFFFF	      C                         dd  0ffffffffh
 00000401  1D		      C                         db  01dh                    ; right_ctrl
 00000402  00000388 R	      C                         dd  offset r_ctrl_status
 00000406  35		      C                         db  035h                    ; gray_slash
 00000407  FFFFFFFF	      C                         dd  0ffffffffh
 0000040B  38		      C                         db  038h                    ; right_alt
 0000040C  0000038A R	      C                         dd  offset r_alt_status
 00000410  47		      C                         db  047h                    ; home
 00000411  FFFFFFFF	      C                         dd  0ffffffffh
 00000415  48		      C                         db  048h                    ; up
 00000416  FFFFFFFF	      C                         dd  0ffffffffh
 0000041A  49		      C                         db  049h                    ; pgup
 0000041B  FFFFFFFF	      C                         dd  0ffffffffh
 0000041F  4B		      C                         db  04bh                    ; left
 00000420  FFFFFFFF	      C                         dd  0ffffffffh
 00000424  4D		      C                         db  04dh                    ; right
 00000425  FFFFFFFF	      C                         dd  0ffffffffh
 00000429  4F		      C                         db  04fh                    ; end
 0000042A  FFFFFFFF	      C                         dd  0ffffffffh
 0000042E  50		      C                         db  050h                    ; down
 0000042F  FFFFFFFF	      C                         dd  0ffffffffh
 00000433  51		      C                         db  051h                    ; pgdn
 00000434  FFFFFFFF	      C                         dd  0ffffffffh
 00000438  52		      C                         db  052h                    ; ins
 00000439  FFFFFFFF	      C                         dd  0ffffffffh
 0000043D  53		      C                         db  053h                    ; del
 0000043E  FFFFFFFF	      C                         dd  0ffffffffh
 00000442  FFFF		      C                         dw  0ffffh
			      C 
			      C                         ; ASCII in SCAN order
 00000444 0000		      C     raw_key_set         dw  00000h      ; 00, null
 00000446  001B		      C                         dw  0001Bh      ; 01, Escape
 00000448  0031		      C                         dw  00031h      ; 02, 1
 0000044A  0032		      C                         dw  00032h      ; 03, 2
 0000044C  0033		      C                         dw  00033h      ; 04, 3
 0000044E  0034		      C                         dw  00034h      ; 05, 4
 00000450  0035		      C                         dw  00035h      ; 06, 5
 00000452  0036		      C                         dw  00036h      ; 07, 6
 00000454  0037		      C                         dw  00037h      ; 08, 7
 00000456  0038		      C                         dw  00038h      ; 09, 8
 00000458  0039		      C                         dw  00039h      ; 0a, 9
 0000045A  0030		      C                         dw  00030h      ; 0b, 0
 0000045C  002D		      C                         dw  0002dh      ; 0c, -
 0000045E  003D		      C                         dw  0003dh      ; 0d, =
 00000460  0E08		      C                         dw  00e08h      ; 0e, bksp
 00000462  0F09		      C                         dw  00f09h      ; 0f, tab
 00000464  0071		      C                         dw  00071h      ; 10, q
 00000466  0077		      C                         dw  00077h      ; 11, w
 00000468  0065		      C                         dw  00065h      ; 12, e
 0000046A  0072		      C                         dw  00072h      ; 13, r
 0000046C  0074		      C                         dw  00074h      ; 14, t
 0000046E  0079		      C                         dw  00079h      ; 15, y
 00000470  0075		      C                         dw  00075h      ; 16, u
 00000472  0069		      C                         dw  00069h      ; 17, i
 00000474  006F		      C                         dw  0006Fh      ; 18, o
 00000476  0070		      C                         dw  00070h      ; 19, p
 00000478  005B		      C                         dw  0005bh      ; 1a, [
 0000047A  005D		      C                         dw  0005dh      ; 1b, ]
 0000047C  1C0D		      C                         dw  01c0dh      ; 1c, enter
 0000047E  F000		      C                         dw  0f000h      ; 1d, ctrl
 00000480  0061		      C                         dw  00061h      ; 1e, a
 00000482  0073		      C                         dw  00073h      ; 1f, s
 00000484  0064		      C                         dw  00064h      ; 20, d
 00000486  0066		      C                         dw  00066h      ; 21, f
 00000488  0067		      C                         dw  00067h      ; 22, g
 0000048A  0068		      C                         dw  00068h      ; 23, h
 0000048C  006A		      C                         dw  0006ah      ; 24, j
 0000048E  006B		      C                         dw  0006bh      ; 25, k
 00000490  006C		      C                         dw  0006ch      ; 26, l
 00000492  003B		      C                         dw  0003bh      ; 27, ;
 00000494  0027		      C                         dw  00027h      ; 28, '
 00000496  0060		      C                         dw  00060h      ; 29, `
 00000498  F000		      C                         dw  0f000h      ; 2a, l_shift
 0000049A  005C		      C                         dw  0005ch      ; 2b, \
 0000049C  007A		      C                         dw  0007ah      ; 2c, z
 0000049E  0078		      C                         dw  00078h      ; 2d, x
 000004A0  0063		      C                         dw  00063h      ; 2e, c
 000004A2  0076		      C                         dw  00076h      ; 2f, v
 000004A4  0062		      C                         dw  00062h      ; 30, b
 000004A6  006E		      C                         dw  0006eh      ; 31, n
 000004A8  006D		      C                         dw  0006dh      ; 32, m
 000004AA  002C		      C                         dw  0002ch      ; 33, ,
 000004AC  002E		      C                         dw  0002eh      ; 34, .
 000004AE  002F		      C                         dw  0002fh      ; 35, /
 000004B0  F000		      C                         dw  0f000h      ; 36, r_shift
 000004B2  002A		      C                         dw  0002ah      ; 37, prtsc
 000004B4  F000		      C                         dw  0f000h      ; 38, alt
 000004B6  0020		      C                         dw  00020h      ; 39, spc
 000004B8  F000		      C                         dw  0f000h      ; 3a, caps
 000004BA  3B00		      C                         dw  03b00h      ; 3b, f1
 000004BC  3C00		      C                         dw  03c00h      ; 3c, f2
 000004BE  3D00		      C                         dw  03d00h      ; 3d, f3
 000004C0  3E00		      C                         dw  03e00h      ; 3e, f4
 000004C2  3F00		      C                         dw  03f00h      ; 3f, f5
 000004C4  4000		      C                         dw  04000h      ; 40, f6
 000004C6  4100		      C                         dw  04100h      ; 41, f7
 000004C8  4200		      C                         dw  04200h      ; 42, f8
 000004CA  4300		      C                         dw  04300h      ; 43, f9
 000004CC  4400		      C                         dw  04400h      ; 44, f10
 000004CE  F000		      C                         dw  0f000h      ; 45, numlck
 000004D0  F000		      C                         dw  0f000h      ; 46, scrlock
 000004D2  4700		      C                         dw  04700h      ; 47, home
 000004D4  4800		      C                         dw  04800h      ; 48, up
 000004D6  4900		      C                         dw  04900h      ; 49, pgup
 000004D8  4A2D		      C                         dw  04a2dh      ; 4a, gray-
 000004DA  4B00		      C                         dw  04b00h      ; 4b, left
 000004DC  4C00		      C                         dw  04c00h      ; 4c, center
 000004DE  4D00		      C                         dw  04d00h      ; 4d, right
 000004E0  4E2B		      C                         dw  04e2bh      ; 4e, gray+
 000004E2  4F00		      C                         dw  04f00h      ; 4f, end
 000004E4  5000		      C                         dw  05000h      ; 50, down
 000004E6  5100		      C                         dw  05100h      ; 51, pgdn
 000004E8  5200		      C                         dw  05200h      ; 52, ins
 000004EA  5300		      C                         dw  05300h      ; 53, del
 000004EC  F000		      C                         dw  0f000h      ; 54, nothing
 000004EE  F000		      C                         dw  0f000h      ; 55, nothing
 000004F0  F000		      C                         dw  0f000h      ; 56, nothing
 000004F2  8500		      C                         dw  08500h      ; 57, f11
 000004F4  8600		      C                         dw  08600h      ; 58, f12
 000004F6  FFFF		      C                         dw  0ffffh
			      C 
			      C                         ; ASCII in SCAN order
 000004F8 0000		      C     caps_raw_key_set    dw  00000h      ; 00, null
 000004FA  001B		      C                         dw  0001Bh      ; 01, Escape
 000004FC  0031		      C                         dw  00031h      ; 02, 1
 000004FE  0032		      C                         dw  00032h      ; 03, 2
 00000500  0033		      C                         dw  00033h      ; 04, 3
 00000502  0034		      C                         dw  00034h      ; 05, 4
 00000504  0035		      C                         dw  00035h      ; 06, 5
 00000506  0036		      C                         dw  00036h      ; 07, 6
 00000508  0037		      C                         dw  00037h      ; 08, 7
 0000050A  0038		      C                         dw  00038h      ; 09, 8
 0000050C  0039		      C                         dw  00039h      ; 0a, 9
 0000050E  0030		      C                         dw  00030h      ; 0b, 0
 00000510  002D		      C                         dw  0002dh      ; 0c, -
 00000512  003D		      C                         dw  0003dh      ; 0d, =
 00000514  0E08		      C                         dw  00e08h      ; 0e, bksp
 00000516  0F09		      C                         dw  00f09h      ; 0f, tab
 00000518  0051		      C                         dw  00051h      ; 10, Q
 0000051A  0057		      C                         dw  00057h      ; 11, W
 0000051C  0045		      C                         dw  00045h      ; 12, E
 0000051E  0052		      C                         dw  00052h      ; 13, R
 00000520  0054		      C                         dw  00054h      ; 14, T
 00000522  0059		      C                         dw  00059h      ; 15, Y
 00000524  0055		      C                         dw  00055h      ; 16, U
 00000526  0049		      C                         dw  00049h      ; 17, I
 00000528  004F		      C                         dw  0004Fh      ; 18, O
 0000052A  0050		      C                         dw  00050h      ; 19, P
 0000052C  005B		      C                         dw  0005bh      ; 1a, [
 0000052E  005D		      C                         dw  0005dh      ; 1b, ]
 00000530  1C0D		      C                         dw  01c0dh      ; 1c, enter
 00000532  F000		      C                         dw  0f000h      ; 1d, ctrl
 00000534  0041		      C                         dw  00041h      ; 1e, A
 00000536  0053		      C                         dw  00053h      ; 1f, S
 00000538  0044		      C                         dw  00044h      ; 20, D
 0000053A  0046		      C                         dw  00046h      ; 21, F
 0000053C  0047		      C                         dw  00047h      ; 22, G
 0000053E  0048		      C                         dw  00048h      ; 23, H
 00000540  004A		      C                         dw  0004ah      ; 24, J
 00000542  004B		      C                         dw  0004bh      ; 25, K
 00000544  004C		      C                         dw  0004ch      ; 26, L
 00000546  003B		      C                         dw  0003bh      ; 27, ;
 00000548  0027		      C                         dw  00027h      ; 28, '
 0000054A  0060		      C                         dw  00060h      ; 29, `
 0000054C  F000		      C                         dw  0f000h      ; 2a, l_shift
 0000054E  005C		      C                         dw  0005ch      ; 2b, \
 00000550  005A		      C                         dw  0005ah      ; 2c, Z
 00000552  0058		      C                         dw  00058h      ; 2d, X
 00000554  0043		      C                         dw  00043h      ; 2e, C
 00000556  0056		      C                         dw  00056h      ; 2f, V
 00000558  0042		      C                         dw  00042h      ; 30, B
 0000055A  004E		      C                         dw  0004eh      ; 31, N
 0000055C  004D		      C                         dw  0004dh      ; 32, M
 0000055E  002C		      C                         dw  0002ch      ; 33, ,
 00000560  002E		      C                         dw  0002eh      ; 34, .
 00000562  002F		      C                         dw  0002fh      ; 35, /
 00000564  F000		      C                         dw  0f000h      ; 36, r_shift
 00000566  002A		      C                         dw  0002ah      ; 37, prtsc
 00000568  F000		      C                         dw  0f000h      ; 38, alt
 0000056A  0020		      C                         dw  00020h      ; 39, spc
 0000056C  F000		      C                         dw  0f000h      ; 3a, caps
 0000056E  3B00		      C                         dw  03b00h      ; 3b, f1
 00000570  3C00		      C                         dw  03c00h      ; 3c, f2
 00000572  3D00		      C                         dw  03d00h      ; 3d, f3
 00000574  3E00		      C                         dw  03e00h      ; 3e, f4
 00000576  3F00		      C                         dw  03f00h      ; 3f, f5
 00000578  4000		      C                         dw  04000h      ; 40, f6
 0000057A  4100		      C                         dw  04100h      ; 41, f7
 0000057C  4200		      C                         dw  04200h      ; 42, f8
 0000057E  4300		      C                         dw  04300h      ; 43, f9
 00000580  4400		      C                         dw  04400h      ; 44, f10
 00000582  F000		      C                         dw  0f000h      ; 45, numlck
 00000584  F000		      C                         dw  0f000h      ; 46, scrlock
 00000586  4700		      C                         dw  04700h      ; 47, home
 00000588  4800		      C                         dw  04800h      ; 48, up
 0000058A  4900		      C                         dw  04900h      ; 49, pgup
 0000058C  4A2D		      C                         dw  04a2dh      ; 4a, gray-
 0000058E  4B00		      C                         dw  04b00h      ; 4b, left
 00000590  4C00		      C                         dw  04c00h      ; 4c, center
 00000592  4D00		      C                         dw  04d00h      ; 4d, right
 00000594  4E2B		      C                         dw  04e2bh      ; 4e, gray+
 00000596  4F00		      C                         dw  04f00h      ; 4f, end
 00000598  5000		      C                         dw  05000h      ; 50, down
 0000059A  5100		      C                         dw  05100h      ; 51, pgdn
 0000059C  5200		      C                         dw  05200h      ; 52, ins
 0000059E  5300		      C                         dw  05300h      ; 53, del
 000005A0  0000		      C                         dw  00000h      ; 54, nothing
 000005A2  0000		      C                         dw  00000h      ; 55, nothing
 000005A4  0000		      C                         dw  00000h      ; 56, nothing
 000005A6  8500		      C                         dw  08500h      ; 57, f11
 000005A8  8600		      C                         dw  08600h      ; 58, f12
 000005AA  FFFF		      C                         dw  0ffffh
			      C 
			      C                         ; SHIFT+Keystroke SCAN/ASCII Conversion
 000005AC 0000		      C     shift_key_set       dw  00000h      ; 00, null
 000005AE  001B		      C                         dw  0001Bh      ; 01, esc
 000005B0  0021		      C                         dw  00021h      ; 02, !
 000005B2  0040		      C                         dw  00040h      ; 03, @
 000005B4  0023		      C                         dw  00023h      ; 04, #
 000005B6  0024		      C                         dw  00024h      ; 05, $
 000005B8  0025		      C                         dw  00025h      ; 06, %
 000005BA  005E		      C                         dw  0005eh      ; 07, ^
 000005BC  0026		      C                         dw  00026h      ; 08, &
 000005BE  002A		      C                         dw  0002ah      ; 09, *
 000005C0  0028		      C                         dw  00028h      ; 0a, (
 000005C2  0029		      C                         dw  00029h      ; 0b, )
 000005C4  005F		      C                         dw  0005fh      ; 0c, _
 000005C6  002B		      C                         dw  0002bh      ; 0d, +
 000005C8  0E08		      C                         dw  00e08h      ; 0e, bksp
 000005CA  0F09		      C                         dw  00f09h      ; 0f, baktab
 000005CC  0051		      C                         dw  00051h      ; 10, Q
 000005CE  0057		      C                         dw  00057h      ; 11, W
 000005D0  0045		      C                         dw  00045h      ; 12, E
 000005D2  0052		      C                         dw  00052h      ; 13, R
 000005D4  0054		      C                         dw  00054h      ; 14, T
 000005D6  0059		      C                         dw  00059h      ; 15, Y
 000005D8  0055		      C                         dw  00055h      ; 16, U
 000005DA  0049		      C                         dw  00049h      ; 17, I
 000005DC  004F		      C                         dw  0004Fh      ; 18, O
 000005DE  0050		      C                         dw  00050h      ; 19, P
 000005E0  007B		      C                         dw  0007bh      ; 1a, {
 000005E2  007D		      C                         dw  0007dh      ; 1b, }
 000005E4  1C0D		      C                         dw  01c0dh      ; 1c, enter
 000005E6  01F0		      C                         dw  001f0h      ; 1d, ctrl
 000005E8  0041		      C                         dw  00041h      ; 1e, A
 000005EA  0053		      C                         dw  00053h      ; 1f, S
 000005EC  0044		      C                         dw  00044h      ; 20, D
 000005EE  0046		      C                         dw  00046h      ; 21, F
 000005F0  0047		      C                         dw  00047h      ; 22, G
 000005F2  0048		      C                         dw  00048h      ; 23, H
 000005F4  004A		      C                         dw  0004ah      ; 24, J
 000005F6  004B		      C                         dw  0004bh      ; 25, K
 000005F8  004C		      C                         dw  0004ch      ; 26, L
 000005FA  003A		      C                         dw  0003ah      ; 27, :
 000005FC  0022		      C                         dw  00022h      ; 28, "
 000005FE  007E		      C                         dw  0007eh      ; 29, ~
 00000600  03F0		      C                         dw  003f0h      ; 2a, l_shift
 00000602  007C		      C                         dw  0007ch      ; 2b, |
 00000604  005A		      C                         dw  0005ah      ; 2c, Z
 00000606  0058		      C                         dw  00058h      ; 2d, X
 00000608  0043		      C                         dw  00043h      ; 2e, C
 0000060A  0056		      C                         dw  00056h      ; 2f, V
 0000060C  0042		      C                         dw  00042h      ; 30, B
 0000060E  004E		      C                         dw  0004eh      ; 31, N
 00000610  004D		      C                         dw  0004dh      ; 32, M
 00000612  003C		      C                         dw  0003ch      ; 33, <
 00000614  003E		      C                         dw  0003eh      ; 34, >
 00000616  003F		      C                         dw  0003fh      ; 35, ?
 00000618  04F0		      C                         dw  004f0h      ; 36, r_shift
 0000061A  002A		      C                         dw  0002ah      ; 37, prtsc
 0000061C  05F0		      C                         dw  005f0h      ; 38, alt
 0000061E  0020		      C                         dw  00020h      ; 39, spc
 00000620  07F0		      C                         dw  007f0h      ; 3a, caps
 00000622  5400		      C                         dw  05400h      ; 3b, f1
 00000624  5500		      C                         dw  05500h      ; 3c, f2
 00000626  5600		      C                         dw  05600h      ; 3d, f3
 00000628  5700		      C                         dw  05700h      ; 3e, f4
 0000062A  5800		      C                         dw  05800h      ; 3f, f5
 0000062C  5900		      C                         dw  05900h      ; 40, f6
 0000062E  5A00		      C                         dw  05a00h      ; 41, f7
 00000630  5B00		      C                         dw  05b00h      ; 42, f8
 00000632  5C00		      C                         dw  05c00h      ; 43, f9
 00000634  5D00		      C                         dw  05d00h      ; 44, f10
 00000636  08F0		      C                         dw  008f0h      ; 45, numlck
 00000638  09F0		      C                         dw  009f0h      ; 46, scrlock
 0000063A  0037		      C                         dw  00037h      ; 47, 7
 0000063C  0038		      C                         dw  00038h      ; 48, 8
 0000063E  0039		      C                         dw  00039h      ; 49, 9
 00000640  002D		      C                         dw  0002dh      ; 4a, -
 00000642  0034		      C                         dw  00034h      ; 4b, 4
 00000644  0035		      C                         dw  00035h      ; 4c, 5
 00000646  0036		      C                         dw  00036h      ; 4d, 6
 00000648  002B		      C                         dw  0002bh      ; 4e, +
 0000064A  0031		      C                         dw  00031h      ; 4f, 1
 0000064C  0032		      C                         dw  00032h      ; 50, 2
 0000064E  0033		      C                         dw  00033h      ; 51, 3
 00000650  0030		      C                         dw  00030h      ; 52, 0
 00000652  002E		      C                         dw  0002eh      ; 53, .
 00000654  0000		      C                         dw  00000h      ; 54, nothing
 00000656  0000		      C                         dw  00000h      ; 55, nothing
 00000658  0000		      C                         dw  00000h      ; 56, nothing
 0000065A  8700		      C                         dw  08700h      ; 57, f11
 0000065C  8800		      C                         dw  08800h      ; 58, f12
 0000065E  0000FFFF	      C                         dd  0ffffh
			      C 
			      C                         ; SHIFT+Keystroke SCAN/ASCII Conversion
 00000662 0000		      C     caps_shift_key_set  dw  00000h      ; 00, null
 00000664  001B		      C                         dw  0001Bh      ; 01, esc
 00000666  0021		      C                         dw  00021h      ; 02, !
 00000668  0040		      C                         dw  00040h      ; 03, @
 0000066A  0023		      C                         dw  00023h      ; 04, #
 0000066C  0024		      C                         dw  00024h      ; 05, $
 0000066E  0025		      C                         dw  00025h      ; 06, %
 00000670  005E		      C                         dw  0005eh      ; 07, ^
 00000672  0026		      C                         dw  00026h      ; 08, &
 00000674  002A		      C                         dw  0002ah      ; 09, *
 00000676  0028		      C                         dw  00028h      ; 0a, (
 00000678  0029		      C                         dw  00029h      ; 0b, )
 0000067A  005F		      C                         dw  0005fh      ; 0c, _
 0000067C  002B		      C                         dw  0002bh      ; 0d, +
 0000067E  0E08		      C                         dw  00e08h      ; 0e, bksp
 00000680  0F09		      C                         dw  00f09h      ; 0f, baktab
 00000682  0071		      C                         dw  00071h      ; 10, q
 00000684  0077		      C                         dw  00077h      ; 11, w
 00000686  0065		      C                         dw  00065h      ; 12, e
 00000688  0072		      C                         dw  00072h      ; 13, r
 0000068A  0074		      C                         dw  00074h      ; 14, t
 0000068C  0079		      C                         dw  00079h      ; 15, y
 0000068E  0075		      C                         dw  00075h      ; 16, u
 00000690  0069		      C                         dw  00069h      ; 17, i
 00000692  006F		      C                         dw  0006Fh      ; 18, o
 00000694  0070		      C                         dw  00070h      ; 19, p
 00000696  007B		      C                         dw  0007bh      ; 1a, {
 00000698  007D		      C                         dw  0007dh      ; 1b, }
 0000069A  1C0D		      C                         dw  01c0dh      ; 1c, enter
 0000069C  01F0		      C                         dw  001f0h      ; 1d, ctrl
 0000069E  0061		      C                         dw  00061h      ; 1e, a
 000006A0  0073		      C                         dw  00073h      ; 1f, s
 000006A2  0064		      C                         dw  00064h      ; 20, d
 000006A4  0066		      C                         dw  00066h      ; 21, f
 000006A6  0067		      C                         dw  00067h      ; 22, g
 000006A8  0068		      C                         dw  00068h      ; 23, h
 000006AA  006A		      C                         dw  0006ah      ; 24, j
 000006AC  006B		      C                         dw  0006bh      ; 25, k
 000006AE  006C		      C                         dw  0006ch      ; 26, l
 000006B0  003A		      C                         dw  0003ah      ; 27, :
 000006B2  0022		      C                         dw  00022h      ; 28, "
 000006B4  007E		      C                         dw  0007eh      ; 29, ~
 000006B6  03F0		      C                         dw  003f0h      ; 2a, l_shift
 000006B8  007C		      C                         dw  0007ch      ; 2b, |
 000006BA  007A		      C                         dw  0007ah      ; 2c, z
 000006BC  0078		      C                         dw  00078h      ; 2d, x
 000006BE  0063		      C                         dw  00063h      ; 2e, c
 000006C0  0076		      C                         dw  00076h      ; 2f, v
 000006C2  0062		      C                         dw  00062h      ; 30, b
 000006C4  006E		      C                         dw  0006eh      ; 31, n
 000006C6  006D		      C                         dw  0006dh      ; 32, m
 000006C8  003C		      C                         dw  0003ch      ; 33, <
 000006CA  003E		      C                         dw  0003eh      ; 34, >
 000006CC  003F		      C                         dw  0003fh      ; 35, ?
 000006CE  04F0		      C                         dw  004f0h      ; 36, r_shift
 000006D0  002A		      C                         dw  0002ah      ; 37, prtsc
 000006D2  05F0		      C                         dw  005f0h      ; 38, alt
 000006D4  0020		      C                         dw  00020h      ; 39, spc
 000006D6  07F0		      C                         dw  007f0h      ; 3a, caps
 000006D8  5400		      C                         dw  05400h      ; 3b, f1
 000006DA  5500		      C                         dw  05500h      ; 3c, f2
 000006DC  5600		      C                         dw  05600h      ; 3d, f3
 000006DE  5700		      C                         dw  05700h      ; 3e, f4
 000006E0  5800		      C                         dw  05800h      ; 3f, f5
 000006E2  5900		      C                         dw  05900h      ; 40, f6
 000006E4  5A00		      C                         dw  05a00h      ; 41, f7
 000006E6  5B00		      C                         dw  05b00h      ; 42, f8
 000006E8  5C00		      C                         dw  05c00h      ; 43, f9
 000006EA  5D00		      C                         dw  05d00h      ; 44, f10
 000006EC  08F0		      C                         dw  008f0h      ; 45, numlck
 000006EE  09F0		      C                         dw  009f0h      ; 46, scrlock
 000006F0  0037		      C                         dw  00037h      ; 47, 7
 000006F2  0038		      C                         dw  00038h      ; 48, 8
 000006F4  0039		      C                         dw  00039h      ; 49, 9
 000006F6  002D		      C                         dw  0002dh      ; 4a, -
 000006F8  0034		      C                         dw  00034h      ; 4b, 4
 000006FA  0035		      C                         dw  00035h      ; 4c, 5
 000006FC  0036		      C                         dw  00036h      ; 4d, 6
 000006FE  002B		      C                         dw  0002bh      ; 4e, +
 00000700  0031		      C                         dw  00031h      ; 4f, 1
 00000702  0032		      C                         dw  00032h      ; 50, 2
 00000704  0033		      C                         dw  00033h      ; 51, 3
 00000706  0030		      C                         dw  00030h      ; 52, 0
 00000708  002E		      C                         dw  0002eh      ; 53, .
 0000070A  0000		      C                         dw  00000h      ; 54, nothing
 0000070C  0000		      C                         dw  00000h      ; 55, nothing
 0000070E  0000		      C                         dw  00000h      ; 56, nothing
 00000710  8700		      C                         dw  08700h      ; 57, f11
 00000712  8800		      C                         dw  08800h      ; 58, f12
 00000714  0000FFFF	      C                         dd  0ffffh
			      C 
			      C                         ; ALT+Keystroke SCAN/ASCII Conversion
 00000718 0100		      C     alt_keys            dw  00100h      ; 00, null
 0000071A  7800		      C                         dw  07800h      ; 01, esc
 0000071C  7900		      C                         dw  07900h      ; 02, !
 0000071E  7A00		      C                         dw  07a00h      ; 03, @
 00000720  7B00		      C                         dw  07b00h      ; 04, #
 00000722  7C00		      C                         dw  07c00h      ; 05, $
 00000724  7D00		      C                         dw  07d00h      ; 06, %
 00000726  7E00		      C                         dw  07e00h      ; 07, ^
 00000728  7F00		      C                         dw  07f00h      ; 08, &
 0000072A  8000		      C                         dw  08000h      ; 09, *
 0000072C  8100		      C                         dw  08100h      ; 0a, (
 0000072E  8200		      C                         dw  08200h      ; 0b, )
 00000730  8300		      C                         dw  08300h      ; 0c, _
 00000732  0E00		      C                         dw  00e00h      ; 0d, +
 00000734  0E00		      C                         dw  00e00h      ; 0e, bksp
 00000736  A500		      C                         dw  0a500h      ; 0f, baktab
 00000738  1100		      C                         dw  01100h      ; 10, q
 0000073A  1200		      C                         dw  01200h      ; 11, w
 0000073C  1300		      C                         dw  01300h      ; 12, e
 0000073E  1400		      C                         dw  01400h      ; 13, r
 00000740  1500		      C                         dw  01500h      ; 14, t
 00000742  1600		      C                         dw  01600h      ; 15, y
 00000744  1700		      C                         dw  01700h      ; 16, u
 00000746  1800		      C                         dw  01800h      ; 17, i
 00000748  1900		      C                         dw  01900h      ; 18, o
 0000074A  1A00		      C                         dw  01a00h      ; 19, p
 0000074C  1B00		      C                         dw  01b00h      ; 1a, {
 0000074E  1C00		      C                         dw  01c00h      ; 1b, }
 00000750  1C00		      C                         dw  01c00h      ; 1c, enter
 00000752  F000		      C                         dw  0f000h      ; 1d, ctrl
 00000754  1E00		      C                         dw  01e00h      ; 1e, a
 00000756  1F00		      C                         dw  01f00h      ; 1f, s
 00000758  2000		      C                         dw  02000h      ; 20, d
 0000075A  2100		      C                         dw  02100h      ; 21, f
 0000075C  2200		      C                         dw  02200h      ; 22, g
 0000075E  2300		      C                         dw  02300h      ; 23, h
 00000760  2400		      C                         dw  02400h      ; 24, j
 00000762  2500		      C                         dw  02500h      ; 25, k
 00000764  2600		      C                         dw  02600h      ; 26, l
 00000766  2700		      C                         dw  02700h      ; 27, :
 00000768  2800		      C                         dw  02800h      ; 28, "
 0000076A  2900		      C                         dw  02900h      ; 29, ~
 0000076C  F000		      C                         dw  0f000h      ; 2a, l_shift
 0000076E  0000		      C                         dw  00000h      ; 2b, |
 00000770  2C00		      C                         dw  02c00h      ; 2c, z
 00000772  2D00		      C                         dw  02d00h      ; 2d, x
 00000774  2E00		      C                         dw  02e00h      ; 2e, c
 00000776  2F00		      C                         dw  02f00h      ; 2f, v
 00000778  3000		      C                         dw  03000h      ; 30, b
 0000077A  3100		      C                         dw  03100h      ; 31, n
 0000077C  3200		      C                         dw  03200h      ; 32, m
 0000077E  3300		      C                         dw  03300h      ; 33, <
 00000780  3400		      C                         dw  03400h      ; 34, >
 00000782  3400		      C                         dw  03400h      ; 35, ?
 00000784  F000		      C                         dw  0f000h      ; 36, r_shift
 00000786  0000		      C                         dw  00000h      ; 37, prtsc
 00000788  F000		      C                         dw  0f000h      ; 38, alt
 0000078A  2000		      C                         dw  02000h      ; 39, spc
 0000078C  F000		      C                         dw  0f000h      ; 3a, caps
 0000078E  6800		      C                         dw  06800h      ; 3b, f1
 00000790  6900		      C                         dw  06900h      ; 3c, f2
 00000792  6A00		      C                         dw  06a00h      ; 3d, f3
 00000794  6B00		      C                         dw  06b00h      ; 3e, f4
 00000796  6C00		      C                         dw  06c00h      ; 3f, f5
 00000798  6D00		      C                         dw  06d00h      ; 40, f6
 0000079A  6E00		      C                         dw  06e00h      ; 41, f7
 0000079C  6F00		      C                         dw  06f00h      ; 42, f8
 0000079E  7000		      C                         dw  07000h      ; 43, f9
 000007A0  7100		      C                         dw  07100h      ; 44, f10
 000007A2  F000		      C                         dw  0f000h      ; 45, numlck
 000007A4  F000		      C                         dw  0f000h      ; 46, scrlock
 000007A6  9700		      C                         dw  09700h      ; 47, home
 000007A8  9800		      C                         dw  09800h      ; 48, up
 000007AA  9900		      C                         dw  09900h      ; 49, pgup
 000007AC  0AF0		      C                         dw  00af0h      ; 4a, gray-
 000007AE  9B00		      C                         dw  09b00h      ; 4b, left
 000007B0  0000		      C                         dw  00000h      ; 4c, center
 000007B2  9D00		      C                         dw  09d00h      ; 4d, right
 000007B4  0BF0		      C                         dw  00bf0h      ; 4e, gray+
 000007B6  9F00		      C                         dw  09f00h      ; 4f, end
 000007B8  A000		      C                         dw  0a000h      ; 50, down
 000007BA  A100		      C                         dw  0a100h      ; 51, pgdn
 000007BC  A200		      C                         dw  0a200h      ; 52, ins
 000007BE  A300		      C                         dw  0a300h      ; 53, del
 000007C0  0000		      C                         dw  00000h      ; 54, nothing
 000007C2  0000		      C                         dw  00000h      ; 55, nothing
 000007C4  0000		      C                         dw  00000h      ; 56, nothing
 000007C6  8B00		      C                         dw  08b00h      ; 57, f11
 000007C8  8C00		      C                         dw  08c00h      ; 58, f12
 000007CA  FFFF		      C                         dw  0ffffh
			      C 
			      C                         ; CTRL+Keystroke SCAN/ASCII Conversion
 000007CC 0000		      C     ctrl_keys           dw  00000h      ; 00, null
 000007CE  001B		      C                         dw  0001Bh      ; 01, esc
 000007D0  0000		      C                         dw  00000h      ; 02, 1
 000007D2  0300		      C                         dw  00300h      ; 03, 2
 000007D4  0000		      C                         dw  00000h      ; 04, 3
 000007D6  0000		      C                         dw  00000h      ; 05, 4
 000007D8  0000		      C                         dw  00000h      ; 06, 5
 000007DA  001E		      C                         dw  0001eh      ; 07, 6
 000007DC  0000		      C                         dw  00000h      ; 08, 7
 000007DE  0000		      C                         dw  00000h      ; 09, 8
 000007E0  0000		      C                         dw  00000h      ; 0a, 9
 000007E2  0000		      C                         dw  00000h      ; 0b, 0
 000007E4  001F		      C                         dw  0001fh      ; 0c, -
 000007E6  0000		      C                         dw  00000h      ; 0d, =
 000007E8  007F		      C                         dw  0007fh      ; 0e, bksp
 000007EA  9400		      C                         dw  09400h      ; 0f, tab
 000007EC  0011		      C                         dw  00011h      ; 10, q
 000007EE  0017		      C                         dw  00017h      ; 11, w
 000007F0  0005		      C                         dw  00005h      ; 12, e
 000007F2  0012		      C                         dw  00012h      ; 13, r
 000007F4  0014		      C                         dw  00014h      ; 14, t
 000007F6  0019		      C                         dw  00019h      ; 15, y
 000007F8  0015		      C                         dw  00015h      ; 16, u
 000007FA  0009		      C                         dw  00009h      ; 17, i
 000007FC  000F		      C                         dw  0000fh      ; 18, o
 000007FE  0010		      C                         dw  00010h      ; 19, p
 00000800  001B		      C                         dw  0001bh      ; 1a, [
 00000802  001C		      C                         dw  0001ch      ; 1b, ]
 00000804  000A		      C                         dw  0000ah      ; 1c, enter
 00000806  01F0		      C                         dw  001f0h      ; 1d, ctrl
 00000808  0001		      C                         dw  00001h      ; 1e, a
 0000080A  0013		      C                         dw  00013h      ; 1f, s
 0000080C  0004		      C                         dw  00004h      ; 20, d
 0000080E  0006		      C                         dw  00006h      ; 21, f
 00000810  0007		      C                         dw  00007h      ; 22, g
 00000812  0008		      C                         dw  00008h      ; 23, h
 00000814  000A		      C                         dw  0000ah      ; 24, j
 00000816  000B		      C                         dw  0000bh      ; 25, k
 00000818  000C		      C                         dw  0000ch      ; 26, l
 0000081A  0000		      C                         dw  00000h      ; 27, ;
 0000081C  0000		      C                         dw  00000h      ; 28, '
 0000081E  0000		      C                         dw  00000h      ; 29, `
 00000820  03F0		      C                         dw  003f0h      ; 2a, l_shift
 00000822  001C		      C                         dw  0001ch      ; 2b, \
 00000824  001A		      C                         dw  0001ah      ; 2c, z
 00000826  0018		      C                         dw  00018h      ; 2d, x
 00000828  0003		      C                         dw  00003h      ; 2e, c
 0000082A  0016		      C                         dw  00016h      ; 2f, v
 0000082C  0002		      C                         dw  00002h      ; 30, b
 0000082E  000E		      C                         dw  0000eh      ; 31, n
 00000830  000D		      C                         dw  0000dh      ; 32, m
 00000832  0000		      C                         dw  00000h      ; 33, ,
 00000834  0000		      C                         dw  00000h      ; 34, .
 00000836  0000		      C                         dw  00000h      ; 35, /
 00000838  04F0		      C                         dw  004f0h      ; 36, r_shift
 0000083A  0010		      C                         dw  00010h      ; 37, prtsc
 0000083C  05F0		      C                         dw  005f0h      ; 38, alt
 0000083E  0020		      C                         dw  00020h      ; 39, spc
 00000840  07F0		      C                         dw  007f0h      ; 3a, caps
 00000842  5E00		      C                         dw  05e00h      ; 3b, f1
 00000844  5F00		      C                         dw  05f00h      ; 3c, f2
 00000846  6000		      C                         dw  06000h      ; 3d, f3
 00000848  6100		      C                         dw  06100h      ; 3e, f4
 0000084A  6200		      C                         dw  06200h      ; 3f, f5
 0000084C  6300		      C                         dw  06300h      ; 40, f6
 0000084E  6400		      C                         dw  06400h      ; 41, f7
 00000850  6500		      C                         dw  06500h      ; 42, f8
 00000852  6600		      C                         dw  06600h      ; 43, f9
 00000854  6700		      C                         dw  06700h      ; 44, f10
 00000856  08F0		      C                         dw  008f0h      ; 45, numlck
 00000858  09F0		      C                         dw  009f0h      ; 46, scrlock
 0000085A  7700		      C                         dw  07700h      ; 47, home
 0000085C  8D00		      C                         dw  08d00h      ; 48, up
 0000085E  8400		      C                         dw  08400h      ; 49, pgup
 00000860  0AF0		      C                         dw  00af0h      ; 4a, gray-
 00000862  7300		      C                         dw  07300h      ; 4b, left
 00000864  0000		      C                         dw  00000h      ; 4c, center
 00000866  7400		      C                         dw  07400h      ; 4d, right
 00000868  0BF0		      C                         dw  00bf0h      ; 4e, gray+
 0000086A  7500		      C                         dw  07500h      ; 4f, end
 0000086C  9100		      C                         dw  09100h      ; 50, down
 0000086E  7600		      C                         dw  07600h      ; 51, pgdn
 00000870  9200		      C                         dw  09200h      ; 52, ins
 00000872  9300		      C                         dw  09300h      ; 53, del
 00000874  0000		      C                         dw  00000h      ; 54, nothing
 00000876  0000		      C                         dw  00000h      ; 55, nothing
 00000878  0000		      C                         dw  00000h      ; 56, nothing
 0000087A  8900		      C                         dw  08900h      ; 57, f11
 0000087C  8A00		      C                         dw  08a00h      ; 58, f12
 0000087E  FFFF		      C                         dw  0ffffh
			      C 

				; DATA
 00000880 50 53 2F 32 20	    driver_name                             db  "PS/2 Keyboard Driver",0
	   4B 65 79 62 6F
	   61 72 64 20 44
	   72 69 76 65 72
	   00
 00000895 31 30 2E 31 30	    version                                 db  "10.10.2010",0
	   2E 32 30 31 30
	   00
 000008A0 28 63 29 20 43	    copyright                               db  "(c) Copyright Beatleworks, Inc.",0
	   6F 70 79 72 69
	   67 68 74 20 42
	   65 61 74 6C 65
	   77 6F 72 6B 73
	   2C 20 49 6E 63
	   2E 00
 000008C0 52 69 63 6B 20	    author                                  db  "Rick C. Hodgin",0
	   43 2E 20 48 6F
	   64 67 69 6E 00
 000008CF 01			    bootup                                  db  1                   ; Changed to 0 after bootup is complete

 000008D0 0000			    data_segment                            dw  0
 000008D2 00			    debi_intercept                          db  0
 000008D3 00			    extended_data                           db  0                   ; Are we in extended data mode?

 000008D4 00			    keyboard_logo                           db  0       ; how many extra 16x16 pictures wide?
 000008D5  00 00 00 00 00	                                            db  00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00
 000008E7  00 00 00 00 00	                                            db  00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00
 000008F9  0F 0F 0F 0F 0F	                                            db  0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh
	   0F 0F 0F 0F 0F
	   0F 0F 0F 0F 0F
	   0F 0F 0F
 0000090B  0F 0F 0F 0F 0F	                                            db  0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh
	   0F 0F 0F 0F 0F
	   0F 0F 0F 0F 0F
	   0F 0F 0F
 0000091D  0F 0F 0F 0F 0F	                                            db  0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh
	   0F 0F 0F 0F 0F
	   0F 0F 0F 0F 0F
	   0F 0F 0F
 0000092F  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,10h,0fh,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h
	   10 0F 07 07 10
	   07 07 10 07 07
	   10 07 07
 00000941  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,10h,0fh,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h
	   10 0F 07 07 10
	   07 07 10 07 07
	   10 07 07
 00000953  0F 0F 0F 10 10	                                            db  0fh,0fh,0fh,10h,10h,10h,0fh,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h
	   10 0F 10 10 10
	   10 10 10 10 10
	   10 10 10
 00000965  0F 0F 0F 0F 0F	                                            db  0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh,0fh
	   0F 0F 0F 0F 0F
	   0F 0F 0F 0F 0F
	   0F 0F 0F
 00000977  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h
	   10 07 07 10 07
	   07 10 07 07 10
	   07 07 10
 00000989  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h
	   10 07 07 10 07
	   07 10 07 07 10
	   07 07 10
 0000099B  0F 0F 0F 10 10	                                            db  0fh,0fh,0fh,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h
	   10 10 10 10 10
	   10 10 10 10 10
	   10 10 10
 000009AD  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h
	   07 10 07 07 10
	   07 07 10 07 07
	   10 07 07
 000009BF  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h
	   07 10 07 07 10
	   07 07 10 07 07
	   10 07 07
 000009D1  0F 0F 0F 10 10	                                            db  0fh,0fh,0fh,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h,10h
	   10 10 10 10 10
	   10 10 10 10 10
	   10 10 10
 000009E3  0F 0F 0F 07 07	                                            db  0fh,0fh,0fh,07h,07h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h,07h,10h,07h
	   07 07 10 07 07
	   10 07 07 10 07
	   07 10 07
 000009F5  20 20 20		                                            db  20h,20h,20h

 000009F8 00000000		    text_x                                  dd  0
 000009FC 00000000		    text_y                                  dd  0

 00000A00 0000			    _EXODUS_requestor                       dw  0
 00000A02			  primative_call_gates:
 00000A02 0000			    _VID_draw_logo                          dw  0
 00000A04 00B0			    _VID_display_string_nr_vga              dw  _sEXODUS_REQUESTOR
 00000A06 F000			    _iDEBI_kbd_interface                    dw  0f000h
 00000A08 F000			    _iTASK_kbd_interface                    dw  0f000h
 00000A0A F000			    _TIMER_wait_full_tick                   dw  0f000h
 00000A0C F000			    _iBIOS_read_8042_64h                    dw  0f000h
 00000A0E F000			    _iBIOS_read_8042_60h                    dw  0f000h
 00000A10 F000			    _iBIOS_write_8042_64h                   dw  0f000h
 00000A12 F000			    _iBIOS_write_8042_60h                   dw  0f000h
 00000A14 F000			    _VID_g_mono_display_text                dw  0f000h
 00000A16 F000			    _VID_g_display_radix_in_edx_mono        dw  0f000h
 00000A18  F000			                                            dw  0f000h
 00000A1A  F000			                                            dw  0f000h

 00000A1C 0D 56 49 44 5F	    required_primatives                     db  13, "VID_draw_logo"
	   64 72 61 77 5F
	   6C 6F 67 6F
 00000A2A  19 56 49 44 5F	                                            db  25, "VID_display_string_nr_vga"
	   64 69 73 70 6C
	   61 79 5F 73 74
	   72 69 6E 67 5F
	   6E 72 5F 76 67
	   61
 00000A44  13 69 44 45 42	                                            db  19, "iDEBI_kbd_interface"
	   49 5F 6B 62 64
	   5F 69 6E 74 65
	   72 66 61 63 65
 00000A58  13 69 54 41 53	                                            db  19, "iTASK_kbd_interface"
	   4B 5F 6B 62 64
	   5F 69 6E 74 65
	   72 66 61 63 65
 00000A6C  14 54 49 4D 45	                                            db  20, "TIMER_wait_full_tick"
	   52 5F 77 61 69
	   74 5F 66 75 6C
	   6C 5F 74 69 63
	   6B
 00000A81  13 69 42 49 4F	                                            db  19, "iBIOS_read_8042_64h"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 34 68
 00000A95  13 69 42 49 4F	                                            db  19, "iBIOS_read_8042_60h"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 30 68
 00000AA9  14 69 42 49 4F	                                            db  20, "iBIOS_write_8042_64h"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 34
	   68
 00000ABE  14 69 42 49 4F	                                            db  20, "iBIOS_write_8042_60h"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 30
	   68
 00000AD3  17 56 49 44 5F	                                            db  23, "VID_g_mono_display_text"
	   67 5F 6D 6F 6E
	   6F 5F 64 69 73
	   70 6C 61 79 5F
	   74 65 78 74
 00000AEB  1F 56 49 44 5F	                                            db  31, "VID_g_display_radix_in_edx_mono"
	   67 5F 64 69 73
	   70 6C 61 79 5F
	   72 61 64 69 78
	   5F 69 6E 5F 65
	   64 78 5F 6D 6F
	   6E 6F
 00000B0B  FF                                            db  0ffh

 00000B0C			 end_of_required_data:

 00000B0C			    driver_primatives:
 00000B0C  1C 69 4B 42 44	                                            db  28,"iKBD_activate_DEBI_intercept"
	   5F 61 63 74 69
	   76 61 74 65 5F
	   44 45 42 49 5F
	   69 6E 74 65 72
	   63 65 70 74
 00000B29  00000364 R		                                            dd  offset iKBD_activate_DEBI_intercept
 00000B2D  0000			                                            dw  0

 00000B2F  1E 69 4B 42 44	                                            db  30,"iKBD_deactivate_DEBI_intercept"
	   5F 64 65 61 63
	   74 69 76 61 74
	   65 5F 44 45 42
	   49 5F 69 6E 74
	   65 72 63 65 70
	   74
 00000B4E  00000376 R		                                            dd  offset iKBD_deactivate_DEBI_intercept
 00000B52  0000			                                            dw  0

 00000B54  FFFF			                                            dw  0ffffh              ; Teriminator

 0B56				_TEXT32 ENDS

				END
