Microsoft (R) Macro Assembler Version 6.11a		    03/08/09 18:37:05
standard BIOS Driver					     Page 1 - 1


				; bios.asm
				;
				; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				; ³ standard BIOS ³
				; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				;
				; Exodus native primative BIOS functions
				;

				TITLE standard BIOS Driver

				    .MODEL tiny

				    .STACK 0h

				INCLUDE \exodus\source\common\equates.asp
			      C ; equates.asp
			      C ;
			      C ; Exodus constants.  These are used at various places.
			      C ; This file provides a common area to modify constant values, rather than sifting through programs, etc.
			      C ;
			      C 
			      C 
			      C 
			      C INCLUDE x86_eq.asp
			      C ; x86_eq.asp
			      C ;
			      C ; Constants specific to the Intel architecture
			      C ;
			      C 
			      C 
			      C 
 = 0000			      C _TSS_BACK_LINK              EQU 0
 = 0004			      C _TSS_ESP0                   EQU 4
 = 0008			      C _TSS_SS0                    EQU 8
 = 000C			      C _TSS_ESP1                   EQU 12
 = 0010			      C _TSS_SS1                    EQU 16
 = 0014			      C _TSS_ESP2                   EQU 20
 = 0018			      C _TSS_SS2                    EQU 24
 = 001C			      C _TSS_CR3                    EQU 28
 = 0020			      C _TSS_EIP                    EQU 32
 = 0024			      C _TSS_EFLAGS                 EQU 36
 = 0028			      C _TSS_EAX                    EQU 40
 = 002C			      C _TSS_ECX                    EQU 44
 = 0030			      C _TSS_EDX                    EQU 48
 = 0034			      C _TSS_EBX                    EQU 52
 = 0038			      C _TSS_ESP                    EQU 56
 = 003C			      C _TSS_EBP                    EQU 60
 = 0040			      C _TSS_ESI                    EQU 64
 = 0044			      C _TSS_EDI                    EQU 68
 = 0048			      C _TSS_ES                     EQU 72
 = 004C			      C _TSS_CS                     EQU 76
 = 0050			      C _TSS_SS                     EQU 80
 = 0054			      C _TSS_DS                     EQU 84
 = 0058			      C _TSS_FS                     EQU 88
 = 005C			      C _TSS_GS                     EQU 92
 = 0060			      C _TSS_LDT                    EQU 96
 = 0064			      C _TSS_TRAP_BIT               EQU 100
 = 0001			      C _TSS_TRAP_BIT_MASK          EQU 1b
 = 0066			      C _TSS_IO_MAP                 EQU 102
			      C ; The following area is used by Exodus.  It appears immediate after the TSS in memory
 = 0068			      C _TSS_FPU_SAVE_AREA          EQU 104
			      C 
			      C 
			      C ; EFLAGS register constants to access individual flags
 = 0000			      C _EFLAGS_CF                  EQU 0
 = 0002			      C _EFLAGS_PF                  EQU 2
 = 0004			      C _EFLAGS_ACF                 EQU 4
 = 0006			      C _EFLAGS_ZF                  EQU 6
 = 0007			      C _EFLAGS_SF                  EQU 7
 = 0008			      C _EFLAGS_TF                  EQU 8
 = 0009			      C _EFLAGS_IF                  EQU 9
 = 000A			      C _EFLAGS_DF                  EQU 10
 = 000B			      C _EFLAGS_OF                  EQU 11
 = 000C			      C _EFLAGS_IOPL                EQU 12
 = 000E			      C _EFLAGS_NT                  EQU 14
 = 0010			      C _EFLAGS_RF                  EQU 16
 = 0011			      C _EFLAGS_VM                  EQU 17
			      C ; Masks to access specific bits
 = 0001			      C _EFLAGS_CF_MASK             EQU  1b SHL _EFLAGS_CF
 = 0004			      C _EFLAGS_PF_MASK             EQU  1b SHL _EFLAGS_PF
 = 0010			      C _EFLAGS_ACF_MASK            EQU  1b SHL _EFLAGS_ACF
 = 0040			      C _EFLAGS_ZF_MASK             EQU  1b SHL _EFLAGS_ZF
 = 0080			      C _EFLAGS_SF_MASK             EQU  1b SHL _EFLAGS_SF
 = 0100			      C _EFLAGS_TF_MASK             EQU  1b SHL _EFLAGS_TF
 = 0200			      C _EFLAGS_IF_MASK             EQU  1b SHL _EFLAGS_IF
 = 0400			      C _EFLAGS_DF_MASK             EQU  1b SHL _EFLAGS_DF
 = 0800			      C _EFLAGS_OF_MASK             EQU  1b SHL _EFLAGS_OF
 = 3000			      C _EFLAGS_IOPL_MASK           EQU 11b SHL _EFLAGS_IOPL
 = 4000			      C _EFLAGS_NT_MASK             EQU  1b SHL _EFLAGS_NT
 = 00010000		      C _EFLAGS_RF_MASK             EQU  1b SHL _EFLAGS_RF
 = 00020000		      C _EFLAGS_VM_MASK             EQU  1b SHL _EFLAGS_VM
			      C 
 = 1000			      C _CW_INFINITY                EQU 1000000000000b
 = 0C00			      C _CW_ROUNDING                EQU  110000000000b
 = 0000			      C _CW_ROUNDING_00             EQU  000000000000b
 = 0400			      C _CW_ROUNDING_01             EQU  010000000000b
 = 0800			      C _CW_ROUNDING_10             EQU  100000000000b
 = 0C00			      C _CW_ROUNDING_11             EQU  110000000000b
 = 0300			      C _CW_PRECISION               EQU    1100000000b
 = 0000			      C _CW_PRECISION_00            EQU    0000000000b
 = 0100			      C _CW_PRECISION_01            EQU    0100000000b
 = 0200			      C _CW_PRECISION_10            EQU    1000000000b
 = 0300			      C _CW_PRECISION_11            EQU    1100000000b
 = 0020			      C _CW_PM                      EQU        100000b
 = 0010			      C _CW_UM                      EQU         10000b
 = 0008			      C _CW_OM                      EQU          1000b
 = 0004			      C _CW_ZM                      EQU           100b
 = 0002			      C _CW_DM                      EQU            10b
 = 0001			      C _CW_IM                      EQU             1b
			      C 
 = 8000			      C _SW_BUSY                    EQU 1000000000000000b
 = 4000			      C _SW_C3                      EQU  100000000000000b
 = 3800			      C _SW_TOS                     EQU   11100000000000b
 = 0400			      C _SW_C2                      EQU      10000000000b
 = 0200			      C _SW_C1                      EQU       1000000000b
 = 0100			      C _SW_C0                      EQU        100000000b
 = 0080			      C _SW_ERROR_SUMMARY           EQU         10000000b
 = 0040			      C _SW_STACK_FAULT             EQU          1000000b
 = 0020			      C _SW_PE                      EQU           100000b
 = 0010			      C _SW_UE                      EQU            10000b
 = 0008			      C _SW_OE                      EQU             1000b
 = 0004			      C _SW_ZE                      EQU              100b
 = 0002			      C _SW_DE                      EQU               10b
 = 0001			      C _SW_IE                      EQU                1b
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ GDT ENTRIES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0008			      C     _sIDT                       EQU 1 * 8       ; IDT
 = 0010			      C     _sGDT                       EQU 2 * 8       ; GDT
 = 0018			      C     _sSTACK                     EQU 3 * 8       ; STACK
 = 0020			      C     _sCODE                      EQU 4 * 8       ; kernel CODE for kernel code
 = 0048			      C     _sDATA                      EQU 9 * 8       ; kernel DATA selector for kernel data
 = 0028			      C     _sGRAPHICS                  EQU 5 * 8       ; Graphics video (0a0000h)
 = 0030			      C     _sMONO                      EQU 6 * 8       ; Mono video (0b0000h)
 = 0038			      C     _sVGA                       EQU 7 * 8       ; VGA video (0b8000h)
 = 0040			      C     _sALL_MEM                   EQU 8 * 8       ; All memory (for debugging)
			      C     ; 9 is above, _sDATA
 = 0050			      C     _sEXODUS_MEM                EQU 10 * 8      ; Exodus assigned memory
 = 0058			      C     _sEXODUS_PORTS              EQU 11 * 8      ; Exodus assigned ports
 = 0060			      C     _sEXODUS_INTS               EQU 12 * 8      ; Exodus assigned ints
			      C     ;_sNOT_USED                                 ; available
 = 0070			      C     _sEXODUS_TSS                EQU 14 * 8      ; Exodus TSS
 = 0078			      C     _sEXODUS_TASK_GATE          EQU 15 * 8      ; Exodus kernel task gate (points to _sEXODUS_TSS)
 = 0080			      C     _sEXODUS_SLAVE_TSS          EQU 16 * 8      ; Exodus Slave TSS
 = 0088			      C     _sEXODUS_SLAVE_TASK_GATE    EQU 17 * 8      ; Exodus kernel slave task gate (points to _sEXODUS_SLAVE_TSS)
			      C     ;_sNOT USED
 = 0098			      C     _sPRIMATIVES                EQU 19 * 8      ; Primative structure for natives
 = 00A0			      C     _sPRIMATIVE_LOAD_INFO       EQU 20 * 8      ; Primative load information (for reporting on each driver)
 = 00A8			      C     _sSYSTEM                    EQU 21 * 8      ; Exodus system memory
 = 00B0			      C     _sEXODUS_REQUESTOR          EQU 22 * 8      ; Call gate to Exodus's requestor() function
 = 00B8			      C     _sSYSTEM_RING1              EQU 23 * 8      ; Exodus system memory for ring-1 apps
 = 00C0			      C     _sSYSTEM_RING2              EQU 24 * 8      ; Exodus system memory for ring-2 apps
 = 00C8			      C     _sSYSTEM_RING3              EQU 25 * 8      ; Exodus system memory for ring-3 apps
 = 00D0			      C     _sDEBI_screen               EQU 26 * 8      ; low-level DEBI debugger's save screen buffer
 = 00D8			      C     _sDEBI_memory               EQU 27 * 8      ; low-level DEBI debugger's memory
 = 00E0			      C     _sFLOPPY_TRACK              EQU 28 * 8      ; Floppy disk data I/O for one full track
 = 00E8			      C     _sVGA_BACKUP                EQU 29 * 8      ; VGA video (060000h, used when in a graphics mode so writes
			      C                                                 ;  to the text screen are still valid)
 = 00F0			      C     _sDEBI_screen2              EQU 30 * 8      ; low-level DEBI debugger's save screen buffer2 (for popups and menus)
 = 00F8			      C     _sDEBI_temp                 EQU 31 * 8      ; low-level DEBI debugger's temporary selector (used for various things)
 = 0100			      C     _sEXODUS_OBJECTS            EQU 32 * 8      ; Exodus objects
 = 0108			      C     _sTASK_SWITCH_TSS           EQU 33 * 8      ; Task Manager's switch_task() function
 = 0110			      C     _sTASK_SWITCH_TASK_GATE     EQU 34 * 8      ; Task Manager's task gate (points to _sTASK_SWITCH_TSS)
 = 0118			      C     _sTASK_STACK                EQU 35 * 8      ; Task Manger task's stack
 = 0120			      C     _sSTACK0                    EQU 36 * 8      ; Exodus Stack 0
 = 0128			      C     _sSTACK1                    EQU 37 * 8      ; Exodus Stack 1
 = 0130			      C     _sSTACK2                    EQU 38 * 8      ; Exodus Stack 2
 = 0138			      C     _sDEBI_dt                   EQU 39 * 8      ; low-level DEBI debugger's DT storage
 = 0140			      C     _sDEBI_np                   EQU 40 * 8      ; low-level DEBI debugger's NP storage
 = 0148			      C     _sDEBI_rp                   EQU 41 * 8      ; low-level DEBI debugger's RP storage
			      C 
			      C   ; Variable base/limit GDT slots setup in INIT32.ASP
 = 0190			      C     _sEXODUS_INI                EQU 50 * 8      ; Holds the parsed EXODUS.INI sructure
 = 0198			      C     _sEXODUS_INI_ERRORS         EQU 51 * 8      ; Holds any errors found while parsing EXODUS.INI
 = 01A0			      C     _sTASK_SYSTEM               EQU 52 * 8      ; Holds all tasks
			      C 
 = 5DA0			      C     _cgTEMP_PRIMATIVE_MAIN      EQU 2996 * 8
 = 5DA8			      C     _cgTEMP_PRIMATIVE_REQUESTOR EQU 2997 * 8
 = 5DB0			      C     _csTEMP_PRIMATIVE           EQU 2998 * 8
 = 5DB8			      C     _dsTEMP_PRIMATIVE           EQU 2999 * 8
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ CONSTANTS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÙ
 = 00C8			      C     _MIN_PRIMATIVE              EQU 200                             ; Start of the primatives
 = 0BB3			      C     _MAX_PRIMATIVE              EQU 2995                            ; End of the primatives
 = 0FFF			      C     _lastGDT                    EQU 4095                            ; Last valid GDT in the GDT
 = 0032			      C     _firstASSIGNMENT            EQU 50                              ; The first Exodus assigned GDT entry for various items
 = 00C7			      C     _lastASSIGNMENT             EQU 199                             ; The last Exodus assigned GDT entry for various items
 = 0BB8			      C     _firstUSER_ASSIGNMENT       EQU 3000
 = 0FFF			      C     _lastUSER_ASSIGNMENT        EQU 4095
 = 00C7			      C     _sGDT_init                  EQU 199                             ; Only initialize the first 199 GDT entries
			      C 
			      C 
			      C   ; Required memory structures for Exodus
			      C   ; Refer to Bootup(internal) document for definitive memory locations
 = 0008A000		      C     _sIDT_base                  EQU 8a000h
 = 0800			      C     _sIDT_limit                 EQU 800h
 = 0800			      C     _sGDT_base                  EQU 0800h
 = 8000			      C     _sGDT_limit                 EQU 8000h
 = 00098000		      C     _sSTACK_base                EQU 98000h
 = 8000			      C     _sSTACK_limit               EQU 8000h
 = 00010000		      C     _sCODE_base                 EQU 10000h
 = 00040000		      C     _sCODE_limit                EQU 40000h
 = 00010000		      C     _sDATA_base                 EQU 10000h
 = 00030000		      C     _sDATA_limit                EQU 30000h
 = 000A0000		      C     _sGRAPHICS_base             EQU 0a0000h
 = 00010000		      C     _sGRAPHICS_limit            EQU 10000h
 = 000B0000		      C     _sMONO_base                 EQU 0b0000h
 = 8000			      C     _sMONO_limit                EQU 8000h
 = 000B8000		      C     _sVGA_base                  EQU 0b8000h     ; Also, see _sVGA_BACKUP_ below
 = 8000			      C     _sVGA_limit                 EQU 8000h
 = 0000			      C     _sALL_MEM_base              EQU 0
 = FFFFFFFF		      C     _sALL_MEM_limit             EQU 0ffffffffh
 = 00070C00		      C     _sEXODUS_MEM_base           EQU 70c00h
 = 4000			      C     _sEXODUS_MEM_limit          EQU 4000h
 = 0006CC00		      C     _sEXODUS_PORTS_base         EQU 6cc00h
 = 4000			      C     _sEXODUS_PORTS_limit        EQU 4000h
 = 00097E00		      C     _sEXODUS_INTS_base          EQU 97e00h
 = 0200			      C     _sEXODUS_INTS_limit         EQU 200h
 = 00068100		      C     _sEXODUS_TSS_base           EQU 68100h
 = 0100			      C     _sEXODUS_TSS_limit          EQU 100h        ; 256 bytes
			      C    ;_sEXODUS_TASK_GATE          EQU task gate pointing to _sEXODUS_TSS
 = 00068200		      C     _sEXODUS_SLAVE_TSS_base     EQU 68200h
 = 0100			      C     _sEXODUS_SLAVE_TSS_limit    EQU 100h        ; 256 bytes
 = 0008D380		      C     _sPRIMATIVES_base           EQU 8d380h
 = 4000			      C     _sPRIMATIVES_limit          EQU 4000h       ; 16k
 = 0008C380		      C     _sPRIMATIVE_LOAD_INFO_base  EQU 8c380h
 = 1000			      C     _sPRIMATIVE_LOAD_INFO_limit EQU 1000h       ; 4k
 = 00089400		      C     _sSYSTEM_base               EQU 89400h
 = 0C00			      C     _sSYSTEM_limit              EQU 0c00h       ; 3k
 = 0800			      C     _sSYSTEM_USER_limit         EQU 0800h       ; 2k
 = 00281400		      C     _sDEBI_screen_base          EQU 281400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000			      C     _sDEBI_screen_limit         EQU 8000h       ; 32k
 = 00279400		      C     _sDEBI_memory_base          EQU 279400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000			      C     _sDEBI_memory_limit         EQU 8000h       ; 32k
 = 00074C00		      C     _sFLOPPY_TRACK_base         EQU 74c00h
 = 4800			      C     _sFLOPPY_TRACK_limit        EQU 4800h       ; 512 bytes per sector * 18 sectors * 2 sides = 18k
 = 00060000		      C     _sVGA_BACKUP_base           EQU 60000h      ; Note, the backup area is used when in graphics modes that use a0000h
 = 8000			      C     _sVGA_BACKUP_limit          EQU 8000h       ; so all video writes to the text window are still saved
 = 00258000		      C     _sDEBI_screen2_base         EQU 258000h
 = 00028000		      C     _sDEBI_screen2_limit        EQU 28000h       ; 32k
 = 00068000		      C     _sTASK_SWITCH_TSS_base      EQU 68000h
 = 0100			      C     _sTASK_SWITCH_TSS_limit     EQU 100h        ; 256 bytes
 = 00220000		      C     _sTASK_STACK_base           EQU 220000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sTASK_STACK_limit          EQU 8000h       ; 32k
 = 00095380		      C     _sSTACK0_base               EQU 95380h
 = 2000			      C     _sSTACK0_limit              EQU 2000h       ; 8k
 = 00093380		      C     _sSTACK1_base               EQU 93380h
 = 2000			      C     _sSTACK1_limit              EQU 2000h       ; 8k
 = 00091380		      C     _sSTACK2_base               EQU 91380h
 = 2000			      C     _sSTACK2_limit              EQU 2000h       ; 8k
 = 00240000		      C     _sDEBI_dt_base              EQU 240000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_dt_limit             EQU 8000h       ; 32k
 = 00248000		      C     _sDEBI_np_base              EQU 248000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_np_limit             EQU 8000h       ; 32k
 = 00250000		      C     _sDEBI_rp_base              EQU 250000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000			      C     _sDEBI_rp_limit             EQU 8000h       ; 32k
			      C 
 = 00050000		      C     _sEXODUS_OBJECTS_base       EQU 50000h
 = 8000			      C     _sEXODUS_OBJECTS_limit      EQU 8000h       ; 32k
 = 00200000		      C     _sEXODUS_INI_base           EQU 200000h     ; 1MB               ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 00010000		      C     _sEXODUS_INI_limit          EQU 10000h      ; 64k
 = 00210000		      C     _sEXODUS_INI_ERRORS_base    EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 4000			      C     _sEXODUS_INI_ERRORS_limit   EQU 4000h       ; 16k
 = 00210000		      C     _sTASK_SYSTEM_base          EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 00010000		      C     _sTASK_SYSTEM_limit         EQU 010000h     ; 64k
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOOT DT STRUCTURE ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _BOOT_DT_object_type        EQU 0
 = 0001			      C     _BOOT_DT_days               EQU 1
 = 0005			      C     _BOOT_DT_seconds            EQU 5
 = 0008			      C     _BOOT_DT_rp_offset          EQU 8
 = 000A			      C     _BOOT_DT_entry_type         EQU 10
 = 000B			      C     _BOOT_DT_np_offset          EQU 11
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOOT PARAMETER BLOCK STRUCTURE ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _BOOT_PB_size               EQU 0
 = 0004			      C     _BOOT_PB_main               EQU 4
 = 0008			      C     _BOOT_PB_requestor          EQU 8
 = 000C			      C     _BOOT_PB_start_head         EQU 12
 = 000D			      C     _BOOT_PB_start_track        EQU 13
 = 000E			      C     _BOOT_PB_start_sector       EQU 14
 = 0010			      C     _BOOT_PB_end_head           EQU 16
 = 0011			      C     _BOOT_PB_end_track          EQU 17
 = 0012			      C     _BOOT_PB_end_sector         EQU 18
 = 0014			      C     _BOOT_PB_entry_type         EQU 20
 = 0016			      C     _BOOT_PB_linear_offset      EQU 22
 = 001A			      C     _BOOT_PB_dt_offset          EQU 26
 = 001C			      C     _BOOT_PB_crc16              EQU 28
 = 0020			      C     _BOOT_PB_structure_size     EQU 32
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS.INI STRUCTURES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _EXODUS_INI_FIRST_BRACKET       EQU 0
 = 0004			      C     _EXODUS_INI_TOTAL_BYTES         EQU 4
 = 0008			      C     _EXODUS_INI_TOTAL_BRACKET_GROUPS EQU 8
 = 000C			      C     _EXODUS_INI_TOTAL_PAREN_CASKS   EQU 12
 = 0010			      C     _EXODUS_INI_HEADER_LENGTH       EQU 16
			      C 
 = 0000			      C     _EXODUS_BRACKET_NEXT            EQU 0
 = 0004			      C     _EXODUS_BRACKET_PAREN_CASKS     EQU 4
 = 0008			      C     _EXODUS_BRACKET_TOTAL_PARENS    EQU 8
 = 000C			      C     _EXODUS_BRACKET_NAME            EQU 12
 = 0010			      C     _EXODUS_BRACKET_HANDLE          EQU 16
 = 0014			      C     _EXODUS_BRACKET_REQUESTOR       EQU 20
 = 0016			      C     _EXODUS_BRACKET_REQUESTOR_FUNC  EQU 22
 = 001A			      C     _EXODUS_BRACKET_SCRATCH_AREA    EQU 26
 = 001E			      C     _EXODUS_BRACKET_LENGTH          EQU 30
			      C 
 = 0000			      C     _EXODUS_PAREN_NEXT              EQU 0
 = 0004			      C     _EXODUS_PAREN_NEXT_SAME_LINE    EQU 4
 = 0008			      C     _EXODUS_PAREN_DATA_ITEMS        EQU 8
 = 000C			      C     _EXODUS_PAREN_TOTAL_DATA_ITEMS  EQU 12
 = 0010			      C     _EXODUS_PAREN_SOURCE_LINE       EQU 16
 = 0014			      C     _EXODUS_PAREN_SOURCE_LINE_LENGTH EQU 20
 = 0018			      C     _EXODUS_PAREN_HANDLE            EQU 24
 = 001A			      C     _EXODUS_PAREN_REQUESTOR         EQU 26
 = 001E			      C     _EXODUS_PAREN_REQUESTOR_FUNC    EQU 30
 = 0022			      C     _EXODUS_PAREN_SCRATCH_AREA      EQU 34
 = 0026			      C     _EXODUS_PAREN_LENGTH            EQU 38
			      C 
 = 0000			      C     _EXODUS_DATA_NEXT               EQU 0
 = 0004			      C     _EXODUS_DATA_DATA_ITEM_SOURCE   EQU 4
 = 0008			      C     _EXODUS_DATA_DATA_ITEM_LENGTH   EQU 8
 = 000C			      C     _EXODUS_DATA_LENGTH             EQU 12
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS xxx STRUCTURES ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C     _EXODUS_MEM_type                EQU 0
 = 0004			      C     _EXODUS_MEM_base                EQU 4
 = 0008			      C     _EXODUS_MEM_limit               EQU 8
 = 000C			      C     _EXODUS_MEM_gdt                 EQU 12
 = 000E			      C     _EXODUS_MEM_ldt                 EQU 14
 = 0010			      C     _EXODUS_MEM_size                EQU 16
			      C 
 = 0010			      C     _EXODUS_PORTS_size              EQU 16
			      C 
 = 0002			      C     _EXODUS_INTS_size               EQU 2
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ EXODUS SYSTEM MEMORY ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Note, when updates are made here they need to be reflected in INF\SYSTEM.INF
			      C ; Note, when updates are made here and INF\SYSTEM.INF, the "Exodus Quick Reference" manual needs to be updated
 = 0000			      C     _SYSTEM_SECONDS_SINCE_BOOTUP    EQU 0                           ; dword
 = 0004			      C     _SYSTEM_SECONDS_SINCE_MIDNIGHT  EQU 4                           ; dword
 = 0008			      C     _SYSTEM_HOURS                   EQU 8                           ; byte
 = 0009			      C     _SYSTEM_MINUTES                 EQU 9                           ; byte
 = 000A			      C     _SYSTEM_SECONDS                 EQU 10                          ; byte
 = 000B			      C     _SYSTEM_182S_OF_A_SECOND        EQU 11                          ; byte
 = 000C			      C     _SYSTEM_DAY                     EQU 12                          ; byte
 = 000D			      C     _SYSTEM_MONTH                   EQU 13                          ; byte
 = 000E			      C     _SYSTEM_YEAR                    EQU 14                          ; word
 = 0010			      C     _SYSTEM_DAY_OF_YEAR             EQU 16                          ; word
 = 0012			      C     _SYSTEM_BUILD                   EQU 18                          ; 10-byte string in the format: "mm.dd.yyyy"
 = 001C			      C     _SYSTEM_TOTAL_MEMORY            EQU 28                          ; dword, total ram in bytes
 = 0020			      C     _SYSTEM_VGA_HORIZONTAL          EQU 32                          ; word (pixels-graphics, or columns-text)
 = 0022			      C     _SYSTEM_VGA_VERTICAL            EQU 34                          ; word (pixels-graphics, or rows-text)
 = 0024			      C     _SYSTEM_VGA_VIDEO_MODE          EQU 36                          ; byte (0-graphics, 1-text)
 = 0025			      C     _SYSTEM_MONO_VIDEO_MODE         EQU 37                          ; byte (0-graphics, 1-text, 0ffh-Unknown)
			      C 
			      C   ; Non-user accessible system memory areas (Exodus internal, hence the use of the _i_)
 = 0800			      C     _SYSTEM_i_FATAL                 EQU 2048                        ; dword
 = 0804			      C     _SYSTEM_i_TASKS_CREATED         EQU 2052                        ; dword
 = 0808			      C     _SYSTEM_i_TASKS_BY_USER         EQU 2056                        ; dword
 = 080C			      C     _SYSTEM_i_TASKS_BY_ERROR        EQU 2060                        ; dword
 = 0810			      C     _SYSTEM_i_IRQ6_INDICATOR        EQU 2064                        ; byte, IRQ6 indicator (changes each time an IRQ6 is signaled)
 = 0811			      C     _SYSTEM_i_IRQ6_INDICATOR_LAST   EQU 2065                        ; byte, IRQ6 indicator previous, used to see when an IRQ6 is signaled
 = 0812			      C     _SYSTEM_i_BASE                  EQU 2066                        ; dword
 = 0816			      C     _SYSTEM_i_LIMIT                 EQU 2070                        ; dword
 = 081A			      C     _SYSTEM_i_DWORD_TO_COPY         EQU 2074                        ; word
 = 081C			      C     _SYSTEM_i_LAST_GDT_REFERENCED   EQU 2076                        ; qword
 = 0824			      C     _SYSTEM_i_CODE_GDT_OFFSET       EQU 2084                        ; dword (used temporarily during native primative install)
 = 0828			      C     _SYSTEM_i_DATA_GDT_OFFSET       EQU 2088                        ; dword (used temporarily during native primative install)
 = 082C			      C     _SYSTEM_i_MAIN_GDT_OFFSET       EQU 2092                        ; dword (used temporarily during native primative install)
 = 0830			      C     _SYSTEM_i_REQUESTOR_GDT_OFFSET  EQU 2096                        ; dword (used temporarily during native primative install)
 = 0834			      C     _SYSTEM_i_GDT_TO_ASSIGN         EQU 2100                        ; word (used various places to assign GDT entries)
 = 0836			      C     _SYSTEM_i_USER_GDT_TO_ASSIGN    EQU 2102                        ; word (used various places to assign USER Program GDTs)
			      C   ; Next offset is 2104
			      C 
			      C 
			      C   ; These scratch items exist from end of memory down
 = 0BF8			      C     _SYSTEM_i_SCRATCH_DWORD2        EQU 3064                        ; dword (used various places as a scratch buffer)
 = 0BFC			      C     _SYSTEM_i_SCRATCH_DWORD1        EQU 3068                        ; dword (used various places as a scratch buffer)
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BOCHS SUPPORT ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; These equates are used to communicate via INT 0FFh
			      C ; Values here are in ecx, with edx being used for data information.
			      C ; Values in eax must be
 = 12345678		      C     _BOCHS1                         EQU 12345678h
 = 87654321		      C     _BOCHS2                         EQU 87654321h
 = 0000			      C     _BOCHS_GET_MONO_MOUSE_XY        EQU 0
 = 0001			      C     _BOCHS_GET_MONO_CURSOR          EQU 1
			      C 
				INCLUDE \exodus\source\common\macros.asp
			      C ; macros.asp
			      C ;
			      C ; Exodus macros, used various places
			      C ;
			      C 
			      C 
			      C 
			      C callfp     MACRO   _seg:REQ, _offset:REQ
			      C ; This macro:   callfp  _code_seg, _offset
			      C ;
			      C     db  9ah
			      C     dd  _offset
			      C     dw  _seg
			      C ENDM
			      C 
			      C 
			      C 
			      C 
			      C callg      MACRO   _seg:REQ
			      C ; This macro:   callg   _call_gate
			      C     db  9ah
			      C     dd  0
			      C     dw  _seg
			      C ENDM
			      C 
			      C 
			      C 
			      C 
			      C jmpg       MACRO   _seg:REQ
			      C ; This macro:   jmpg    _call_gate
			      C     db  0eah
			      C     dd  0
			      C     dw  _seg
			      C ENDM
			      C 
			      C 
			      C 
			      C 
			      C callf      MACRO   _func:REQ
			      C ; This macro:   callf   function_name
			      C     push    cs
			      C     call    _func
			      C ENDM
			      C 
			      C 
			      C 
			      C 
			      C @IO_pause   MACRO
			      C     jmp     $+2
			      C ENDM
			      C 
				INCLUDE \exodus\source\common\errors.asp
			      C ; errors.asp
			      C 
			      C ; FDC error codes
 = 0001			      C _FDC_INVALID_PARAMETERS         EQU 1
 = 0002			      C _FDC_SEEK_FAILED                EQU 2
 = 0003			      C _FDC_TIMEOUT                    EQU 3
 = 0004			      C _FDC_INVALID_DRIVE              EQU 4
 = 0005			      C _FDC_UNKNOWN_DRIVE_TYPE         EQU 5
 = 0006			      C _FDC_INVALID_MEDIA              EQU 6
 = 0007			      C _FDC_SECTOR_NOT_FOUND           EQU 7
			      C 
			      C 
			      C ; DISK error codes
 = 0001			      C _DISK_INVALID_DRIVE             EQU 1
 = 0002			      C _DISK_INVALID_REQUEST           EQU 2
 = 0003			      C _DISK_INVALID_PARAMETERS        EQU 3
			      C 
			      C 
			      C ; Requestor error codes, general
 = 0001			      C _RQ_UNKNOWN_REQUEST             EQU 1
			      C 
			      C 
			      C ; Requestor error codes, specific
 = 03E8			      C _RQ_iDISK_DRIVE_NOT_FOUND       EQU 1000
			      C 
			      C 
			      C ; OBJECT system error codes
 = 0000			      C _TASK_NOT_FOUND                 EQU 0
 = 0001			      C _OBJECT_NOT_FOUND               EQU 1
 = 0002			      C _UNKNOWN_OBJECT_TYPE            EQU 2
 = 0003			      C _UNKNOWN_OBJECT_PROPERTY        EQU 3
 = 0004			      C _UNKNOWN_OBJECT_EVENT           EQU 4
			      C 
				INCLUDE \exodus\source\common\objects.asp
			      C ; objects.asp
			      C ;
			      C ; Exodus Object Types and Parameters
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ BASE OBJECT ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C _GROUPING                           EQU 0
 = 0001			      C _DESKTOP                            EQU 1
 = 0002			      C _WINDOW                             EQU 2
 = 0003			      C _CONSOLE                            EQU 3
 = 0004			      C _TEXT_MODE                          EQU 4
 = 0005			      C _MONO_DESKTOP                       EQU 5
 = 0006			      C _MONO_WINDOW                        EQU 6
 = 0007			      C _MONO_CONSOLE                       EQU 7
 = 0008			      C _MONO_TEXT_MODE                     EQU 8
 =-0003			      C _PROPERTY_START                     EQU -3
 =-0002			      C _EVENT_START                        EQU -2
 =-0001			      C _OBJECT_END                         EQU -1
			      C 
 = 0000			      C _OBJECT_RED                         EQU 0
 = 0001			      C _OBJECT_GREEN                       EQU 1
 = 0002			      C _OBJECT_BLUE                        EQU 2
			      C 
			      C ;-----------------------------------------
			      C ; ÚÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ OBJECTS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C _INPUT_FIELD                        EQU 0
 = 0001			      C _TEXT_FIELD                         EQU 1
 = 0002			      C _BUTTON                             EQU 2
 = 0003			      C _MENU_BAR                           EQU 3
 = 0004			      C _MENU_POPUP                         EQU 4
 = 0005			      C _RADIO_DIAL                         EQU 5
 = 0006			      C _CHECK_BOX                          EQU 6
 = 0007			      C _CIRCLE_BOX                         EQU 7
 = 0008			      C _PULLDOWN                           EQU 8
 = 0009			      C _SLIDE_BAR                          EQU 9
 = 000A			      C _PERCENT_BAR                        EQU 10
 = 000B			      C _TRAY                               EQU 11
 = 000C			      C _ICON                               EQU 12
 = 000D			      C _BITMAP                             EQU 13
 = 000E			      C _HLINE                              EQU 14
 = 000F			      C _VLINE                              EQU 15
 = 0010			      C _LINE                               EQU 16
 = 0011			      C _OVAL                               EQU 17
 = 0012			      C _RECTANGLE                          EQU 18
 = 0013			      C _SCROLL_BAR_HORIZONTAL              EQU 19
 = 0014			      C _SCROLL_BAR_VERTICAL                EQU 20
 = 0015			      C _CASK                               EQU 21
 = 0016			      C _CFSCA_WINDOW                       EQU 22
 = 0017			      C _NUMBERS_WINDOW                     EQU 23
 = 0018			      C _TYPESET_WINDOW                     EQU 24
 = 0019			      C _BORDER_BOX                         EQU 25
			      C 
			      C ;-----------------------------------------
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ FONT_NAME ID #'S ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                  ; Note, Refer to INF\VGA.INF for information on this ID # structure
 = 80000806		      C _BITMAP_8x6                         EQU 80000806h
 = 80000808		      C _BITMAP_8x8                         EQU 80000808h
 = 8000080E		      C _BITMAP_8x14                        EQU 8000080eh
 = 80000810		      C _BITMAP_8x16                        EQU 80000810h
 = 80001010		      C _BITMAP_16x16                       EQU 80001010h
			      C 
			      C 
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _GROUPING PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 			      C _GP_ENABLED                         EQU
 = 			      C _GP_MISC_1                          EQU
 = 			      C _GP_MISC_2                          EQU
 = 			      C _GP_MISC_3                          EQU
 = 			      C _GP_MISC_4                          EQU
 = 			      C _GP_MISC_FLAG_1                     EQU
 = 			      C _GP_MISC_FLAG_2                     EQU
 = 			      C _GP_MISC_FLAG_3                     EQU
			      C 
 = 			      C _GE_FOCUS_GOT                       EQU
 = 			      C _GE_FOCUS_LOST                      EQU
 = 			      C _GE_FOCUS_SET                       EQU
 = 			      C _GE_WHEN_CREATED                    EQU
 = 			      C _GE_WHEN_DESTROYED                  EQU
 = 			      C _GE_REQUESTOR                       EQU
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _DESKTOP PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0000			      C _DP_ENABLED                         EQU 0
 = 0001			      C _DP_VISIBLE                         EQU 1
 = 0002			      C _DP_BACKGROUND                      EQU 2
 = 0003			      C _DP_ICON_HORIZONTAL                 EQU 3
 = 0004			      C _DP_ICON_VERTICAL                   EQU 4
 = 0005			      C _DP_MENU_POSITION                   EQU 5
 = 0006			      C _DP_MENU_HEIGHT                     EQU 6
 = 0007			      C _DP_MENU_AUTOHIDE                   EQU 7
 = 0008			      C _DP_MISC_1                          EQU 8
 = 0009			      C _DP_MISC_2                          EQU 9
 = 000A			      C _DP_MISC_3                          EQU 10
 = 000B			      C _DP_MISC_4                          EQU 11
 = 000C			      C _DP_MISC_FLAG_1                     EQU 12
 = 000D			      C _DP_MISC_FLAG_2                     EQU 13
 = 000E			      C _DP_MISC_FLAG_3                     EQU 14
 = 000F			      C _DP_WALLPAPER                       EQU 15
			      C ;
 = 0000			      C _DE_ACTIVATE                        EQU 0
 = 0001			      C _DE_CLICK_BOTH_SINGLE               EQU 1
 = 0002			      C _DE_CLICK_BOTH_DOUBLE               EQU 2
 = 0003			      C _DE_CLICK_LEFT_SINGLE               EQU 3
 = 0004			      C _DE_CLICK_LEFT_DOUBLE               EQU 4
 = 0005			      C _DE_CLICK_LEFT_DOWN                 EQU 5
 = 0006			      C _DE_CLICK_LEFT_UP                   EQU 6
 = 0007			      C _DE_CLICK_RIGHT_SINGLE              EQU 7
 = 0008			      C _DE_CLICK_RIGHT_DOUBLE              EQU 8
 = 0009			      C _DE_CLICK_RIGHT_DOWN                EQU 9
 = 000A			      C _DE_CLICK_RIGHT_UP                  EQU 10
 = 000B			      C _DE_DROPPED_INTO_LEFT               EQU 11
 = 000C			      C _DE_DROPPED_INTO_RIGHT              EQU 12
 = 000D			      C _DE_DRAG_LEFT_START                 EQU 13
 = 000E			      C _DE_DRAG_LEFT_STOP                  EQU 14
 = 000F			      C _DE_DRAG_RIGHT_START                EQU 15
 = 0010			      C _DE_DRAG_RIGHT_STOP                 EQU 16
 = 0011			      C _DE_FOCUS_GOT                       EQU 17
 = 0012			      C _DE_FOCUS_LOST                      EQU 18
 = 0013			      C _DE_FOCUS_SET                       EQU 19
 = 0014			      C _DE_HOVER                           EQU 20
 = 0015			      C _DE_KEYSTROKE                       EQU 21
 = 0016			      C _DE_WHEN_CREATED                    EQU 22
 = 0017			      C _DE_WHEN_DESTROYED                  EQU 23
 = 0018			      C _DE_REQUESTOR                       EQU 24
 = 0019			      C _DE_REFRESH                         EQU 25
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _WINDOW PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 			      C _WP_ENABLED                         EQU
 = 			      C _WP_VISIBLE                         EQU
 = 			      C _WP_BORDER                          EQU
 = 			      C _WP_COLOR_DISABLEP_BACKGROUND       EQU
 = 			      C _WP_COLOR_DISABLEP_FOREGROUND       EQU
 = 			      C _WP_COLOR_DISABLEP_STYLE            EQU
 = 			      C _WP_COLOR_ENABLEP_BACKGROUND        EQU
 = 			      C _WP_COLOR_ENABLEP_FOREGROUND        EQU
 = 			      C _WP_COLOR_ENABLEP_STYLE             EQU
 = 			      C _WP_COLOR_HEADER_SELECTED_FOREGROUND EQU
 = 			      C _WP_COLOR_HEADER_SELECTED_BACKGROUND EQU
 = 			      C _WP_COLOR_HEADER_DESELECTED_BACKGROUND EQU
 = 			      C _WP_COLOR_HEADER_DESELECTED_FOREGROUND EQU
 = 			      C _WP_FONT_NAME                       EQU
 = 			      C _WP_FONT_SIZE                       EQU
 = 			      C _WP_FONT_TYPEFACE_BOLD              EQU
 = 			      C _WP_FONT_TYPEFACE_DITHER            EQU
 = 			      C _WP_FONT_TYPEFACE_ITALICS           EQU
 = 			      C _WP_FONT_TYPEFACE_REVERSE           EQU
 = 			      C _WP_FONT_TYPEFACE_STRIKETHROUGH     EQU
 = 			      C _WP_FONT_TYPEFACE_UNDERLINE         EQU
 = 			      C _WP_FONT_NAME_ID                    EQU
 = 			      C _WP_MARGIN_LEFT                     EQU
 = 			      C _WP_MARGIN_RIGHT                    EQU
 = 			      C _WP_MARGIN_TOP                      EQU
 = 			      C _WP_MARGIN_BOTTOM                   EQU
 = 			      C _WP_MISC_1                          EQU
 = 			      C _WP_MISC_2                          EQU
 = 			      C _WP_MISC_3                          EQU
 = 			      C _WP_MISC_4                          EQU
 = 			      C _WP_MOUSE_POINTER                   EQU
 = 			      C _WP_POSITION_HEIGHT                 EQU
 = 			      C _WP_POSITION_LEFT                   EQU
 = 			      C _WP_POSITION_TOP                    EQU
 = 			      C _WP_POSITION_WIDTH                  EQU
 = 			      C _WP_MISC_FLAG_1                     EQU
 = 			      C _WP_MISC_FLAG_2                     EQU
 = 			      C _WP_MISC_FLAG_3                     EQU
 = 			      C _WP_SIZEABLE                        EQU
 = 			      C _WP_WRAP_TEXT                       EQU
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _CONSOLE PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 			      C _CP_ENABLED                         EQU
 = 			      C _CP_VISIBLE                         EQU
 = 			      C _CP_BORDER                          EQU
 = 			      C _CP_COLOR_DISABLEP_BACKGROUND       EQU
 = 			      C _CP_COLOR_DISABLEP_FOREGROUND       EQU
 = 			      C _CP_COLOR_ENABLEP_BACKGROUND        EQU
 = 			      C _CP_COLOR_ENABLEP_FOREGROUND        EQU
 = 			      C _CP_COLOR_HEADER_SELECTED_FOREGROUND EQU
 = 			      C _CP_COLOR_HEADER_SELECTED_BACKGROUND EQU
 = 			      C _CP_COLOR_HEADER_DESELECTED_BACKGROUND EQU
 = 			      C _CP_COLOR_HEADER_DESELECTED_FOREGROUND EQU
 = 			      C _CP_FONT_NAME                       EQU
 = 			      C _CP_FONT_SIZE                       EQU
 = 			      C _CP_FONT_NAME_ID                    EQU
 = 			      C _CP_MISC_1                          EQU
 = 			      C _CP_MISC_2                          EQU
 = 			      C _CP_MISC_3                          EQU
 = 			      C _CP_MISC_4                          EQU
 = 			      C _CP_POSITION_LEFT                   EQU
 = 			      C _CP_POSITION_TOP                    EQU
 = 			      C _CP_WINDOW_HEIGHT                   EQU
 = 			      C _CP_WINDOW_WIDTH                    EQU
 = 			      C _CP_MISC_FLAG_1                     EQU
 = 			      C _CP_MISC_FLAG_2                     EQU
 = 			      C _CP_MISC_FLAG_3                     EQU
 = 			      C _CP_SIZEABLE                        EQU
			      C 
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _TEXT_MODE PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 			      C _TP_ENABLED                         EQU
 = 			      C _TP_MISC_1                          EQU
 = 			      C _TP_MISC_2                          EQU
 = 			      C _TP_MISC_3                          EQU
 = 			      C _TP_MISC_4                          EQU
 = 			      C _TP_HEIGHT                          EQU
 = 			      C _TP_WIDTH                           EQU
 = 			      C _TP_MISC_FLAG_1                     EQU
 = 			      C _TP_MISC_FLAG_2                     EQU
 = 			      C _TP_MISC_FLAG_3                     EQU
			      C 
			      C 
			      C 
			      C ;-----------------------------------------
			      C ;
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _HLINE PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Properties
 = 0000			      C _HLP_ENABLED                        EQU 0
 = 0001			      C _HLP_VISIBLE                        EQU 1
 = 0002			      C _HLP_BACKGROUND                     EQU 2
 = 0003			      C _HLP_MISC_1                         EQU 3
 = 0004			      C _HLP_MISC_2                         EQU 4
 = 0005			      C _HLP_MISC_3                         EQU 5
 = 0006			      C _HLP_MISC_4                         EQU 6
 = 0007			      C _HLP_MISC_FLAG_1                    EQU 7
 = 0008			      C _HLP_MISC_FLAG_2                    EQU 8
 = 0009			      C _HLP_MISC_FLAG_3                    EQU 9
			      C ; Events
 = 0000			      C _HLE_ACTIVATE                       EQU 0
 = 0001			      C _HLE_CLICK_BOTH_SINGLE              EQU 1
 = 0002			      C _HLE_CLICK_BOTH_DOUBLE              EQU 2
 = 0003			      C _HLE_CLICK_LEFT_SINGLE              EQU 3
 = 0004			      C _HLE_CLICK_LEFT_DOUBLE              EQU 4
 = 0005			      C _HLE_CLICK_LEFT_DOWN                EQU 5
 = 0006			      C _HLE_CLICK_LEFT_UP                  EQU 6
 = 0007			      C _HLE_CLICK_RIGHT_SINGLE             EQU 7
 = 0008			      C _HLE_CLICK_RIGHT_DOUBLE             EQU 8
 = 0009			      C _HLE_CLICK_RIGHT_DOWN               EQU 9
 = 000A			      C _HLE_CLICK_RIGHT_UP                 EQU 10
 = 000B			      C _HLE_DROPPED_INTO_LEFT              EQU 11
 = 000C			      C _HLE_DROPPED_INTO_RIGHT             EQU 12
 = 000D			      C _HLE_DRAG_LEFT_START                EQU 13
 = 000E			      C _HLE_DRAG_LEFT_STOP                 EQU 14
 = 000F			      C _HLE_DRAG_RIGHT_START               EQU 15
 = 0010			      C _HLE_DRAG_RIGHT_STOP                EQU 16
 = 0011			      C _HLE_FOCUS_GOT                      EQU 17
 = 0012			      C _HLE_FOCUS_LOST                     EQU 18
 = 0013			      C _HLE_FOCUS_SET                      EQU 19
 = 0014			      C _HLE_HOVER                          EQU 20
 = 0015			      C _HLE_KEYSTROKE                      EQU 21
 = 0016			      C _HLE_WHEN_CREATED                   EQU 22
 = 0017			      C _HLE_WHEN_DESTROYED                 EQU 23
 = 0018			      C _HLE_REQUESTOR                      EQU 24
 = 0019			      C _HLE_REFRESH                        EQU 25
			      C 
			      C 
			      C ;-----------------------------------------
			      C ;
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _RECTANGLE PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Properties
 = 0000			      C _RP_ENABLED                         EQU 0
 = 0001			      C _RP_VISIBLE                         EQU 1
 = 0002			      C _RP_BACKGROUND                      EQU 2
 = 0003			      C _RP_MISC_1                          EQU 3
 = 0004			      C _RP_MISC_2                          EQU 4
 = 0005			      C _RP_MISC_3                          EQU 5
 = 0006			      C _RP_MISC_4                          EQU 6
 = 0007			      C _RP_MISC_FLAG_1                     EQU 7
 = 0008			      C _RP_MISC_FLAG_2                     EQU 8
 = 0009			      C _RP_MISC_FLAG_3                     EQU 9
			      C ; Events
 = 0000			      C _RE_ACTIVATE                        EQU 0
 = 0001			      C _RE_CLICK_BOTH_SINGLE               EQU 1
 = 0002			      C _RE_CLICK_BOTH_DOUBLE               EQU 2
 = 0003			      C _RE_CLICK_LEFT_SINGLE               EQU 3
 = 0004			      C _RE_CLICK_LEFT_DOUBLE               EQU 4
 = 0005			      C _RE_CLICK_LEFT_DOWN                 EQU 5
 = 0006			      C _RE_CLICK_LEFT_UP                   EQU 6
 = 0007			      C _RE_CLICK_RIGHT_SINGLE              EQU 7
 = 0008			      C _RE_CLICK_RIGHT_DOUBLE              EQU 8
 = 0009			      C _RE_CLICK_RIGHT_DOWN                EQU 9
 = 000A			      C _RE_CLICK_RIGHT_UP                  EQU 10
 = 000B			      C _RE_DROPPED_INTO_LEFT               EQU 11
 = 000C			      C _RE_DROPPED_INTO_RIGHT              EQU 12
 = 000D			      C _RE_DRAG_LEFT_START                 EQU 13
 = 000E			      C _RE_DRAG_LEFT_STOP                  EQU 14
 = 000F			      C _RE_DRAG_RIGHT_START                EQU 15
 = 0010			      C _RE_DRAG_RIGHT_STOP                 EQU 16
 = 0011			      C _RE_FOCUS_GOT                       EQU 17
 = 0012			      C _RE_FOCUS_LOST                      EQU 18
 = 0013			      C _RE_FOCUS_SET                       EQU 19
 = 0014			      C _RE_HOVER                           EQU 20
 = 0015			      C _RE_KEYSTROKE                       EQU 21
 = 0016			      C _RE_WHEN_CREATED                    EQU 22
 = 0017			      C _RE_WHEN_DESTROYED                  EQU 23
 = 0018			      C _RE_REQUESTOR                       EQU 24
 = 0019			      C _RE_REFRESH                         EQU 25
			      C 
			      C 
			      C ;-----------------------------------------
			      C ;
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _BORDER_BOX PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Properties
 = 0000			      C _BBP_ENABLED                        EQU 0
 = 0001			      C _BBP_VISIBLE                        EQU 1
 = 0002			      C _BBP_BACKGROUND                     EQU 2
 = 0003			      C _BBP_LIGHT_BORDER                   EQU 3
 = 0004			      C _BBP_SHADOW_BORDER                  EQU 4
 = 0005			      C _BBP_MISC_1                         EQU 5
 = 0006			      C _BBP_MISC_2                         EQU 6
 = 0007			      C _BBP_MISC_3                         EQU 7
 = 0008			      C _BBP_MISC_4                         EQU 8
 = 0009			      C _BBP_MISC_FLAG_1                    EQU 9
 = 000A			      C _BBP_MISC_FLAG_2                    EQU 10
 = 000B			      C _BBP_MISC_FLAG_3                    EQU 11
			      C ; Events
 = 0000			      C _BBE_ACTIVATE                       EQU 0
 = 0001			      C _BBE_CLICK_BOTH_SINGLE              EQU 1
 = 0002			      C _BBE_CLICK_BOTH_DOUBLE              EQU 2
 = 0003			      C _BBE_CLICK_LEFT_SINGLE              EQU 3
 = 0004			      C _BBE_CLICK_LEFT_DOUBLE              EQU 4
 = 0005			      C _BBE_CLICK_LEFT_DOWN                EQU 5
 = 0006			      C _BBE_CLICK_LEFT_UP                  EQU 6
 = 0007			      C _BBE_CLICK_RIGHT_SINGLE             EQU 7
 = 0008			      C _BBE_CLICK_RIGHT_DOUBLE             EQU 8
 = 0009			      C _BBE_CLICK_RIGHT_DOWN               EQU 9
 = 000A			      C _BBE_CLICK_RIGHT_UP                 EQU 10
 = 000B			      C _BBE_DROPPED_INTO_LEFT              EQU 11
 = 000C			      C _BBE_DROPPED_INTO_RIGHT             EQU 12
 = 000D			      C _BBE_DRAG_LEFT_START                EQU 13
 = 000E			      C _BBE_DRAG_LEFT_STOP                 EQU 14
 = 000F			      C _BBE_DRAG_RIGHT_START               EQU 15
 = 0010			      C _BBE_DRAG_RIGHT_STOP                EQU 16
 = 0011			      C _BBE_FOCUS_GOT                      EQU 17
 = 0012			      C _BBE_FOCUS_LOST                     EQU 18
 = 0013			      C _BBE_FOCUS_SET                      EQU 19
 = 0014			      C _BBE_HOVER                          EQU 20
 = 0015			      C _BBE_KEYSTROKE                      EQU 21
 = 0016			      C _BBE_WHEN_CREATED                   EQU 22
 = 0017			      C _BBE_WHEN_DESTROYED                 EQU 23
 = 0018			      C _BBE_REQUESTOR                      EQU 24
 = 0019			      C _BBE_REFRESH                        EQU 25
			      C 
			      C 
			      C ;-----------------------------------------
			      C ;
			      C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; ³ _TEXT_FIELD PARAMETERS ³
			      C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			      C ; Properties
 = 0000			      C _TFP_ENABLED                        EQU 0
 = 0001			      C _TFP_VISIBLE                        EQU 1
 = 0002			      C _TFP_BORDER                         EQU 2
 = 0003			      C _TFP_ALIGNMENT                      EQU 3
 = 0004			      C _TFP_AUTO_SIZE                      EQU 4
 = 0005			      C _TFP_COLOR_BACKGROUND               EQU 5
 = 0006			      C _TFP_COLOR_FOREGROUND               EQU 6
 = 0007			      C _TFP_COLOR_SELECTED_BACKGROUND      EQU 7
 = 0008			      C _TFP_COLOR_SELECTED_FOREGROUND      EQU 8
 = 0009			      C _TFP_SOURCE_PTR                     EQU 9
 = 000A			      C _TFP_FONT_NAME                      EQU 10
 = 000B			      C _TFP_FONT_SIZE                      EQU 11
 = 000C			      C _TFP_FONT_TYPEFACE_BOLD             EQU 12
 = 000D			      C _TFP_FONT_TYPEFACE_DITHER           EQU 13
 = 000E			      C _TFP_FONT_TYPEFACE_ITALICS          EQU 14
 = 000F			      C _TFP_FONT_TYPEFACE_REVERSE          EQU 15
 = 0010			      C _TFP_FONT_TYPEFACE_STRIKETHROUGH    EQU 16
 = 0011			      C _TFP_FONT_TYPEFACE_UNDERLINE        EQU 17
 = 0012			      C _TFP_FONT_NAME_ID                   EQU 18
 = 0013			      C _TFP_MARGIN_LEFT                    EQU 19
 = 0014			      C _TFP_MARGIN_TOP                     EQU 20
 = 0015			      C _TFP_SELECTED_TEXT_START            EQU 21
 = 0016			      C _TFP_SELECTED_TEXT_END              EQU 22
 = 0017			      C _TFP_MISC_1                         EQU 23
 = 0018			      C _TFP_MISC_2                         EQU 24
 = 0019			      C _TFP_MISC_3                         EQU 25
 = 001A			      C _TFP_MISC_4                         EQU 26
 = 001B			      C _TFP_MISC_FLAG_1                    EQU 27
 = 001C			      C _TFP_MISC_FLAG_2                    EQU 28
 = 001D			      C _TFP_MISC_FLAG_3                    EQU 29
			      C ; Events
 = 0000			      C _TFE_ACTIVATE                       EQU 0
 = 0001			      C _TFE_CLICK_BOTH_SINGLE              EQU 1
 = 0002			      C _TFE_CLICK_BOTH_DOUBLE              EQU 2
 = 0003			      C _TFE_CLICK_LEFT_SINGLE              EQU 3
 = 0004			      C _TFE_CLICK_LEFT_DOUBLE              EQU 4
 = 0005			      C _TFE_CLICK_LEFT_DOWN                EQU 5
 = 0006			      C _TFE_CLICK_LEFT_UP                  EQU 6
 = 0007			      C _TFE_CLICK_RIGHT_SINGLE             EQU 7
 = 0008			      C _TFE_CLICK_RIGHT_DOUBLE             EQU 8
 = 0009			      C _TFE_CLICK_RIGHT_DOWN               EQU 9
 = 000A			      C _TFE_CLICK_RIGHT_UP                 EQU 10
 = 000B			      C _TFE_DROPPED_INTO_LEFT              EQU 11
 = 000C			      C _TFE_DROPPED_INTO_RIGHT             EQU 12
 = 000D			      C _TFE_DRAG_LEFT_START                EQU 13
 = 000E			      C _TFE_DRAG_LEFT_STOP                 EQU 14
 = 000F			      C _TFE_DRAG_RIGHT_START               EQU 15
 = 0010			      C _TFE_DRAG_RIGHT_STOP                EQU 16
 = 0011			      C _TFE_FOCUS_GOT                      EQU 17
 = 0012			      C _TFE_FOCUS_LOST                     EQU 18
 = 0013			      C _TFE_FOCUS_SET                      EQU 19
 = 0014			      C _TFE_HOVER                          EQU 20
 = 0015			      C _TFE_KEYSTROKE                      EQU 21
 = 0016			      C _TFE_WHEN_CREATED                   EQU 22
 = 0017			      C _TFE_WHEN_DESTROYED                 EQU 23
 = 0018			      C _TFE_REQUESTOR                      EQU 24
 = 0019			      C _TFE_REFRESH                        EQU 25
			      C 
				INCLUDE bios_eq.asp
			      C ; bios_eq.asp
			      C ;
			      C ; Exodus BIOS functionality constant equates
			      C ;
			      C 
			      C 
			      C ; PIC register access (programmable interrupt controller)
 = 0020			      C _PIC_20h                        EQU 20h                             ; input  = 8259-1 read interrupt request/service registers
			      C                                                                     ; output = 8259-1 interrupt command
 = 0021			      C _PIC_21h                        EQU 21h                             ; input  = 8259-1 interrupt mask register
			      C                                                                     ; output = 8259-1 interrupt commands
 = 0070			      C _PIC_70h                        EQU 70h                             ; output = 8259-1 NMI enable (output only)
 = 00A0			      C _PIC_A0h                        EQU 0a0h                            ; input  = 8259-2 read interrupt request / service registers
			      C                                                                     ; output = 8259-2 interrupt command
			      C                                                                     ; output = 8259-2 NMI control
 = 00A1			      C _PIC_A1h                        EQU 0a1h                            ; input  = 8259-2 interrupt mask register
			      C                                                                     ; output = 8259-2 interrupt commands
			      C 
			      C 
			      C ; PIT register access (8254 programmable interrupt timer)
 = 001234DD		      C _PIT_FREQUENCY                  EQU 1193181 ; Equivelent to 1.1931816666667MHz (or the 3.549545MHz chroma crystal / 3)
 = 0040			      C _PIT_0_BASE                     EQU 40h     ; Timer 0
 = 0041			      C _PIT_1_BASE                     EQU 41h     ; Timer 1
 = 0042			      C _PIT_2_BASE                     EQU 42h     ; Timer 2
 = 0043			      C _PIT_MODE                       EQU 43h     ; Mode control for timer's 0-2
			      C 
				INCLUDE task_eq.asp
			      C ; task_eq.asp
			      C ;
			      C ; Exodus Task System constant equates
			      C ;
			      C ;
			      C 
			      C ; Task header constants
 = 0000			      C _TASK_SYSTEM_NEXT_OFFSET            EQU 0                           ; dword, The next offset within the _sTASK_SYSTEM selector
 = 0004			      C _TASK_SYSTEM_NEXT_HANDLE            EQU 4                           ; word,  Next handle to use (incremented each task)
 = 0006			      C _TASK_SYSTEM_CURRENT_TASK_TSS       EQU 6                           ; word,  Currently executing TSS
 = 0008			      C _TASK_SYSTEM_CURRENT_TASK_OFFSET    EQU 8                           ; dword, Currently executing task offset (in _sTASK_SYSTEM)
 = 000C			      C _TASK_SYSTEM_TOTAL_ENTRIES_BASE_0   EQU 12                          ; dword, stored as base-0 (so 0 actually means 1)
 = 0010			      C _TASK_SYSTEM_FOCUS_TASK_OFFSET      EQU 16                          ; dword, task that has focus
			      C 
			      C 
			      C 
 = 0040			      C _FIRST_TASK_ENTRY                   EQU 64                          ; Offset where the first task record is
			      C ; Task structure constants
 = 0000			      C _TASK_ENTRY_HANDLE                  EQU 0
 = 0002			      C _TASK_ENTRY_GDT_TSS                 EQU 2
 = 0004			      C _TASK_ENTRY_GDT_LDT                 EQU 4
 = 0006			      C _TASK_ENTRY_SELECTOR_OBJECTS        EQU 6
 = 0008			      C _TASK_ENTRY_FOCUS_BO                EQU 8
 = 000C			      C _TASK_ENTRY_FOCUS_O                 EQU 12
 = 0010			      C _TASK_ENTRY_TICKS                   EQU 16
 = 0011			      C _TASK_ENTRY_MODE                    EQU 17
 = 0012			      C _TASK_ENTRY_USES_FPU                EQU 18
 = 0014			      C _TASK_ENTRY_TSS_LINEAR_OFFSET       EQU 20
 = 0018			      C _TASK_ENTRY_TICKS_LEFT              EQU 24
			      C 
			      C ;;----------
			      C ;; * NOTE *
			      C ;;
 = 0040			      C _TASK_ENTRY_LENGTH                  EQU 64
			      C ;; * NOTE *  If this value changes, the algorithm in invTASK_switch_task() [bios\tasks.asp] must be changed as well.
			      C ;;           Presently it uses a SHR x,6 to divide by 64.  If the number changes it must be put into a DIV instruction
			      C ;;----------
			      C 
			      C 
			      C 
			      C ; Constants used for set-bit meanings
			      C ; Refer to INF\TASK.INF for more information
 = 0080			      C _SUSPENDED                          EQU 10000000b
 = 0040			      C _IDLE                               EQU  1000000b
 = 0020			      C _READ_EVENTS                        EQU   100000b
 = 0002			      C _SLAVE                              EQU       10b
 = 0001			      C _LINEAR                             EQU        1b
			      C 
			      C 
			      C ; Constants used for mouse events and task scheduling
 = 0000			      C _LEFT_SINGLE_CLICK          EQU 0
 = 0001			      C _LEFT_DOUBLE_CLICK          EQU 1
 = 0002			      C _LEFT_DRAG_START            EQU 2
 = 0003			      C _LEFT_DRAG_STOP             EQU 3
 = 0004			      C _RIGHT_SINGLE_CLICK         EQU 4
 = 0005			      C _RIGHT_DOUBLE_CLICK         EQU 5
 = 0006			      C _RIGHT_DRAG_START           EQU 6
 = 0007			      C _RIGHT_DRAG_STOP            EQU 7
 = 0008			      C _BOTH_SINGLE_CLICK          EQU 8
 = 0009			      C _BOTH_DOUBLE_CLICK          EQU 9
 = 000A			      C _HOVER                      EQU 10
 = 000B			      C _ABANDON_IF_NOT             EQU 11
 = 000C			      C _ANY_CLICK                  EQU 12
 = 000D			      C _IMMEDIATE                  EQU 13
			      C 
				INCLUDE obj_eq.asp
			      C ; obj_eq.asp
			      C ;
			      C ; Exodus Object System constant equates
			      C ;
			      C ;  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ;  ´-=-=-=- NOTE! -=-=-=-³
			      C ;  ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÙ
			      C ;   Any changes made to this program need to be applied to COMMON\OBJ_MAC.ASP
			      C ;
			      C ; Base Objects:
			      C ;   _DESKTOP
			      C ;
			      C ; Objects:
			      C ;   _TEXT_FIELD
			      C ;   _HLINE
			      C ;   _RECTANGLE
			      C ;   _BORDER_BOX
			      C ;
			      C 
			      C 
			      C 
			      C ; Object header constants
 = 0000			      C _OBJECT_HEADER_NEXT_OBJECT          EQU 0
 = 0004			      C _OBJECT_HEADER_FIRST_BASE_OBJECT    EQU 4
 = 0008			      C _OBJECT_HEADER_FIRST_OBJECT         EQU 8
 = 0010			      C _FIRST_OBJECT                       EQU 16                          ; Offset where the first object records are
			      C 
			      C 
			      C 
			      C ; Object structure constants (offsets to obtain these variablse within the structures)
			      C ; Common to all:
 = 0000			      C _OBJECT_NEXT_BASE_OBJECT        EQU 0
 = 0004			      C _BASE_OBJECT_TYPE               EQU 4                               ; These two are the same thing, just different names for
 = 0004			      C _OBJECT_TYPE                    EQU 4                               ;  whatever use they're associated with
 = 0008			      C _OBJECT_FIRST_OBJECT            EQU 8                               ; Used on base objects for first object
 = 0008			      C _OBJECT_NEXT_OBJECT             EQU 8                               ; Used on objects to point to the next object
 = 000C			      C _OBJECT_FIXED_LENGTH            EQU 12
			      C 
 = 000C			      C _BO_TOP                         EQU 12
 = 0010			      C _BO_LEFT                        EQU 16
 = 0100			      C _BO_LENGTH                      EQU 256
 = 0100			      C _O_LENGTH                       EQU 256
			      C 
			      C ; _GROUPING
 = 			      C _BO_G_                          EQU
			      C 
			      C 
			      C ; _DESKTOP
			      C ; This structure represents how this object is stored within this task's OBJECT structure area
			      C ; Properties
 = 000C			      C _BO_D_TOP                       EQU 12
 = 0010			      C _BO_D_LEFT                      EQU 16
 = 0014			      C _BO_D_WIDTH                     EQU 20
 = 0018			      C _BO_D_HEIGHT                    EQU 24
 = 001C			      C _BO_D_ENABLED                   EQU 28
 = 001D			      C _BO_D_VISIBLE                   EQU 29
 = 001E			      C _BO_D_BACKGROUND                EQU 30
 = 0021			      C _BO_D_ICON_HORIZONTAL           EQU 33
 = 0022			      C _BO_D_ICON_VERTICAL             EQU 34
 = 0023			      C _BO_D_MENU_POSITION             EQU 35
 = 0024			      C _BO_D_MENU_HEIGHT               EQU 36
 = 0026			      C _BO_D_WALLPAPER                 EQU 38
 = 0028			      C _BO_D_MISC_1                    EQU 40
 = 002C			      C _BO_D_MISC_2                    EQU 44
 = 0030			      C _BO_D_MISC_3                    EQU 48
 = 0034			      C _BO_D_MISC_4                    EQU 52
 = 0038			      C _BO_D_MISC_FLAG_1               EQU 56
 = 0039			      C _BO_D_MISC_FLAG_2               EQU 57
 = 003A			      C _BO_D_MISC_FLAG_3               EQU 58
 = 003B			      C _BO_D_MENU_AUTOHIDE             EQU 59
			      C ; Events
 = 0080			      C _BO_D_ACTIVATE                  EQU 128
 = 0084			      C _BO_D_CLICK_BOTH_SINGLE         EQU 132
 = 0088			      C _BO_D_CLICK_BOTH_DOUBLE         EQU 136
 = 008C			      C _BO_D_CLICK_LEFT_SINGLE         EQU 140
 = 0090			      C _BO_D_CLICK_LEFT_DOUBLE         EQU 144
 = 0094			      C _BO_D_CLICK_LEFT_DOWN           EQU 148
 = 0098			      C _BO_D_CLICK_LEFT_UP             EQU 152
 = 009C			      C _BO_D_CLICK_RIGHT_SINGLE        EQU 156
 = 00A0			      C _BO_D_CLICK_RIGHT_DOUBLE        EQU 160
 = 00A4			      C _BO_D_CLICK_RIGHT_DOWN          EQU 164
 = 00A8			      C _BO_D_CLICK_RIGHT_UP            EQU 168
 = 00AC			      C _BO_D_DROPPED_INTO_LEFT         EQU 172
 = 00B0			      C _BO_D_DROPPED_INTO_RIGHT        EQU 176
 = 00B4			      C _BO_D_DRAG_LEFT_START           EQU 180
 = 00B8			      C _BO_D_DRAG_LEFT_STOP            EQU 184
 = 00BC			      C _BO_D_DRAG_RIGHT_START          EQU 188
 = 00C0			      C _BO_D_DRAG_RIGHT_STOP           EQU 192
 = 00C4			      C _BO_D_FOCUS_GOT                 EQU 196
 = 00C8			      C _BO_D_FOCUS_LOST                EQU 200
 = 00CC			      C _BO_D_FOCUS_SET                 EQU 204
 = 00D0			      C _BO_D_HOVER                     EQU 208
 = 00D4			      C _BO_D_KEYSTROKE                 EQU 212
 = 00D8			      C _BO_D_WHEN_CREATED              EQU 216
 = 00DC			      C _BO_D_WHEN_DESTROYED            EQU 220
 = 00E0			      C _BO_D_REQUESTOR                 EQU 224
 = 00E4			      C _BO_D_REFRESH                   EQU 228
			      C ; Input data structures
 = 0000			      C _BO_LD_TYPE                     EQU 0
 = 0001			      C _BO_LD_TOP                      EQU 1
 = 0005			      C _BO_LD_LEFT                     EQU 5
 = 0009			      C _BO_LD_WIDTH                    EQU 9
 = 000D			      C _BO_LD_HEIGHT                   EQU 13
 = 0011			      C _BO_LD_LENGTH                   EQU 17
			      C ; Properties
 = 0001			      C _BO_LD_ENABLED                  EQU 1
 = 0001			      C _BO_LD_VISIBLE                  EQU 1
 = 0001			      C _BO_LD_BACKGROUND_RED           EQU 1
 = 0002			      C _BO_LD_BACKGROUND_GREEN         EQU 2
 = 0003			      C _BO_LD_BACKGROUND_BLUE          EQU 3
 = 0001			      C _BO_LD_ICON_HORIZONTAL          EQU 1
 = 0001			      C _BO_LD_ICON_VERTICAL            EQU 1
 = 0001			      C _BO_LD_MENU_POSITION            EQU 1
 = 0001			      C _BO_LD_MENU_HEIGHT              EQU 1
 = 0001			      C _BO_LD_MENU_AUTOHIDE            EQU 1
 = 0001			      C _BO_LD_MISC_1                   EQU 1
 = 0001			      C _BO_LD_MISC_2                   EQU 1
 = 0001			      C _BO_LD_MISC_3                   EQU 1
 = 0001			      C _BO_LD_MISC_4                   EQU 1
 = 0001			      C _BO_LD_MISC_FLAG_1              EQU 1
 = 0001			      C _BO_LD_MISC_FLAG_2              EQU 1
 = 0001			      C _BO_LD_MISC_FLAG_3              EQU 1
 = 0001			      C _BO_LD_WALLPAPER                EQU 1
			      C ; Sizes
 = 0002			      C _BO_LD_ENABLED_SIZE             EQU 2
 = 0002			      C _BO_LD_VISIBLE_SIZE             EQU 2
 = 0004			      C _BO_LD_BACKGROUND_SIZE          EQU 4
 = 0002			      C _BO_LD_ICON_HORIZONTAL_SIZE     EQU 2
 = 0002			      C _BO_LD_ICON_VERTICAL_SIZE       EQU 2
 = 0002			      C _BO_LD_MENU_POSITION_SIZE       EQU 2
 = 0002			      C _BO_LD_MENU_HEIGHT_SIZE         EQU 2
 = 0002			      C _BO_LD_MENU_AUTOHIDE_SIZE       EQU 2
 = 0005			      C _BO_LD_MISC_1_SIZE              EQU 5
 = 0005			      C _BO_LD_MISC_2_SIZE              EQU 5
 = 0005			      C _BO_LD_MISC_3_SIZE              EQU 5
 = 0005			      C _BO_LD_MISC_4_SIZE              EQU 5
 = 0002			      C _BO_LD_MISC_FLAG_1_SIZE         EQU 2
 = 0002			      C _BO_LD_MISC_FLAG_2_SIZE         EQU 2
 = 0002			      C _BO_LD_MISC_FLAG_3_SIZE         EQU 2
 = 0005			      C _BO_LD_WALLPAPER_SIZE           EQU 5
			      C 
			      C 
			      C ; _WINDOW
 = 			      C _BO_W_                          EQU
			      C 
			      C 
			      C ; _CONSOLE
 = 			      C _BO_C_                          EQU
			      C 
			      C 
			      C ; _TEXT_MODE
 = 			      C _BO_T_                          EQU
			      C 
			      C 
			      C ; _MONO_DESKTOP
 = 			      C _BO_MD_                         EQU
			      C 
			      C 
			      C ; _MONO_WINDOW
 = 			      C _BO_MW_                         EQU
			      C 
			      C 
			      C ; _MONO_CONSOLE
 = 			      C _BO_MC_                         EQU
			      C 
			      C 
			      C ; _MONO_TEXT_MODE
 = 			      C _BO_MT_                         EQU
			      C 
			      C 
			      C 
			      C ;----------------------------------------
			      C ; Objects
			      C ;----------------------------------------
			      C 
			      C ; _TEXT_FIELD
			      C ; Properties
 = 000C			      C _O_TF_TOP                       EQU 12
 = 0010			      C _O_TF_LEFT                      EQU 16
 = 0014			      C _O_TF_WIDTH                     EQU 20
 = 0018			      C _O_TF_HEIGHT                    EQU 24
 = 001C			      C _O_TF_BORDER                    EQU 28
 = 001D			      C _O_TF_ALIGNMENT                 EQU 29
 = 001E			      C _O_TF_AUTO_SIZE                 EQU 30
 = 001F			      C _O_TF_BACKGROUND                EQU 31
 = 0022			      C _O_TF_FOREGROUND                EQU 34
 = 			      C _O_TF_COLOR_SELECTED_BACKGROUND EQU
 = 			      C _O_TF_COLOR_SELECTED_FOREGROUND EQU
 = 0025			      C _O_TF_ENABLED                   EQU 37
 = 0028			      C _O_TF_SOURCE_PTR_SEGMENT        EQU 40
 = 002C			      C _O_TF_SOURCE_PTR_OFFSET         EQU 44
 = 0030			      C _O_TF_FONT_NAME                 EQU 48
 = 0034			      C _O_TF_FONT_SIZE                 EQU 52
 = 0035			      C _O_TF_FONT_TYPEFACE_BOLD        EQU 53
 = 0036			      C _O_TF_FONT_TYPEFACE_DITHER      EQU 54
 = 0037			      C _O_TF_FONT_TYPEFACE_ITALICS     EQU 55
 = 0038			      C _O_TF_FONT_TYPEFACE_REVERSE     EQU 56
 = 0039			      C _O_TF_FONT_TYPEFACE_STRIKETHROUGH EQU 57
 = 003A			      C _O_TF_FONT_TYPEFACE_UNDERLINE   EQU 58
 = 003B			      C _O_TF_VISIBLE                   EQU 59
 = 003C			      C _O_TF_FONT_NAME_ID              EQU 60
 = 0040			      C _O_TF_MARGIN_LEFT               EQU 64
 = 0042			      C _O_TF_MARGIN_TOP                EQU 66
 = 			      C _O_TF_SELECTED_TEXT_START       EQU
 = 			      C _O_TF_SELECTED_TEXT_END         EQU
 = 0044			      C _O_TF_MISC_1                    EQU 68
 = 0048			      C _O_TF_MISC_2                    EQU 72
 = 004C			      C _O_TF_MISC_3                    EQU 76
 = 0050			      C _O_TF_MISC_4                    EQU 80
 = 0054			      C _O_TF_MISC_FLAG_1               EQU 84
 = 0055			      C _O_TF_MISC_FLAG_2               EQU 85
 = 0056			      C _O_TF_MISC_FLAG_3               EQU 86
			      C ; Events
 = 0080			      C _O_TF_ACTIVATE                  EQU 128
 = 0084			      C _O_TF_CLICK_BOTH_SINGLE         EQU 132
 = 0088			      C _O_TF_CLICK_BOTH_DOUBLE         EQU 136
 = 008C			      C _O_TF_CLICK_LEFT_SINGLE         EQU 140
 = 0090			      C _O_TF_CLICK_LEFT_DOUBLE         EQU 144
 = 0094			      C _O_TF_CLICK_LEFT_DOWN           EQU 148
 = 0098			      C _O_TF_CLICK_LEFT_UP             EQU 152
 = 009C			      C _O_TF_CLICK_RIGHT_SINGLE        EQU 156
 = 00A0			      C _O_TF_CLICK_RIGHT_DOUBLE        EQU 160
 = 00A4			      C _O_TF_CLICK_RIGHT_DOWN          EQU 164
 = 00A8			      C _O_TF_CLICK_RIGHT_UP            EQU 168
 = 00AC			      C _O_TF_DROPPED_INTO_LEFT         EQU 172
 = 00B0			      C _O_TF_DROPPED_INTO_RIGHT        EQU 176
 = 00B4			      C _O_TF_DRAG_LEFT_START           EQU 180
 = 00B8			      C _O_TF_DRAG_LEFT_STOP            EQU 184
 = 00BC			      C _O_TF_DRAG_RIGHT_START          EQU 188
 = 00C0			      C _O_TF_DRAG_RIGHT_STOP           EQU 192
 = 00C4			      C _O_TF_FOCUS_GOT                 EQU 196
 = 00C8			      C _O_TF_FOCUS_LOST                EQU 200
 = 00CC			      C _O_TF_FOCUS_SET                 EQU 204
 = 00D0			      C _O_TF_HOVER                     EQU 208
 = 00D4			      C _O_TF_KEYSTROKE                 EQU 212
 = 00D8			      C _O_TF_WHEN_CREATED              EQU 216
 = 00DC			      C _O_TF_WHEN_DESTROYED            EQU 220
 = 00E0			      C _O_TF_REQUESTOR                 EQU 224
 = 00E4			      C _O_TF_REFRESH                   EQU 228
			      C ; Input data structures
 = 0000			      C _O_LTF_TYPE                     EQU 0
 = 0001			      C _O_LTF_TOP                      EQU 1
 = 0005			      C _O_LTF_LEFT                     EQU 5
 = 0009			      C _O_LTF_WIDTH                    EQU 9
 = 000D			      C _O_LTF_HEIGHT                   EQU 13
 = 0011			      C _O_LTF_LENGTH                   EQU 17
			      C ; Properties
 = 0001			      C _O_LTF_ENABLED                  EQU 1
 = 0001			      C _O_LTF_VISIBLE                  EQU 1
 = 0001			      C _O_LTF_BORDER                   EQU 1
 = 0001			      C _O_LTF_ALIGNMENT                EQU 1
 = 0001			      C _O_LTF_AUTO_SIZE                EQU 1
 = 0001			      C _O_LTF_BACKGROUND_RED           EQU 1
 = 0002			      C _O_LTF_BACKGROUND_GREEN         EQU 2
 = 0003			      C _O_LTF_BACKGROUND_BLUE          EQU 3
 = 0001			      C _O_LTF_FOREGROUND_RED           EQU 1
 = 0002			      C _O_LTF_FOREGROUND_GREEN         EQU 2
 = 0003			      C _O_LTF_FOREGROUND_BLUE          EQU 3
 = 0001			      C _O_LTF_SOURCE_PTR_SEGMENT       EQU 1
 = 0003			      C _O_LTF_SOURCE_PTR_OFFSET        EQU 3
 = 0001			      C _O_LTF_FONT_NAME                EQU 1
 = 0001			      C _O_LTF_FONT_SIZE                EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_BOLD       EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_DITHER     EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_ITALICS    EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_REVERSE    EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_STRIKETHROUGH EQU 1
 = 0001			      C _O_LTF_FONT_TYPEFACE_UNDERLINE  EQU 1
 = 0001			      C _O_LTF_FONT_NAME_ID             EQU 1
 = 0001			      C _O_LTF_MARGIN_LEFT              EQU 1
 = 0001			      C _O_LTF_MARGIN_TOP               EQU 1
 = 0001			      C _O_LTF_MISC_1                   EQU 1
 = 0001			      C _O_LTF_MISC_2                   EQU 1
 = 0001			      C _O_LTF_MISC_3                   EQU 1
 = 0001			      C _O_LTF_MISC_4                   EQU 1
 = 0001			      C _O_LTF_MISC_FLAG_1              EQU 1
 = 0001			      C _O_LTF_MISC_FLAG_2              EQU 1
 = 0001			      C _O_LTF_MISC_FLAG_3              EQU 1
			      C ; Sizes
 = 0002			      C _O_LTF_ENABLED_SIZE             EQU 2
 = 0002			      C _O_LTF_VISIBLE_SIZE             EQU 2
 = 0002			      C _O_LTF_BORDER_SIZE              EQU 2
 = 0002			      C _O_LTF_ALIGNMENT_SIZE           EQU 2
 = 0002			      C _O_LTF_AUTO_SIZE_SIZE           EQU 2
 = 0004			      C _O_LTF_BACKGROUND_SIZE          EQU 4
 = 0004			      C _O_LTF_FOREGROUND_SIZE          EQU 4
 = 0007			      C _O_LTF_SOURCE_PTR_SIZE          EQU 7
 = 0005			      C _O_LTF_FONT_NAME_SIZE           EQU 5
 = 0002			      C _O_LTF_FONT_SIZE_SIZE           EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_BOLD_SIZE  EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_DITHER_SIZE EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_ITALICS_SIZE EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_REVERSE_SIZE EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_STRIKETHROUGH_SIZE EQU 2
 = 0002			      C _O_LTF_FONT_TYPEFACE_UNDERLINE_SIZE EQU 2
 = 0005			      C _O_LTF_FONT_NAME_ID_SIZE        EQU 5
 = 0003			      C _O_LTF_MARGIN_LEFT_SIZE         EQU 3
 = 0003			      C _O_LTF_MARGIN_TOP_SIZE          EQU 3
 = 0005			      C _O_LTF_MISC_1_SIZE              EQU 5
 = 0005			      C _O_LTF_MISC_2_SIZE              EQU 5
 = 0005			      C _O_LTF_MISC_3_SIZE              EQU 5
 = 0005			      C _O_LTF_MISC_4_SIZE              EQU 5
 = 0002			      C _O_LTF_MISC_FLAG_1_SIZE         EQU 2
 = 0002			      C _O_LTF_MISC_FLAG_2_SIZE         EQU 2
 = 0002			      C _O_LTF_MISC_FLAG_3_SIZE         EQU 2
			      C 
			      C ; _HLINE
			      C ; Properties
 = 000C			      C _O_HL_TOP                       EQU 12
 = 0010			      C _O_HL_LEFT                      EQU 16
 = 0014			      C _O_HL_WIDTH                     EQU 20
 = 0018			      C _O_HL_BACKGROUND                EQU 24
 = 001B			      C _O_HL_ENABLED                   EQU 27
 = 001C			      C _O_HL_MISC_1                    EQU 28
 = 0020			      C _O_HL_MISC_2                    EQU 32
 = 0024			      C _O_HL_MISC_3                    EQU 36
 = 0028			      C _O_HL_MISC_4                    EQU 40
 = 002C			      C _O_HL_MISC_FLAG_1               EQU 44
 = 002D			      C _O_HL_MISC_FLAG_2               EQU 45
 = 002E			      C _O_HL_MISC_FLAG_3               EQU 46
 = 002F			      C _O_HL_VISIBLE                   EQU 47
			      C ; Events
 = 0080			      C _O_HL_ACTIVATE                  EQU 128
 = 0084			      C _O_HL_CLICK_BOTH_SINGLE         EQU 132
 = 0088			      C _O_HL_CLICK_BOTH_DOUBLE         EQU 136
 = 008C			      C _O_HL_CLICK_LEFT_SINGLE         EQU 140
 = 0090			      C _O_HL_CLICK_LEFT_DOUBLE         EQU 144
 = 0094			      C _O_HL_CLICK_LEFT_DOWN           EQU 148
 = 0098			      C _O_HL_CLICK_LEFT_UP             EQU 152
 = 009C			      C _O_HL_CLICK_RIGHT_SINGLE        EQU 156
 = 00A0			      C _O_HL_CLICK_RIGHT_DOUBLE        EQU 160
 = 00A4			      C _O_HL_CLICK_RIGHT_DOWN          EQU 164
 = 00A8			      C _O_HL_CLICK_RIGHT_UP            EQU 168
 = 00AC			      C _O_HL_DROPPED_INTO_LEFT         EQU 172
 = 00B0			      C _O_HL_DROPPED_INTO_RIGHT        EQU 176
 = 00B4			      C _O_HL_DRAG_LEFT_START           EQU 180
 = 00B8			      C _O_HL_DRAG_LEFT_STOP            EQU 184
 = 00BC			      C _O_HL_DRAG_RIGHT_START          EQU 188
 = 00C0			      C _O_HL_DRAG_RIGHT_STOP           EQU 192
 = 00C4			      C _O_HL_FOCUS_GOT                 EQU 196
 = 00C8			      C _O_HL_FOCUS_LOST                EQU 200
 = 00CC			      C _O_HL_FOCUS_SET                 EQU 204
 = 00D0			      C _O_HL_HOVER                     EQU 208
 = 00D4			      C _O_HL_KEYSTROKE                 EQU 212
 = 00D8			      C _O_HL_WHEN_CREATED              EQU 216
 = 00DC			      C _O_HL_WHEN_DESTROYED            EQU 220
 = 00E0			      C _O_HL_REQUESTOR                 EQU 224
 = 00E4			      C _O_HL_REFRESH                   EQU 228
			      C ; Input data structures
 = 0000			      C _O_LHL_TYPE                     EQU 0
 = 0001			      C _O_LHL_TOP                      EQU 1
 = 0005			      C _O_LHL_LEFT                     EQU 5
 = 0009			      C _O_LHL_WIDTH                    EQU 9
 = 000D			      C _O_LHL_LENGTH                   EQU 13
			      C ; Properties
 = 0001			      C _O_LHL_ENABLED                  EQU 1
 = 0001			      C _O_LHL_VISIBLE                  EQU 1
 = 0001			      C _O_LHL_BACKGROUND_RED           EQU 1
 = 0002			      C _O_LHL_BACKGROUND_GREEN         EQU 2
 = 0003			      C _O_LHL_BACKGROUND_BLUE          EQU 3
 = 0001			      C _O_LHL_MISC_1                   EQU 1
 = 0001			      C _O_LHL_MISC_2                   EQU 1
 = 0001			      C _O_LHL_MISC_3                   EQU 1
 = 0001			      C _O_LHL_MISC_4                   EQU 1
 = 0001			      C _O_LHL_MISC_FLAG_1              EQU 1
 = 0001			      C _O_LHL_MISC_FLAG_2              EQU 1
 = 0001			      C _O_LHL_MISC_FLAG_3              EQU 1
			      C ; Sizes
 = 0002			      C _O_LHL_ENABLED_SIZE             EQU 2
 = 0002			      C _O_LHL_VISIBLE_SIZE             EQU 2
 = 0004			      C _O_LHL_BACKGROUND_SIZE          EQU 4
 = 0005			      C _O_LHL_MISC_1_SIZE              EQU 5
 = 0005			      C _O_LHL_MISC_2_SIZE              EQU 5
 = 0005			      C _O_LHL_MISC_3_SIZE              EQU 5
 = 0005			      C _O_LHL_MISC_4_SIZE              EQU 5
 = 0002			      C _O_LHL_MISC_FLAG_1_SIZE         EQU 2
 = 0002			      C _O_LHL_MISC_FLAG_2_SIZE         EQU 2
 = 0002			      C _O_LHL_MISC_FLAG_3_SIZE         EQU 2
			      C 
			      C 
			      C ; _RECTANGLE
			      C ; Properties
 = 000C			      C _O_R_TOP                        EQU 12
 = 0010			      C _O_R_LEFT                       EQU 16
 = 0014			      C _O_R_WIDTH                      EQU 20
 = 0018			      C _O_R_HEIGHT                     EQU 24
 = 001C			      C _O_R_BACKGROUND                 EQU 28
 = 001F			      C _O_R_ENABLED                    EQU 31
 = 0020			      C _O_R_MISC_1                     EQU 32
 = 0024			      C _O_R_MISC_2                     EQU 36
 = 0028			      C _O_R_MISC_3                     EQU 40
 = 002C			      C _O_R_MISC_4                     EQU 44
 = 0030			      C _O_R_MISC_FLAG_1                EQU 48
 = 0031			      C _O_R_MISC_FLAG_2                EQU 49
 = 0032			      C _O_R_MISC_FLAG_3                EQU 50
 = 0033			      C _O_R_VISIBLE                    EQU 51
			      C ; Events
 = 0080			      C _O_R_ACTIVATE                   EQU 128
 = 0084			      C _O_R_CLICK_BOTH_SINGLE          EQU 132
 = 0088			      C _O_R_CLICK_BOTH_DOUBLE          EQU 136
 = 008C			      C _O_R_CLICK_LEFT_SINGLE          EQU 140
 = 0090			      C _O_R_CLICK_LEFT_DOUBLE          EQU 144
 = 0094			      C _O_R_CLICK_LEFT_DOWN            EQU 148
 = 0098			      C _O_R_CLICK_LEFT_UP              EQU 152
 = 009C			      C _O_R_CLICK_RIGHT_SINGLE         EQU 156
 = 00A0			      C _O_R_CLICK_RIGHT_DOUBLE         EQU 160
 = 00A4			      C _O_R_CLICK_RIGHT_DOWN           EQU 164
 = 00A8			      C _O_R_CLICK_RIGHT_UP             EQU 168
 = 00AC			      C _O_R_DROPPED_INTO_LEFT          EQU 172
 = 00B0			      C _O_R_DROPPED_INTO_RIGHT         EQU 176
 = 00B4			      C _O_R_DRAG_LEFT_START            EQU 180
 = 00B8			      C _O_R_DRAG_LEFT_STOP             EQU 184
 = 00BC			      C _O_R_DRAG_RIGHT_START           EQU 188
 = 00C0			      C _O_R_DRAG_RIGHT_STOP            EQU 192
 = 00C4			      C _O_R_FOCUS_GOT                  EQU 196
 = 00C8			      C _O_R_FOCUS_LOST                 EQU 200
 = 00CC			      C _O_R_FOCUS_SET                  EQU 204
 = 00D0			      C _O_R_HOVER                      EQU 208
 = 00D4			      C _O_R_KEYSTROKE                  EQU 212
 = 00D8			      C _O_R_WHEN_CREATED               EQU 216
 = 00DC			      C _O_R_WHEN_DESTROYED             EQU 220
 = 00E0			      C _O_R_REQUESTOR                  EQU 224
 = 00E4			      C _O_R_REFRESH                    EQU 228
			      C ; Input data structures
 = 0000			      C _O_LR_TYPE                      EQU 0
 = 0001			      C _O_LR_TOP                       EQU 1
 = 0005			      C _O_LR_LEFT                      EQU 5
 = 0009			      C _O_LR_WIDTH                     EQU 9
 = 000D			      C _O_LR_HEIGHT                    EQU 13
 = 0011			      C _O_LR_LENGTH                    EQU 17
			      C ; Properties
 = 0001			      C _O_LR_ENABLED                   EQU 1
 = 0001			      C _O_LR_VISIBLE                   EQU 1
 = 0001			      C _O_LR_BACKGROUND_RED            EQU 1
 = 0002			      C _O_LR_BACKGROUND_GREEN          EQU 2
 = 0003			      C _O_LR_BACKGROUND_BLUE           EQU 3
 = 0001			      C _O_LR_MISC_1                    EQU 1
 = 0001			      C _O_LR_MISC_2                    EQU 1
 = 0001			      C _O_LR_MISC_3                    EQU 1
 = 0001			      C _O_LR_MISC_4                    EQU 1
 = 0001			      C _O_LR_MISC_FLAG_1               EQU 1
 = 0001			      C _O_LR_MISC_FLAG_2               EQU 1
 = 0001			      C _O_LR_MISC_FLAG_3               EQU 1
			      C ; Sizes
 = 0002			      C _O_LR_ENABLED_SIZE              EQU 2
 = 0002			      C _O_LR_VISIBLE_SIZE              EQU 2
 = 0004			      C _O_LR_BACKGROUND_SIZE           EQU 4
 = 0005			      C _O_LR_MISC_1_SIZE               EQU 5
 = 0005			      C _O_LR_MISC_2_SIZE               EQU 5
 = 0005			      C _O_LR_MISC_3_SIZE               EQU 5
 = 0005			      C _O_LR_MISC_4_SIZE               EQU 5
 = 0002			      C _O_LR_MISC_FLAG_1_SIZE          EQU 2
 = 0002			      C _O_LR_MISC_FLAG_2_SIZE          EQU 2
 = 0002			      C _O_LR_MISC_FLAG_3_SIZE          EQU 2
			      C 
			      C 
			      C ; _BORDER_BOX
			      C ; Properties
 = 000C			      C _O_BB_TOP                       EQU 12
 = 0010			      C _O_BB_LEFT                      EQU 16
 = 0014			      C _O_BB_WIDTH                     EQU 20
 = 0018			      C _O_BB_HEIGHT                    EQU 24
 = 001C			      C _O_BB_BACKGROUND                EQU 28
 = 001F			      C _O_BB_LIGHT_BORDER              EQU 31
 = 0022			      C _O_BB_SHADOW_BORDER             EQU 34
 = 0025			      C _O_BB_ENABLED                   EQU 37
 = 0027			      C _O_BB_VISIBLE                   EQU 39
 = 0028			      C _O_BB_MISC_1                    EQU 40
 = 002C			      C _O_BB_MISC_2                    EQU 44
 = 0030			      C _O_BB_MISC_3                    EQU 48
 = 0034			      C _O_BB_MISC_4                    EQU 52
 = 0038			      C _O_BB_MISC_FLAG_1               EQU 56
 = 0039			      C _O_BB_MISC_FLAG_2               EQU 57
 = 003A			      C _O_BB_MISC_FLAG_3               EQU 58
			      C ; Events
 = 0080			      C _O_BB_ACTIVATE                  EQU 128
 = 0084			      C _O_BB_CLICK_BOTH_SINGLE         EQU 132
 = 0088			      C _O_BB_CLICK_BOTH_DOUBLE         EQU 136
 = 008C			      C _O_BB_CLICK_LEFT_SINGLE         EQU 140
 = 0090			      C _O_BB_CLICK_LEFT_DOUBLE         EQU 144
 = 0094			      C _O_BB_CLICK_LEFT_DOWN           EQU 148
 = 0098			      C _O_BB_CLICK_LEFT_UP             EQU 152
 = 009C			      C _O_BB_CLICK_RIGHT_SINGLE        EQU 156
 = 00A0			      C _O_BB_CLICK_RIGHT_DOUBLE        EQU 160
 = 00A4			      C _O_BB_CLICK_RIGHT_DOWN          EQU 164
 = 00A8			      C _O_BB_CLICK_RIGHT_UP            EQU 168
 = 00AC			      C _O_BB_DROPPED_INTO_LEFT         EQU 172
 = 00B0			      C _O_BB_DROPPED_INTO_RIGHT        EQU 176
 = 00B4			      C _O_BB_DRAG_LEFT_START           EQU 180
 = 00B8			      C _O_BB_DRAG_LEFT_STOP            EQU 184
 = 00BC			      C _O_BB_DRAG_RIGHT_START          EQU 188
 = 00C0			      C _O_BB_DRAG_RIGHT_STOP           EQU 192
 = 00C4			      C _O_BB_FOCUS_GOT                 EQU 196
 = 00C8			      C _O_BB_FOCUS_LOST                EQU 200
 = 00CC			      C _O_BB_FOCUS_SET                 EQU 204
 = 00D0			      C _O_BB_HOVER                     EQU 208
 = 00D4			      C _O_BB_KEYSTROKE                 EQU 212
 = 00D8			      C _O_BB_WHEN_CREATED              EQU 216
 = 00DC			      C _O_BB_WHEN_DESTROYED            EQU 220
 = 00E0			      C _O_BB_REQUESTOR                 EQU 224
 = 00E4			      C _O_BB_REFRESH                   EQU 228
			      C ; Input data structures
 = 0000			      C _O_LBB_TYPE                     EQU 0
 = 0001			      C _O_LBB_TOP                      EQU 1
 = 0005			      C _O_LBB_LEFT                     EQU 5
 = 0009			      C _O_LBB_WIDTH                    EQU 9
 = 000D			      C _O_LBB_HEIGHT                   EQU 13
 = 0011			      C _O_LBB_LENGTH                   EQU 17
			      C ; Properties
 = 0001			      C _O_LBB_ENABLED                  EQU 1
 = 0001			      C _O_LBB_VISIBLE                  EQU 1
 = 0001			      C _O_LBB_BACKGROUND_RED           EQU 1
 = 0002			      C _O_LBB_BACKGROUND_GREEN         EQU 2
 = 0003			      C _O_LBB_BACKGROUND_BLUE          EQU 3
 = 0001			      C _O_LBB_LIGHT_BORDER_RED         EQU 1
 = 0002			      C _O_LBB_LIGHT_BORDER_GREEN       EQU 2
 = 0003			      C _O_LBB_LIGHT_BORDER_BLUE        EQU 3
 = 0001			      C _O_LBB_SHADOW_BORDER_RED        EQU 1
 = 0002			      C _O_LBB_SHADOW_BORDER_GREEN      EQU 2
 = 0003			      C _O_LBB_SHADOW_BORDER_BLUE       EQU 3
 = 0001			      C _O_LBB_MISC_1                   EQU 1
 = 0001			      C _O_LBB_MISC_2                   EQU 1
 = 0001			      C _O_LBB_MISC_3                   EQU 1
 = 0001			      C _O_LBB_MISC_4                   EQU 1
 = 0001			      C _O_LBB_MISC_FLAG_1              EQU 1
 = 0001			      C _O_LBB_MISC_FLAG_2              EQU 1
 = 0001			      C _O_LBB_MISC_FLAG_3              EQU 1
			      C ; Sizes
 = 0002			      C _O_LBB_ENABLED_SIZE             EQU 2
 = 0002			      C _O_LBB_VISIBLE_SIZE             EQU 2
 = 0004			      C _O_LBB_BACKGROUND_SIZE          EQU 4
 = 0004			      C _O_LBB_LIGHT_BORDER_SIZE        EQU 4
 = 0004			      C _O_LBB_SHADOW_BORDER_SIZE       EQU 4
 = 0005			      C _O_LBB_MISC_1_SIZE              EQU 5
 = 0005			      C _O_LBB_MISC_2_SIZE              EQU 5
 = 0005			      C _O_LBB_MISC_3_SIZE              EQU 5
 = 0005			      C _O_LBB_MISC_4_SIZE              EQU 5
 = 0002			      C _O_LBB_MISC_FLAG_1_SIZE         EQU 2
 = 0002			      C _O_LBB_MISC_FLAG_2_SIZE         EQU 2
 = 0002			      C _O_LBB_MISC_FLAG_3_SIZE         EQU 2
			      C 


				    .386P
 00000000			_TEXT32 SEGMENT BYTE 'CODE' USE32
				    ASSUME NOTHING

				; These are required to be the first 2 dwords in the file
 00000000  00000087 R		dd  offset main
 00000004  00000008 R		dd  offset requestor




 00000008			    requestor   PROC
				    ; This routine is called by Exodus.  When this function is called multi-tasking is not installed.  This is a linear function.
				    ;
				    ; Upon entry:   eax - requested function
				    ;                ds - temporary ORG 0h data segment for use with these requestor() functions
				    ;
				    ; Upon exit:    results vary based on value of eax
				    ;
				        .IF (eax == 'info')
 00000008  3D 696E666F	   *	    cmp    eax, 'info'
 0000000D  75 26	   *	    jne    @C0001
				          ; Program information
 0000000F  B8 6E617469		            mov     eax,'nati'                              ; Identifying this program as a native primative
 00000014  B9 000028F2 R	            mov     ecx,offset end_of_required_data         ; The maximum number of bytes to retain after loading

 00000019  BE 000028F2 R	            mov     esi,offset this_drivers_primatives      ; Offset to the native primatives structure
 0000001E  BF 0000257B R	            mov     edi,offset driver_name
 00000023  BB 00002593 R	            mov     ebx,offset version
 00000028  BA 0000259E R	            mov     edx,offset copyright
 0000002D  BD 000025BE R	            mov     ebp,offset author
 00000032  F8			            clc
				        .ELSEIF (eax == 'prim')
 00000033  EB 51	   *	    jmp    @C0003
 00000035		   *@C0001:
 00000035  3D 7072696D	   *	    cmp    eax, 'prim'
 0000003A  75 14	   *	    jne    @C0004
				          ; Native primatives this program will use
 0000003C  66| 8C 1D		            mov     ds:data_segment,ds
	   000025CE R
 00000043  BE 000025E6 R	            mov     esi,offset required_primatives                  ; This primative requires these external influence
 00000048  BF 000025D2 R	            mov     edi,offset primative_call_gates
 0000004D  F8			            clc
				        .ELSEIF (eax == 'id  ')
 0000004E  EB 36	   *	    jmp    @C0006
 00000050		   *@C0004:
 00000050  3D 69642020	   *	    cmp    eax, 'id  '
 00000055  75 0F	   *	    jne    @C0007
 00000057  BE 0000257B R	            mov     esi,offset driver_name
 0000005C  2E: FF 1D		            call    fword ptr cs:_VID_display_string_nr_vga
	   000025D4 R
 00000063  F8			            clc
				        .ELSEIF (eax == 'note')
 00000064  EB 20	   *	    jmp    @C0009
 00000066		   *@C0007:
 00000066  3D 6E6F7465	   *	    cmp    eax, 'note'
 0000006B  75 18	   *	    jne    @C000A
 0000006D  B8 73746F70		            mov     eax,'stop'
 00000072  BB 6C6F6164		            mov     ebx,'load'
 00000077  BE 0000257B R	            mov     esi,offset driver_name
 0000007C  2E: FF 1D		            call    fword ptr cs:_EXODUS_requestor
	   000025D0 R
				        .ELSE
 00000083  EB 01	   *	    jmp    @C000C
 00000085		   *@C000A:
 00000085  F9			            stc
				        .ENDIF
 00000086		   *@C000C:
 00000086		   *@C0009:
 00000086		   *@C0006:
 00000086		   *@C0003:
 00000086  CB			        retf
 00000087			    requestor   ENDP




 00000087			    main    PROC
				    ; This routine is called once by Exodus once initialization is complete (all calls to requestor() are finished)
				    ; It is used by Exodus to allow this driver to properly initialize itself.
				    ; When this function is called multi-tasking is not installed.  This is a linear function.
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    A "continued status of execution" is expected by Exodus.  This indicates whether or not everything
				    ;               initialized ok or is available.  If everything is OK the carry? flag is CLEAR.  If there is an error
				    ;               and this driver cannot continue then the carry? should be SET.
				    ;               carry? - CLEAR=Ok to continue
				    ;                          SET=Error initializing
				    ;
 00000087  66| 2E: 8E 1D	        mov     ds,cs:data_segment
	   000025CE R
 0000008F  C6 05 000025CD R	        mov     ds:bootup,0
	   00
 00000096  E8 00000001		        call    initialize_driver
				      ; Right now, carry? is SET or CLEAR indicating status of driver
 0000009B  CB			        retf
 0000009C			    main    ENDP




 0000009C			    initialize_driver   PROC
				    ; This routine is used to initialize the driver
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    The BIOS logo is displayed
				    ;
 0000009C  E8 000003BA		        call    initialize_TASKING
 000000A1  E8 00000013		        call    initialize_PIC
 000000A6  E8 00000039		        call    initialize_TIMER

				      ;; Display the BIOS logo
 000000AB  BE 00002691 R	        mov     esi,offset bios_logo
 000000B0  2E: FF 1D		        call    fword ptr cs:_VID_draw_logo
	   000025D2 R

 000000B7  F8			        clc
 000000B8  C3			        ret
 000000B9			    initialize_driver   ENDP




 000000B9			    initialize_PIC      PROC
				    ; This routine initializes the PIC to the bootup state Exodus expects/relies upon
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    Nothing
				    ;
 000000B9  60			        pushad

				      ;; Redirect master IRQs to INT 70h-77h
 000000BA  B4 00		        mov     ah,0
 000000BC  B3 70		        mov     bl,70h
				        callf   BIOS_iPIC_redirect_irq
			     1	; This macro:   callf   function_name
 000000BE  0E		     1	    push    cs
 000000BF  E8 00000044	     1	    call    BIOS_iPIC_redirect_irq
				      ;; Unmask all IRQ's on master
 000000C4  B4 00		        mov     ah,0
				        callf   BIOS_iPIC_unmask_all_irqs
			     1	; This macro:   callf   function_name
 000000C6  0E		     1	    push    cs
 000000C7  E8 00000157	     1	    call    BIOS_iPIC_unmask_all_irqs

				      ;; Redirect slave IRQs to INT 78h-7fh
 000000CC  B4 01		        mov     ah,1
 000000CE  B3 78		        mov     bl,78h
				        callf   BIOS_iPIC_redirect_irq
			     1	; This macro:   callf   function_name
 000000D0  0E		     1	    push    cs
 000000D1  E8 00000032	     1	    call    BIOS_iPIC_redirect_irq
				      ;; Unmask all IRQ's on slave
 000000D6  B4 01		        mov     ah,1
				        callf   BIOS_iPIC_unmask_all_irqs
			     1	; This macro:   callf   function_name
 000000D8  0E		     1	    push    cs
 000000D9  E8 00000145	     1	    call    BIOS_iPIC_unmask_all_irqs

				      ;; Enable NMI interrupts
 000000DE  32 C0		        xor     al,al                                               ; High bit is the only one that matters, 0-enables, 1-masks
 000000E0  E6 70		        out     _PIC_70h,al

 000000E2  61			        popad
 000000E3  C3			        ret
 000000E4			    initialize_PIC      ENDP




 000000E4			    initialize_TIMER    PROC
				    ; This routine initializes the timer to ensure it's setup correctly
				    ;
				    ; Upon entry:   Nothing
				    ;
				    ; Upon exit:    Nothing
				    ;
				    ; Initialize the timer memory to have one event which goes to the system event (for task switching and clock maintenance)
				    ;
				    ; * Note:  The manner in which we reprent the 182 ticks per second is not exact.  This is due to the fact that the minimum
				    ;          firing time the timer can execute is when it contains a count value of 0xffff, which represents 18.2064971924 ticks
				    ;          per second.  However, when we multiply that frequency by 10, to get our ~182 times per second, we lose some ability
				    ;          to store the exact value in the timer.  This is due to the fact that ~18.2 ticks = 0xffff, and ~182 ticks = 1999h
				    ;          with .6 (in base 10) remaining, or approximately 9.6 (in base 16).  So the actual value we need for the timer is
				    ;          1999.96h, but since we can't load decimals we are forced to round.  This creates a problem of the timer not truly
				    ;          firing at the rate of 182.064971924 (as it should).  So, to compensave for this, we take the actual value and
				    ;          divide it by the calculated value, that yields a result of 0.999923710711 (6553.6 / 6554), which we then multiply
				    ;          by our timer constant (119318100000) to obtain our actual add frequency of 119308997307 (which is slightly less
				    ;          then our actual value).  This will cause the timer to not fire exactly as often, thereby compensating for the
				    ;          difference.  119308997307 = 1bc75ed2bah
				    ;
 000000E4  60			        pushad

				      ;; Set the timer to interrupt 182Hz
 000000E5  B8 00001999		        mov     eax,1999h
 000000EA  E8 00000252		        call    invTIMER_set_interrupt_interval

				      ;; Setup the TASK GATE in the IDT (point IRQ0 to the timer ISR)
 000000EF  B8 62696E74		        mov     eax,'bint'
 000000F4  B3 70		        mov     bl,70h                                              ; INT 70h
 000000F6  B9 00000001		        mov     ecx,1
 000000FB  BA 000002B1 R	        mov     edx,offset TIMER_handler
 00000100  FF 1D 000025D0 R	        call    fword ptr ds:_EXODUS_requestor

 00000106  61			        popad
 00000107  C3			        ret
 00000108			    initialize_TIMER    ENDP




 00000108			    BIOS_iPIC_redirect_irq      PROC
				    ; This routine re-maps the IRQ interrupts to the desired range
				    ;
				    ; Upon entry:   ah = 0 or 1             (0-Master PIC, 1-Slave PIC)
				    ;               bl = New Interrupt      (00h, 10h, 20h, 30h, etc.)
				    ;
 00000108  60			        pushad
				    ;; Setup the appropriate port values for the requested PIC
				        .IF (ah == 0)
 00000109  0A E4	   *	    or	ah, ah
 0000010B  75 0C	   *	    jne    @C000D
 0000010D  BA 00000021		            mov     edx,_PIC_21h                                    ; 8259-1 (master)
 00000112  B9 00000020		            mov     ecx,_PIC_20h
				        .ELSE
 00000117  EB 0A	   *	    jmp    @C000F
 00000119		   *@C000D:
 00000119  BA 000000A1		            mov     edx,_PIC_A1h                                    ; 8259-2 (slave)
 0000011E  B9 000000A0		            mov     ecx,_PIC_A0h
				        .ENDIF
 00000123		   *@C000F:

				    ;; Read interrupt mask
 00000123  EC			        in      al,dx                                               ; Read the current mask (we restore this below)
 00000124  8A E0		        mov     ah,al
				        @IO_pause
 00000126  EB 00	     1	    jmp     $+2

				    ;; Disable interrupts
 00000128  FA			        cli

				    ;; Command 1
 00000129  87 D1		        xchg    edx,ecx
 0000012B  B0 11		        mov     al,11h                                              ; Cascade, require 4th init byte in this sequence
 0000012D  EE			        out     dx,al
				        @IO_pause
 0000012E  EB 00	     1	    jmp     $+2

				    ;; Command 2
 00000130  87 D1		        xchg    edx,ecx
 00000132  8A C3		        mov     al,bl                                               ; User defined interrupt redirect value
 00000134  24 F8		        and     al,11111000b                                        ; Mask off lower 3 bits (they're not used here)
 00000136  EE			        out     dx,al
				        @IO_pause
 00000137  EB 00	     1	    jmp     $+2

				    ;; Command 3
				        .IF (edx >= _PIC_A0h)
 00000139  81 FA 000000A0  *	    cmp    edx, _PIC_A0h
 0000013F  72 04	   *	    jb     @C0010
				          ; slave controller receives value 2 here
 00000141  B0 02		            mov     al,010b                                         ; Slave controller ID (value of 2 indicates IRQ2)
				        .ELSE
 00000143  EB 02	   *	    jmp    @C0012
 00000145		   *@C0010:
				          ; master controller receives value 4 here
 00000145  B0 04		            mov     al,0100b                                        ; Slave controller on IRQ 2
				        .ENDIF
 00000147		   *@C0012:
 00000147  EE			        out     dx,al
				        @IO_pause
 00000148  EB 00	     1	    jmp     $+2

				    ;; Command 4
 0000014A  B0 01		        mov     al,1                                                ; Normal EOI, nonbuffered, 80x86
 0000014C  EE			        out     dx,al
				        @IO_pause
 0000014D  EB 00	     1	    jmp     $+2

				    ;; Restore original interrupt mask register
 0000014F  8A C4		        mov     al,ah
 00000151  EE			        out     dx,al

				    ;; Enable interrupts
 00000152  FB			        sti

				    ;; Finished
 00000153  61			        popad
 00000154  CB			        retf
 00000155			    BIOS_iPIC_redirect_irq      ENDP




 00000155			    BIOS_iPIC_mask_irq      PROC
				    ; This routine masks a specific IRQ
				    ;
				    ; Upon entry:   ah = IRQ # to mask
				    ;
				        .IF (ah <= 15)
 00000155  80 FC 0F	   *	    cmp    ah, 00Fh
 00000158  77 56	   *	    ja     @C0013
 0000015A  60			            pushad
				          ;; Setup the appropriate port values
 0000015B  BA 00000021		            mov     edx,_PIC_21h                                    ; Default to 8259-1 (master)
				            .IF (ah >= 8)
 00000160  80 FC 08	   *	    cmp    ah, 008h
 00000163  72 08	   *	    jb     @C0015
 00000165  BA 000000A1		                mov     edx,_PIC_A1h                                ; Nope, it's 8259-2 (slave)
 0000016A  80 EC 08		                sub     ah,8                                        ; Subtract 8 (makes IRQ #'s 8-15 appear as 0-7, used below)
				            .ENDIF
				          ;; Get current mask values
 0000016D		   *@C0015:
 0000016D  EC			            in      al,dx
				            .IF (ah == 0)
 0000016E  0A E4	   *	    or	ah, ah
 00000170  75 04	   *	    jne    @C0017
 00000172  0C 01		                or      al,1b                                       ; Mask IRQ 0/8
				            .ELSEIF (ah == 1)
 00000174  EB 38	   *	    jmp    @C0019
 00000176		   *@C0017:
 00000176  80 FC 01	   *	    cmp    ah, 001h
 00000179  75 04	   *	    jne    @C001A
 0000017B  0C 02		                or      al,10b                                      ; Mask IRQ 1/9
				            .ELSEIF (ah == 2)
 0000017D  EB 2F	   *	    jmp    @C001C
 0000017F		   *@C001A:
 0000017F  80 FC 02	   *	    cmp    ah, 002h
 00000182  75 04	   *	    jne    @C001D
 00000184  0C 04		                or      al,100b                                     ; Mask IRQ 2/10
				            .ELSEIF (ah == 3)
 00000186  EB 26	   *	    jmp    @C001F
 00000188		   *@C001D:
 00000188  80 FC 03	   *	    cmp    ah, 003h
 0000018B  75 04	   *	    jne    @C0020
 0000018D  0C 08		                or      al,1000b                                    ; Mask IRQ 3/11
				            .ELSEIF (ah == 4)
 0000018F  EB 1D	   *	    jmp    @C0022
 00000191		   *@C0020:
 00000191  80 FC 04	   *	    cmp    ah, 004h
 00000194  75 04	   *	    jne    @C0023
 00000196  0C 10		                or      al,10000b                                   ; Mask IRQ 4/12
				            .ELSEIF (ah == 5)
 00000198  EB 14	   *	    jmp    @C0025
 0000019A		   *@C0023:
 0000019A  80 FC 05	   *	    cmp    ah, 005h
 0000019D  75 04	   *	    jne    @C0026
 0000019F  0C 20		                or      al,100000b                                  ; Mask IRQ 5/13
				            .ELSEIF (ah == 6)
 000001A1  EB 0B	   *	    jmp    @C0028
 000001A3		   *@C0026:
 000001A3  80 FC 06	   *	    cmp    ah, 006h
 000001A6  75 04	   *	    jne    @C0029
 000001A8  0C 40		                or      al,1000000b                                 ; Mask IRQ 6/14
				            .ELSE
 000001AA  EB 02	   *	    jmp    @C002B
 000001AC		   *@C0029:
 000001AC  0C 80		                or      al,10000000b                                ; Mask IRQ 7/15
				            .ENDIF
				          ;; Set the new mask values
 000001AE		   *@C002B:
 000001AE		   *@C0028:
 000001AE		   *@C0025:
 000001AE		   *@C0022:
 000001AE		   *@C001F:
 000001AE		   *@C001C:
 000001AE		   *@C0019:
 000001AE  EE			            out     dx,al

				          ;; Finished
 000001AF  61			            popad
				        .ENDIF
 000001B0		   *@C0013:
 000001B0  CB			        retf
 000001B1			    BIOS_iPIC_mask_irq      ENDP




 000001B1			    BIOS_iPIC_unmask_irq    PROC
				    ; This routine un-masks a specific IRQ
				    ;
				    ; Upon entry:   ah = IRQ # to unmask
				    ;
				        .IF (ah <= 15)
 000001B1  80 FC 0F	   *	    cmp    ah, 00Fh
 000001B4  77 56	   *	    ja     @C002C
 000001B6  60			            pushad
				          ;; Setup the appropriate port values
 000001B7  BA 00000021		            mov     edx,_PIC_21h                                    ; Default to 8259-1 (master)
				            .IF (ah >= 8)
 000001BC  80 FC 08	   *	    cmp    ah, 008h
 000001BF  72 08	   *	    jb     @C002E
 000001C1  BA 000000A1		                mov     edx,_PIC_A1h                                ; Nope, it's 8259-2 (slave)
 000001C6  80 EC 08		                sub     ah,8                                        ; Subtract 8 (makes IRQ #'s 8-15 appear as 0-7, used below)
				            .ENDIF
				          ;; Get current mask values
 000001C9		   *@C002E:
 000001C9  EC			            in      al,dx
				            .IF (ah == 0)
 000001CA  0A E4	   *	    or	ah, ah
 000001CC  75 04	   *	    jne    @C0030
 000001CE  24 FE		                and     al,not 1b                                   ; Unmask IRQ 0/8
				            .ELSEIF (ah == 1)
 000001D0  EB 38	   *	    jmp    @C0032
 000001D2		   *@C0030:
 000001D2  80 FC 01	   *	    cmp    ah, 001h
 000001D5  75 04	   *	    jne    @C0033
 000001D7  24 FD		                and     al,not 10b                                  ; Unmask IRQ 1/9
				            .ELSEIF (ah == 2)
 000001D9  EB 2F	   *	    jmp    @C0035
 000001DB		   *@C0033:
 000001DB  80 FC 02	   *	    cmp    ah, 002h
 000001DE  75 04	   *	    jne    @C0036
 000001E0  24 FB		                and     al,not 100b                                 ; Unmask IRQ 2/10
				            .ELSEIF (ah == 3)
 000001E2  EB 26	   *	    jmp    @C0038
 000001E4		   *@C0036:
 000001E4  80 FC 03	   *	    cmp    ah, 003h
 000001E7  75 04	   *	    jne    @C0039
 000001E9  24 F7		                and     al,not 1000b                                ; Unmask IRQ 3/11
				            .ELSEIF (ah == 4)
 000001EB  EB 1D	   *	    jmp    @C003B
 000001ED		   *@C0039:
 000001ED  80 FC 04	   *	    cmp    ah, 004h
 000001F0  75 04	   *	    jne    @C003C
 000001F2  24 EF		                and     al,not 10000b                               ; Unmask IRQ 4/12
				            .ELSEIF (ah == 5)
 000001F4  EB 14	   *	    jmp    @C003E
 000001F6		   *@C003C:
 000001F6  80 FC 05	   *	    cmp    ah, 005h
 000001F9  75 04	   *	    jne    @C003F
 000001FB  24 DF		                and     al,not 100000b                              ; Unmask IRQ 5/13
				            .ELSEIF (ah == 6)
 000001FD  EB 0B	   *	    jmp    @C0041
 000001FF		   *@C003F:
 000001FF  80 FC 06	   *	    cmp    ah, 006h
 00000202  75 04	   *	    jne    @C0042
 00000204  24 BF		                and     al,not 1000000b                             ; Unmask IRQ 6/14
				            .ELSE
 00000206  EB 02	   *	    jmp    @C0044
 00000208		   *@C0042:
 00000208  24 7F		                and     al,not 10000000b                            ; Unmask IRQ 7/15
				            .ENDIF
				          ;; Set the new mask values
 0000020A		   *@C0044:
 0000020A		   *@C0041:
 0000020A		   *@C003E:
 0000020A		   *@C003B:
 0000020A		   *@C0038:
 0000020A		   *@C0035:
 0000020A		   *@C0032:
 0000020A  EE			            out     dx,al

				          ;; Finished
 0000020B  61			            popad
				        .ENDIF
 0000020C		   *@C002C:
 0000020C  CB			        retf
 0000020D			    BIOS_iPIC_unmask_irq    ENDP




 0000020D			    BIOS_iPIC_mask_all_irqs     PROC
				    ; This routine masks all IRQs (disables them)
				    ;
				    ; Upon entry:   ah = 0 or 1             (0-Master PIC, 1-Slave PIC)
				    ;
 0000020D  50			        push    eax
 0000020E  52			        push    edx

				      ;; Setup the appropriate port values
				        .IF (ah == 0)
 0000020F  0A E4	   *	    or	ah, ah
 00000211  75 06	   *	    jne    @C0045
 00000213  66| BA 0021		            mov     dx,_PIC_21h                                     ; 8259-1 (master)
				        .ELSE
 00000217  EB 04	   *	    jmp    @C0047
 00000219		   *@C0045:
 00000219  66| BA 00A1		            mov     dx,_PIC_A1h                                     ; 8259-2 (slave)
				        .ENDIF
 0000021D		   *@C0047:

				      ;; Set the new mask values
 0000021D  B0 FF		        mov     al,0ffh                                             ; Disable all
 0000021F  EE			        out     dx,al

				      ;; Finished
 00000220  5A			        pop     edx
 00000221  58			        pop     eax
 00000222  CB			        retf
 00000223			    BIOS_iPIC_mask_all_irqs     ENDP




 00000223			    BIOS_iPIC_unmask_all_irqs       PROC
				    ; This routine unmasks all IRQs (enables them)
				    ;
				    ; Upon entry:   ah = 0 or 1             (0-Master PIC, 1-Slave PIC)
				    ;
 00000223  50			        push    eax
 00000224  52			        push    edx

				      ;; Setup the appropriate port values
				        .IF (ah == 0)
 00000225  0A E4	   *	    or	ah, ah
 00000227  75 06	   *	    jne    @C0048
 00000229  66| BA 0021		            mov     dx,_PIC_21h                                     ; 8259-1 (master)
				        .ELSE
 0000022D  EB 04	   *	    jmp    @C004A
 0000022F		   *@C0048:
 0000022F  66| BA 00A1		            mov     dx,_PIC_A1h                                     ; 8259-2 (slave)
				        .ENDIF
 00000233		   *@C004A:

				      ;; Set the new mask values
 00000233  32 C0		        xor     al,al                                               ; Enable all
 00000235  EE			        out     dx,al

				      ;; Finished
 00000236  5A			        pop     edx
 00000237  58			        pop     eax
 00000238  CB			        retf
 00000239			    BIOS_iPIC_unmask_all_irqs       ENDP




 00000239			    iBIOS_read_8042_64h     PROC
				    ; This routine reads one byte from port 60h into al
 00000239  E4 64		        in      al,064h
				        callf   TIMER_wait_full_tick
			     1	; This macro:   callf   function_name
 0000023B  0E		     1	    push    cs
 0000023C  E8 0000015F	     1	    call    TIMER_wait_full_tick
 00000241  CB			        retf
 00000242			    iBIOS_read_8042_64h     ENDP




 00000242			    iBIOS_read_8042_60h     PROC
				    ; This routine reads the byte in from port 60h to al
 00000242  51			        push    ecx
 00000243  33 C9		        xor     ecx,ecx
 00000245			      @@:
				        callf   iBIOS_read_8042_64h                                 ; Wait for bit 0 of port (64h) to become zero before reading
			     1	; This macro:   callf   function_name
 00000245  0E		     1	    push    cs
 00000246  E8 FFFFFFEE	     1	    call    iBIOS_read_8042_64h
 0000024B  D0 E8		        shr     al,1
 0000024D  72 02		        jc      @F
 0000024F  E1 F4		        loope   @B
 00000251			      @@:
				        callf   TIMER_wait_full_tick
			     1	; This macro:   callf   function_name
 00000251  0E		     1	    push    cs
 00000252  E8 00000149	     1	    call    TIMER_wait_full_tick
 00000257  E4 60		        in      al,060h
 00000259  59			        pop     ecx
 0000025A  CB			        retf
 0000025B			    iBIOS_read_8042_60h     ENDP




 0000025B			    iBIOS_write_8042_64h    PROC
				    ; This routine writes a byte to port 64h
				        callf   TIMER_wait_full_tick
			     1	; This macro:   callf   function_name
 0000025B  0E		     1	    push    cs
 0000025C  E8 0000013F	     1	    call    TIMER_wait_full_tick
 00000261  8A C4		        mov     al,ah
 00000263  E6 64		        out     064h,al
 00000265  CB			        retf
 00000266			    iBIOS_write_8042_64h    ENDP




 00000266			    iBIOS_write_8042_60h    PROC
				    ; This routine writes the byte in ah to port 60h
 00000266  51			        push    ecx
 00000267  33 C9		        xor     ecx,ecx
 00000269			      @@:
				        callf   iBIOS_read_8042_64h                                 ; Wait for bit 1 of port (64h) to become zero before writing
			     1	; This macro:   callf   function_name
 00000269  0E		     1	    push    cs
 0000026A  E8 FFFFFFCA	     1	    call    iBIOS_read_8042_64h
 0000026F  C0 E8 02		        shr     al,2
 00000272  73 02		        jnc     @F
 00000274  E1 F3		        loope   @B
 00000276			      @@:
				        callf   TIMER_wait_full_tick
			     1	; This macro:   callf   function_name
 00000276  0E		     1	    push    cs
 00000277  E8 00000124	     1	    call    TIMER_wait_full_tick
 0000027C  8A C4		        mov     al,ah                                               ; Write it
 0000027E  E6 60		        out     060h,al
				        callf   TIMER_wait_full_tick
			     1	; This macro:   callf   function_name
 00000280  0E		     1	    push    cs
 00000281  E8 0000011A	     1	    call    TIMER_wait_full_tick
 00000286  59			        pop     ecx
 00000287  CB			        retf
 00000288			    iBIOS_write_8042_60h      ENDP




 00000288			    iBIOS_read_8042_64h_fast    PROC
				    ; This routine reads one byte from port 60h into al
 00000288  E4 64		        in      al,064h
 0000028A  EB 00		        jmp     $+2
 0000028C  CB			        retf
 0000028D			    iBIOS_read_8042_64h_fast    ENDP




 0000028D			    iBIOS_read_8042_60h_fast    PROC
				    ; This routine reads the byte in from port 60h to al
 0000028D  51			        push    ecx
 0000028E  33 C9		        xor     ecx,ecx
 00000290			      @@:
				        callf   iBIOS_read_8042_64h_fast                            ; Wait for bit 0 of port (64h) to become zero before reading
			     1	; This macro:   callf   function_name
 00000290  0E		     1	    push    cs
 00000291  E8 FFFFFFF2	     1	    call    iBIOS_read_8042_64h_fast
 00000296  D0 E8		        shr     al,1
 00000298  72 02		        jc      @F
 0000029A  E1 F4		        loope   @B
 0000029C			      @@:
 0000029C  E4 60		        in      al,060h
 0000029E  EB 00		        jmp     $+2
 000002A0  59			        pop     ecx
 000002A1  CB			        retf
 000002A2			    iBIOS_read_8042_60h_fast    ENDP




 000002A2			    iBIOS_write_8042_64h_fast   PROC
				    ; This routine writes a byte to port 64h
 000002A2  8A C4		        mov     al,ah
 000002A4  E6 64		        out     064h,al
 000002A6  CB			        retf
 000002A7			    iBIOS_write_8042_64h_fast   ENDP




 000002A7			    iBIOS_write_8042_60h_fast   PROC
				    ; This routine writes the byte in ah to port 60h
 000002A7  8A C4		        mov     al,ah                                               ; Write it
 000002A9  E6 60		        out     060h,al
 000002AB  CB			        retf
 000002AC			    iBIOS_write_8042_60h_fast   ENDP




 000002AC			    BIOS_requestor      PROC
				    ; This routine is used to answer queries by other applications
				    ; * Refer to source\inf\requestr.inf for more information
				    ;
				    ; Upon entry:   eax = request number
				    ;               stack is appropriately setup based on request
				    ;
				    ; Upon exit:    various registers might be updated
				    ;
 000002AC  CB			        retf
 000002AD			    BIOS_requestor      ENDP




				    INCLUDE timer.asp
			      C ; timer.asp
			      C ;
			      C ; Exodus BIOS Timer related functions
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
 000002AD 00000000	      C timer_busy      dd  0
			      C 
			      C 
 000002B1		      C     TIMER_handler   PROC
			      C     ; This routine is the timer interrupt handler
			      C     ;
			      C     ; Upon entry:   The timer has just fired
			      C     ;
			      C     ; Upon exit:    All the necessary routines are called
			      C     ;
 000002B1  1E		      C         push    ds
 000002B2  50		      C         push    eax
			      C 
 000002B3  B8 000000A8	      C         mov     eax,_sSYSTEM
 000002B8  8E D8	      C         mov     ds,eax
			      C       ; Increment 1/182 of a second
 000002BA  67& FE 06 000B     C         inc     byte ptr ds:[_SYSTEM_182S_OF_A_SECOND]
 000002BF  67& 80 3E 000B     C         cmp     byte ptr ds:[_SYSTEM_182S_OF_A_SECOND],182
	   B6
 000002C5  72 10	      C         jb      timer_continue
 000002C7  67& C6 06 000B     C         mov     byte ptr ds:[_SYSTEM_182S_OF_A_SECOND],0
	   00
 000002CD  67& FF 06 0000     C         inc     dword ptr ds:[_SYSTEM_SECONDS_SINCE_BOOTUP]
 000002D2  67& FF 06 0004     C         inc     dword ptr ds:[_SYSTEM_SECONDS_SINCE_MIDNIGHT]
			      C 
 000002D7		      C       timer_continue:
			      C       ; Signal end of interrupt and allow interrupts again
 000002D7  B0 20	      C         mov     al,020h
 000002D9  E6 20	      C         out     020h,al
 000002DB  FB		      C         sti
			      C 
			      C         .IF (cs:timer_busy == 0)
 000002DC  2E: 83 3D
	   000002AD R 00   *	    cmp    cs : timer_busy, 000h
 000002E4  75 56	   *	    jne    @C004B
 000002E6  66| 2E: 8E 1D      C             mov     ds,cs:data_segment
	   000025CE R
 000002EE  C7 05 000002AD R   C             mov     ds:timer_busy,1
	   00000001
			      C             .IF (ds:debi_timer_feed != 0)
 000002F8  83 3D 00000453 R
	   00		   *	    cmp    ds : debi_timer_feed, 000h
 000002FF  74 08	   *	    je     @C004D
			      C               ; Tell Debi another tick has occurred
 00000301  FF 1D 000025D6 R   C                 call    fword ptr ds:_iDEBI_timer_interface
			      C             .ELSE
 00000307  EB 21	   *	    jmp    @C004F
 00000309		   *@C004D:
			      C               ; See if it's time to signal an event
			      C ;                sub     ds:mouse_immediate_count,1
			      C ;                .IF (carry?)
			      C ;                    push    edx
			      C ;                    mov     dl,ds:mouse_last_event
			      C ;                    call    invTASK_check_immediate
			      C ;                    pop     edx
			      C ;                .ENDIF
			      C ;
			      C ;                sub     ds:mouse_hovering_count,1
			      C ;                .IF (carry?)
			      C ;                    call    invTASK_check_hovering
			      C ;                .ENDIF
			      C ;
			      C ;                sub     ds:mouse_clicking_count,1
			      C ;                .IF (carry?)
			      C ;                    call    invTASK_check_objects_click
			      C ;                .ENDIF
			      C 
			      C               ; See if it's time for a task switch
 00000309  B8 000001A0	      C                 mov     eax,_sTASK_SYSTEM
 0000030E  8E D8	      C                 mov     ds,eax
			      C                 .IF (dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET] != _FIRST_TASK_ENTRY)
 00000310  67& 83 3E 0008
	   40		   *	    cmp    dword ptr ds : [_TASK_SYSTEM_CURRENT_TASK_OFFSET], _FIRST_TASK_ENTRY
 00000316  74 12	   *	    je     @C0050
			      C                   ; It's not the main Exodus task
 00000318  67& A1 0008	      C                     mov     eax,dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET]
 0000031C  FE 48 18	      C                     dec     byte ptr ds:[eax+_TASK_ENTRY_TICKS_LEFT]
			      C                     .IF (carry?)
 0000031F  73 09	   *	    jae    @C0052
			      C                       ; It's time for a task switch
 00000321  FA		      C                         cli                                         ; a CLI is required before a task switch
			      C                         callg   _sTASK_SWITCH_TASK_GATE
			     1C ; This macro:   callg   _call_gate
 00000322  9A		     1C     db  9ah
 00000323  00000000	     1C     dd  0
 00000327  0110		     1C     dw  _sTASK_SWITCH_TASK_GATE
 00000329  FB		      C                         sti                                         ; an STI is expected after a task switch
			      C                     .ENDIF
			      C                 .ENDIF
 0000032A		   *@C0052:
			      C             .ENDIF
 0000032A		   *@C0050:
 0000032A		   *@C004F:
 0000032A  66| 2E: 8E 1D      C             mov     ds,cs:data_segment
	   000025CE R
 00000332  C7 05 000002AD R   C             mov     ds:timer_busy,0
	   00000000
			      C         .ENDIF
 0000033C		   *@C004B:
 0000033C  FB		      C         sti
			      C 
 0000033D  58		      C         pop     eax
 0000033E  1F		      C         pop     ds
 0000033F  CF		      C         iretd
 00000340		      C     TIMER_handler   ENDP
			      C 
			      C 
			      C 
			      C 
 00000340		      C     invTIMER_system_event       PROC
			      C     ; This routine handles the time-of-day functions (updated 182 times per second)
 00000340  C3		      C         ret
 00000341		      C     invTIMER_system_event       ENDP
			      C 
			      C 
			      C 
			      C 
 00000341		      C     invTIMER_set_interrupt_interval     PROC
			      C     ; This routine sets a TIMER frequency.  It is only called by algorithms in this program
			      C     ;
			      C     ; Upon entry:   eax - desired interval (_PIT_FREQUENCY / interval = eax)
			      C     ;
			      C     ; Upon exit:    timer channel 0 is updated to the new frequency
			      C     ;               updated - timer_max_hz
			      C     ;               updated - timer_max_value
			      C     ;
			      C       ;; Setup timer 0 to the mode we're desiring
 00000341  B0 36	      C         mov     al,00110110b                                        ; 0011:011:0 - TIMER 0, mode 3, binary counter mode (16-bit)
 00000343  E6 43	      C         out     _PIT_MODE,al                                        ; Select channel/mode
			      C         @IO_pause
 00000345  EB 00	     1C     jmp     $+2
 00000347  E6 40	      C         out     _PIT_0_BASE,al                                      ; Send low byte
 00000349  86 E0	      C         xchg    ah,al
			      C         @IO_pause
 0000034B  EB 00	     1C     jmp     $+2
 0000034D  E6 40	      C         out     _PIT_0_BASE,al                                      ; Send high byte
			      C 
 0000034F  C3		      C         ret
 00000350		      C     invTIMER_set_interrupt_interval     ENDP
			      C 
			      C 
			      C 
			      C 
 00000350		      C     iTIMER_activate_DEBI_timer_feed     PROC
			      C     ; This routine is called by DEBI to indicate that a timer feed is requested
			      C     ; The timer gives iDEBI_timer_interface() a call 18.2 times per second
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The timer feed begins
			      C     ;
 00000350  1E		      C         push    ds
 00000351  66| 2E: 8E 1D      C         mov     ds,cs:data_segment
	   000025CE R
 00000359  C7 05 00000453 R   C         mov     ds:debi_timer_feed,1
	   00000001
 00000363  C7 05 00000457 R   C         mov     ds:debi_timer_counter,0
	   00000000
 0000036D  1F		      C         pop     ds
 0000036E  CB		      C         retf
 0000036F		      C     iTIMER_activate_DEBI_timer_feed     ENDP
			      C 
			      C 
			      C 
			      C 
 0000036F		      C     iTIMER_deactivate_DEBI_timer_feed       PROC
			      C     ; This routine is called by DEBI to indicate that a timer feed is requested
			      C     ; The timer gives iDEBI_timer_interface() a call 18.2 times per second
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The timer feed is stopped
			      C     ;
 0000036F  1E		      C         push    ds
 00000370  66| 2E: 8E 1D      C         mov     ds,cs:data_segment
	   000025CE R
 00000378  C7 05 00000453 R   C         mov     ds:debi_timer_feed,0
	   00000000
 00000382  1F		      C         pop     ds
 00000383  CB		      C         retf
 00000384		      C     iTIMER_deactivate_DEBI_timer_feed       ENDP
			      C 
			      C 
			      C 
			      C 
 00000384		      C     TIMER_wait_next_tick    PROC
			      C     ; This routine waits for the next system tick to come
 00000384  9C		      C         pushfd
 00000385  50		      C         push    eax
 00000386  56		      C         push    esi
 00000387  1E		      C         push    ds
			      C 
			      C     ;; Setup ds to point to the system memory area
 00000388  B8 000000A8	      C         mov     eax,_sSYSTEM
 0000038D  66| 8E D8	      C         mov     ds,ax
 00000390  BE 0000000B	      C         mov     esi,_SYSTEM_182S_OF_A_SECOND
			      C 
			      C     ;; Wait for change
 00000395  8A 06	      C         mov     al,byte ptr ds:[esi]
 00000397		      C       @@:
 00000397  38 06	      C         cmp     byte ptr ds:[esi],al
 00000399  74 FC	      C         jz      @B
			      C 
			      C     ;; We're done
 0000039B  1F		      C         pop     ds
 0000039C  5E		      C         pop     esi
 0000039D  58		      C         pop     eax
 0000039E  9D		      C         popfd
 0000039F  CB		      C         retf
 000003A0		      C     TIMER_wait_next_tick    ENDP
			      C 
			      C 
			      C 
			      C 
 000003A0		      C     TIMER_wait_full_tick    PROC
			      C     ; This routine waits for one full system tick to go by
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    At least one full tick has passed
			      C     ;
			      C     ; * Note:  This algorithm waits for two tick changes because it's never known how close to the end of the first tick we were
			      C     ;          when this routine was called.  The only way to be sure we've waited at least one full tick is to wait for two.
			      C     ;
 000003A0  50		      C         push    eax
 000003A1  56		      C         push    esi
 000003A2  1E		      C         push    ds
 000003A3  9C		      C         pushfd
			      C 
			      C       ;; Setup ds to point to the system memory area
 000003A4  B8 000000A8	      C         mov     eax,_sSYSTEM
 000003A9  66| 8E D8	      C         mov     ds,ax
 000003AC  BE 0000000B	      C         mov     esi,_SYSTEM_182S_OF_A_SECOND
			      C 
			      C       ;; Wait for first change
 000003B1  8A 06	      C         mov     al,byte ptr ds:[esi]
 000003B3		      C       @@:
 000003B3  38 06	      C         cmp     byte ptr ds:[esi],al
 000003B5  74 FC	      C         jz      @B
			      C 
			      C       ;; Wait for second change
 000003B7  8A 06	      C         mov     al,byte ptr ds:[esi]
 000003B9		      C       @@:
 000003B9  38 06	      C         cmp     byte ptr ds:[esi],al
 000003BB  74 FC	      C         jz      @B
			      C 
			      C       ;; We're done
 000003BD  9D		      C         popfd
 000003BE  1F		      C         pop     ds
 000003BF  5E		      C         pop     esi
 000003C0  58		      C         pop     eax
 000003C1  CB		      C         retf
 000003C2		      C     TIMER_wait_full_tick    ENDP
			      C 
			      C 
			      C 
			      C 
 000003C2		      C     TIMER_wait_x_ticks      PROC
			      C     ; This routine waits for a user-specified number of ticks to go by (this is 1/182 of a second)
			      C     ;
			      C     ; Upon entry:   param1 - Number of ticks to wait
			      C     ;
			      C       ; [ebp+12] - dword, Number of ticks to wiat
			      C       ; [ebp+08] - dword, cs
			      C       ; [ebp+04] - dword, eip
			      C       ; [ebp+00] - dword, ebp
 000003C2  C8 0000 00	      C         enter   0,0
 000003C6  50		      C         push    eax
 000003C7  56		      C         push    esi
 000003C8  1E		      C         push    ds
 000003C9  51		      C         push    ecx
 000003CA  9C		      C         pushfd
			      C 
 000003CB  B8 000000A8	      C         mov     eax,_sSYSTEM
 000003D0  8E D8	      C         mov     ds,eax
 000003D2  BE 0000000B	      C         mov     esi,_SYSTEM_182S_OF_A_SECOND
			      C 
			      C       ;; Get the count parameter
 000003D7  8B 4D 0C	      C         mov     ecx,dword ptr ss:[ebp+12]
 000003DA  41		      C         inc     ecx                                                 ; +1 for the reasons stated in TIMER_wait_full_tick()
 000003DB		      C       wait_x_ticks_loop:
 000003DB  8A 06	      C         mov     al,byte ptr ds:[esi]
 000003DD		      C       @@:
 000003DD  38 06	      C         cmp     byte ptr ds:[esi],al
 000003DF  74 FC	      C         jz      @B
 000003E1  E2 F8	      C         loopd   wait_x_ticks_loop                                   ; Wait until their count has gone away
			      C 
 000003E3  9D		      C         popfd
 000003E4  59		      C         pop     ecx
 000003E5  1F		      C         pop     ds
 000003E6  5E		      C         pop     esi
 000003E7  58		      C         pop     eax
 000003E8  C9		      C         leave
 000003E9  CA 0004	      C         retf    4
 000003EC		      C     TIMER_wait_x_ticks      ENDP
			      C 
			      C 
			      C 
			      C 
 000003EC		      C     TIMER_evaluate_interval     PROC
			      C     ; This routine evalutes a timer interval to report its inconsistencies
			      C     ;
			      C     ; Upon entry:  The stack is arranged as below
			      C     ;
			      C     ; Upon exit:   Values on the stack are updated, everything else is preserved
			      C     ;
			      C     ; The formula is:   counter_value = PIT_freq / their_interval (which is "User's desired frequency" on the stack)
			      C     ;                   percent = (counter_value-integer_part(counter_value)) / counter_value
			      C     ;                   gain_loss = percent * their_interval
			      C     ;                   double_interval = their_interval / gain_loss
			      C     ;
			      C     ; Example:     44100 Hz;   counter_value = 1193181 / 44100      = 27.0562585
			      C     ;                          percent = (27.0562585 - 27) / 44100  = 0.00207932
			      C     ;                          gain_loss = 0.00207932 * 44100       = 91.6978229
			      C     ;                          odd_interval = 44100 / 91.6978229    = 481
			      C     ;
			      C       ; [ebp+28] - float32,   actual_interval                       ; result
			      C       ; [ebp+24] - float32,   gain_loss                             ; result
			      C       ; [ebp+20] - float32,   odd_interval                          ; result
			      C       ; [ebp+16] - float32,   User's desired frequency              ; parameter
			      C       ; [ebp+12] - cs
			      C       ; [ebp+08] - eip
			      C       ; [ebp+04] - eflags
			      C       ; [ebp+00] - ebp
			      C       ;; Save FPU state
 000003EC  9B		      C         fwait
 000003ED  DD 75 88	      C         fnsave  ss:[ebp-120]
			      C 
 000003F0  9C		      C         pushfd
 000003F1  C8 0078 00	      C         enter   4+4+4+108,0                                         ; Add space on stack for local variables
			      C       ; [ebp-04] - dword,     const PIT frequency                   ; local (4)
			      C       ; [ebp-08] - float32,   PIT_freq / their_interval             ; local (4)
			      C       ; [ebp-12] - dword,     const 100,000                         ; local (4)
			      C       ; [ebp-120]- 108 bytes, FPU save state                        ; local (108)
			      C 
			      C       ;; Calculate gain_loss and odd_interval
 000003F5  C7 45 FC	      C         mov     dword ptr ss:[ebp-4],_PIT_FREQUENCY
	   001234DD
 000003FC  C7 45 F4	      C         mov     dword ptr ss:[ebp-12],100000
	   000186A0
 00000403  D9 45 10	      C         fld     real4 ptr ss:[ebp+16]                               ; their frequency       After this block:   st(3)
 00000406  D9 C0	      C         fld     st(0)                                               ; their frequency                           st(2)
 00000408  DB 45 FC	      C         fild    dword ptr ss:[ebp-4]                                ; PIT frequency                             st(1)
 0000040B  D9 C1	      C         fld     st(1)                                               ; their frequency                           st(0)
			      C 
 0000040D  DE F9	      C         fdivp   st(1),st(0)                                         ; After this, st(0) - PIT_freq / their_interval
 0000040F  D9 55 F8	      C         fst     real4 ptr ss:[ebp-8]
 00000412  D9 C0	      C         fld     st(0)
 00000414  D9 C0	      C         fld     st(0)                                               ; st(1) and st(2) are copies of st(0)
 00000416  D9 FC	      C         frndint                                                     ; After this, we lose the fraction in st(0)
 00000418  DE E9	      C         fsubp   st(1),st(0)                                         ; After this, st(0) is the fractional portion left over
			      C                                                                     ;             negative means loss, positive means gain
 0000041A  DE F1	      C         fdivrp  st(1),st(0)                                         ; After this, st(0) is the % off the desired interval
 0000041C  DE C9	      C         fmulp   st(1),st(0)                                         ; After this, st(0) is # of cycles gaining/losing per second
			      C 
			      C       ;; Store results
 0000041E  D9 55 18	      C         fst     real4 ptr ss:[ebp+24]                               ; result; gain_loss
 00000421  DE F9	      C         fdivp   st(1),st(0)                                         ; After this, st(0) holds the double-increment value
 00000423  D9 5D 14	      C         fstp    real4 ptr ss:[ebp+20]                               ; result; odd_interval
			      C 
			      C       ;; Calculate actual_interval
 00000426  DB 45 FC	      C         fild    dword ptr ss:[ebp-4]                                ; Load PIT frequency
 00000429  DB 45 F4	      C         fild    dword ptr ss:[ebp-12]                               ; Load 100,000
 0000042C  DE C9	      C         fmulp   st(1),st(0)                                         ; After this, st(0) is PIT frequency * 100000
			      C 
 0000042E  D9 45 10	      C         fld     real4 ptr ss:[ebp+16]                               ; Load PIT_freq / their interval
 00000431  DB 45 FC	      C         fild    dword ptr ss:[ebp-4]                                ; Load 100,000
 00000434  DE C9	      C         fmulp   st(1),st(0)                                         ; After this, st(0) is (PIT_freq / their_interval) * 100000
			      C 
 00000436  DE F9	      C         fdivp   st(1),st(0)                                         ; After this, st(0) is actual frequency
			      C       ;; Store result
 00000438  D9 5D 1C	      C         fstp    real4 ptr ss:[ebp+28]                               ; result; actual_frequency
			      C 
			      C       ;; Restore the FPU and return
 0000043B  DD 65 88	      C         frstor  ss:[ebp-120]
			      C 
 0000043E  C9		      C         leave
 0000043F  9D		      C         popfd
 00000440  CA 0004	      C         retf    4
 00000443		      C     TIMER_evaluate_interval     ENDP
			      C 
			      C 
			      C 
			      C 
			      C ; DATA
 00000443 00000000	      C     timer_max_hz                            dd  0
 00000447		      C     timer_max_value                         dq  0
	   0000000000000000
 0000044F 433610A2	      C     timer_interval                          real4 182.064971924
 00000453 00000000	      C     debi_timer_feed                         dd  0
 00000457 00000000	      C     debi_timer_counter                      dd  0
			      C 
				    INCLUDE tasks.asp
			      C ; tasks.asp
			      C ;
			      C ; Exodus BIOS related task functions
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
 0000045B		      C     initialize_TASKING      PROC
			      C     ; This routine is initializes the tasking sub-system.  It is called during bootup initialization and is only called once.
			      C     ; After this routine is called, all Exodus Tasking features are fully available.
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The tasking subsystem is fully initialized
			      C     ;
 0000045B  60		      C         pushad
 0000045C  1E		      C         push    ds
			      C 
			      C 
			      C       ;; Initialize header
 0000045D  B8 000001A0	      C         mov     eax,_sTASK_SYSTEM
 00000462  8E D8	      C         mov     ds,eax
 00000464  67& C7 06 0000     C         mov     dword ptr ds:[_TASK_SYSTEM_NEXT_OFFSET],_TASK_ENTRY_LENGTH + (_FIRST_TASK_ENTRY*2)
	   000000C0
 0000046D  67& 66| C7 06      C         mov     word ptr  ds:[_TASK_SYSTEM_NEXT_HANDLE],100
	   0004 0064
 00000475  67& 66| C7 06      C         mov     word ptr  ds:[_TASK_SYSTEM_CURRENT_TASK_TSS],_sEXODUS_TSS
	   0006 0070
 0000047D  67& C7 06 0008     C         mov     dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET],_FIRST_TASK_ENTRY
	   00000040
 00000486  67& C7 06 000C     C         mov     dword ptr ds:[_TASK_SYSTEM_TOTAL_ENTRIES_BASE_0],1
	   00000001
			      C 
			      C 
			      C       ;; Initialize the structure for the currently executing task (created at bootup)
 0000048F  BF 00000040	      C         mov     edi,_FIRST_TASK_ENTRY
 00000494  66| C7 07 0001     C         mov     word ptr  ds:[edi+_TASK_ENTRY_HANDLE],1
 00000499  66| C7 47 02	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_GDT_TSS],_sEXODUS_TSS
	   0070
 0000049F  66| C7 47 04	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_GDT_LDT],0ffffh
	   FFFF
 000004A5  66| C7 47 06	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_SELECTOR_OBJECTS],_sEXODUS_OBJECTS
	   0100
 000004AB  66| C7 47 08	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_FOCUS_BO],-1
	   FFFF
 000004B1  66| C7 47 0C	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_FOCUS_O],-1
	   FFFF
 000004B7  C6 47 10 01	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_TICKS],1
 000004BB  C6 47 11 01	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_MODE],_LINEAR
 000004BF  66| C7 47 12	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_USES_FPU],1
	   0001
 000004C5  C7 47 14	      C         mov     dword ptr ds:[edi+_TASK_ENTRY_TSS_LINEAR_OFFSET],_sEXODUS_TSS_base
	   00068100
 000004CC  C6 47 18 01	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_TICKS_LEFT],1
			      C 
			      C 
			      C       ;; Initialize the entry for the Exodus slave task
 000004D0  83 C7 40	      C         add     edi,_FIRST_TASK_ENTRY
 000004D3  66| C7 07 0002     C         mov     word ptr  ds:[edi+_TASK_ENTRY_HANDLE],2
 000004D8  66| C7 47 02	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_GDT_TSS],_sEXODUS_SLAVE_TSS
	   0080
 000004DE  66| C7 47 04	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_GDT_LDT],0ffffh
	   FFFF
 000004E4  66| C7 47 06	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_SELECTOR_OBJECTS],-1
	   FFFF
 000004EA  66| C7 47 08	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_FOCUS_BO],-1
	   FFFF
 000004F0  66| C7 47 0C	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_FOCUS_O],-1
	   FFFF
 000004F6  C6 47 10 01	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_TICKS],1
 000004FA  C6 47 11 82	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_MODE],_SUSPENDED OR _SLAVE
 000004FE  66| C7 47 12	      C         mov     word ptr  ds:[edi+_TASK_ENTRY_USES_FPU],1
	   0001
 00000504  C7 47 14	      C         mov     dword ptr ds:[edi+_TASK_ENTRY_TSS_LINEAR_OFFSET],_sEXODUS_SLAVE_TSS_base
	   00068200
 0000050B  C6 47 18 01	      C         mov     byte ptr  ds:[edi+_TASK_ENTRY_TICKS_LEFT],1
			      C 
			      C 
			      C       ;; Initialize the object space for this task
 0000050F  B8 00000100	      C         mov     eax,_sEXODUS_OBJECTS
			      C         callf   iOBJECT_initialize_object_space
			     1C ; This macro:   callf   function_name
 00000514  0E		     1C     push    cs
 00000515  E8 000005BE	     1C     call    iOBJECT_initialize_object_space
			      C 
			      C 
			      C       ;; Initialize the regs and addresses to use for the _sTASK_SWITCH_TSS
 0000051A  BB 00000040	      C         mov     ebx,_sALL_MEM
 0000051F  8E DB	      C         mov     ds,ebx
 00000521  BE 00068000	      C         mov     esi,_sTASK_SWITCH_TSS_base
			      C       ; Right now, ds:[esi] - far ptr to TSS base
			      C       ; Segment registers
 00000526  BB 000001A0	      C         mov     ebx,_sTASK_SYSTEM
 0000052B  89 5E 54	      C         mov     dword ptr ds:[esi+_TSS_DS],ebx
 0000052E  89 5E 48	      C         mov     dword ptr ds:[esi+_TSS_ES],ebx
 00000531  2E: 0F B7 1D	      C         movzx   ebx,cs:data_segment
	   000025CE R
 00000539  89 5E 58	      C         mov     dword ptr ds:[esi+_TSS_FS],ebx
 0000053C  BB 00000040	      C         mov     ebx,_sALL_MEM
 00000541  89 5E 5C	      C         mov     dword ptr ds:[esi+_TSS_GS],ebx
			      C       ; Where cs:eip starts
 00000544  8C CB	      C         mov     ebx,cs
 00000546  89 5E 4C	      C         mov     dword ptr ds:[esi+_TSS_CS],ebx
 00000549  BB 00000A26 R      C         mov     ebx,offset invTASK_switch_task
 0000054E  89 5E 20	      C         mov     dword ptr ds:[esi+_TSS_EIP],ebx
			      C       ; Stack
 00000551  BB 00000118	      C         mov     ebx,_sTASK_STACK
 00000556  89 5E 50	      C         mov     dword ptr ds:[esi+_TSS_SS],ebx
 00000559  C7 46 38	      C         mov     dword ptr ds:[esi+_TSS_ESP],_sTASK_STACK_limit
	   00008000
			      C 
 00000560  1F		      C         pop     ds
 00000561  61		      C         popad
 00000562  C3		      C         ret
 00000563		      C     initialize_TASKING      ENDP
			      C 
			      C 
			      C 
			      C 
			      C     ; iTASK_mouse_interface()
			      C     ; invTASK_adjust_mouse_coordinates()
			      C     INCLUDE mouse.asp
			      C ; mouse.asp
			      C ;
			      C ; Exodus TASK Mouse Handler
			      C ;          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C ; * Note * ´ This is not a mouse driver!! ³
			      C ;          ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÙ
			      C ;          It just handles information sent from the mouse driver.
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C ; Status
 00000563 00000000	      C mouse_status                    dd  0                               ; Is mouse displayed?  1-Yes, 0-No
 00000567 00000000	      C mouse_pointer_type              dd  0                               ; Refer to INF\MOUSE.INF or VGA\MOUSE.FNT
 0000056B 00000000	      C mouse_processing                dd  0                               ; Is this program processing?  1-Yes, 0-No
 0000056F 00000000	      C dragging_something              dd  0                               ; Dragging something?  1-Yes, 0-No
			      C 
			      C ; Mouse coordinates
 00000573 000000A0	      C mouse_current_x                 dd  160
 00000577 00000064	      C mouse_current_y                 dd  100
 0000057B FFFFFFFF	      C mouse_hovering_x                dd  0ffffffffh
 0000057F FFFFFFFF	      C mouse_hovering_y                dd  0ffffffffh
 00000583  00000140 [	      C mouse_pointer_save_area         db  16*20 dup(0)
	    00
	   ]
			      C 
			      C ; Dragging activity
 000006C3 00000000	      C dragging_x                      dd  0
 000006C7 00000000	      C dragging_y                      dd  0
 000006CB 00000000	      C dragging_height                 dd  0
 000006CF 00000000	      C dragging_width                  dd  0
 000006D3 00000000	      C dragging_offset_x               dd  0
 000006D7 00000000	      C dragging_offset_y               dd  0
 000006DB 00000000	      C dragging_snap_x                 dd  0
 000006DF 00000000	      C dragging_snap_y                 dd  0
 000006E3 00000000	      C dragging_last_x                 dd  0
 000006E7 00000000	      C dragging_last_y                 dd  0
 000006EB 00000000	      C dragging_skipped                dd  0
			      C 
			      C ; Counts used to activate various things
 000006EF 0000005B	      C mouse_hovering_count_start      dd  91
 000006F3 FFFFFFFF	      C mouse_hovering_count            dd  0ffffffffh
 000006F7 0000001E	      C mouse_clicking_count_start      dd  30
 000006FB FFFFFFFF	      C mouse_clicking_count            dd  0ffffffffh
 000006FF 00000002	      C mouse_immediate_count_start     dd  2
 00000703 FFFFFFFF	      C mouse_immediate_count           dd  0ffffffffh
			      C 
			      C ; Relating to click activity
 00000707 00		      C mouse_last_event                db  0                               ; Relates to clicking or dragging
 00000708 00000000	      C mouse_right_click_x_start       dd  0
 0000070C 00000000	      C mouse_right_click_y_start       dd  0
 00000710 00000000	      C mouse_left_click_x_start        dd  0
 00000714 00000000	      C mouse_left_click_y_start        dd  0
 00000718 00000000	      C mouse_right_click_x_stop        dd  0
 0000071C 00000000	      C mouse_right_click_y_stop        dd  0
 00000720 00000000	      C mouse_left_click_x_stop         dd  0
 00000724 00000000	      C mouse_left_click_y_stop         dd  0
 00000728 00000000	      C mouse_right_click               dd  0
 0000072C 00000000	      C mouse_left_click                dd  0
 00000730 00000000	      C mouse_both_click                dd  0
 00000734 00000000	      C mouse_left_dragging             dd  0
 00000738 00000000	      C mouse_right_dragging            dd  0
			      C 
			      C ; Relating to button activity
 0000073C 00000000	      C mouse_last_buttons              dd  0                               ; Button status from previous mouse packet
 00000740 00000000	      C mouse_last_button_left          dd  0
 00000744 00000000	      C mouse_last_button_right         dd  0
 00000748 00000000	      C mouse_button_left               dd  0
 0000074C 00000000	      C mouse_button_right              dd  0
			      C 
			      C ; Relating to screen saver
 00000750 00000000	      C screen_saver_active             dd  0                               ; 1-Yes, 0-No
 00000754 00004718	      C screen_saver_count              dd  18200                           ; 100 seconds
 00000758 00004718	      C screen_saver_count_start        dd  18200
			      C 
			      C 
			      C 
			      C 
			      C 
 0000075C		      C     iTASK_mouse_interface       PROC
			      C     ; This routine is called when there is mouse information for Exodus
			      C     ;
			      C     ; Upon entry:   eax = X delta
			      C     ;               edx = Y delta
			      C     ;               ebx = button status
			      C     ;
			      C     ; Upon exit:    The mouse information is updated
			      C     ;
 0000075C  1E		      C         push    ds
 0000075D  60		      C         pushad
 0000075E  66| 2E: 8E 1D      C         mov     ds,cs:data_segment
	   000025CE R
			      C 
			      C 
			      C       ;; Cancel screen saver (if it's active)
			      C         .IF (ds:screen_saver_active == 1)
 00000766  83 3D 00000750 R
	   01		   *	    cmp    ds : screen_saver_active, 001h
 0000076D  75 11	   *	    jne    @C0054
 0000076F  E8 00000236	      C             call    invTASK_cancel_screen_saver
 00000774  8B 0D 00000758 R   C             mov     ecx,ds:screen_saver_count_start
 0000077A  89 0D 00000754 R   C             mov     ds:screen_saver_count,ecx
			      C         .ENDIF
 00000780		   *@C0054:
			      C 
			      C 
			      C       ;; Remove the mouse pointer that's already displayed
			      C         .IF (ds:mouse_processing == 0 && ds:mouse_status == 1)
 00000780  83 3D 0000056B R
	   00		   *	    cmp    ds : mouse_processing, 000h
 00000787  75 22	   *	    jne    @C0056
 00000789  83 3D 00000563 R
	   01		   *	    cmp    ds : mouse_status, 001h
 00000790  75 19	   *	    jne    @C0056
 00000792  C7 05 0000056B R   C             mov     ds:mouse_processing,1
	   00000001
 0000079C  E8 00000194	      C             call    invTASK_hide_mouse_pointer
 000007A1  C7 05 0000056B R   C             mov     ds:mouse_processing,0
	   00000000
			      C         .ENDIF
 000007AB		   *@C0056:
			      C 
			      C 
			      C       ;; Update to new mouse coordinates
 000007AB  E8 0000006F	      C         call    invTASK_adjust_mouse_coordinates
			      C 
			      C 
			      C       ;; Process the data
			      C         .IF (ds:mouse_processing == 0)
 000007B0  83 3D 0000056B R
	   00		   *	    cmp    ds : mouse_processing, 000h
 000007B7  75 63	   *	    jne    @C0059
 000007B9  C7 05 0000056B R   C             mov     ds:mouse_processing,1
	   00000001
			      C             .IF (ebx != 0 || ebx != ds:mouse_last_buttons)
 000007C3  0B DB	   *	    or	ebx, ebx
 000007C5  75 08	   *	    jne    @C005C
 000007C7  3B 1D 0000073C R *	    cmp    ebx, ds : mouse_last_buttons
 000007CD  74 07	   *	    je     @C005B
 000007CF		   *@C005C:
			      C               ; There is button activity
			      C               ; This process might take a bit of time to complete so we indicate we're processing thereby removing
			      C               ; the possibility of attempted processing in the future until such time as all the processing we're about
			      C               ; to start gets completed.
 000007CF  E8 000001D4	      C                 call    invTASK_mouse_button_activity
			      C             .ELSE
 000007D4  EB 3C	   *	    jmp    @C005E
 000007D6		   *@C005B:
			      C               ; No button activity
			      C               ; We still have to see if we're over anything that needs to be updated because we also display information about
			      C               ; certain things in the Quick Watch window.  Isn't it great? :)
 000007D6  8B 15 00000573 R   C                 mov     edx,ds:mouse_current_x
 000007DC  89 15 0000057B R   C                 mov     ds:mouse_hovering_x,edx
 000007E2  8B 15 00000577 R   C                 mov     edx,ds:mouse_current_y
 000007E8  89 15 0000057F R   C                 mov     ds:mouse_hovering_y,edx
 000007EE  8B 0D 000006EF R   C                 mov     ecx,ds:mouse_hovering_count_start
 000007F4  89 0D 000006F3 R   C                 mov     ds:mouse_hovering_count,ecx
 000007FA  C6 05 00000707 R   C                 mov     ds:mouse_last_event,_HOVER
	   0A
 00000801  8B 0D 000006FF R   C                 mov     ecx,ds:mouse_immediate_count_start
 00000807  89 0D 00000703 R   C                 mov     ds:mouse_immediate_count,ecx
 0000080D  E8 00000150	      C                 call    invTASK_show_mouse_pointer
			      C             .ENDIF
 00000812		   *@C005E:
 00000812  C7 05 0000056B R   C             mov     ds:mouse_processing,0
	   00000000
			      C         .ENDIF
 0000081C		   *@C0059:
			      C 
 0000081C  61		      C         popad
 0000081D  1F		      C         pop     ds
 0000081E  CB		      C         retf
 0000081F		      C     iTASK_mouse_interface       ENDP
			      C 
			      C 
			      C 
			      C 
 0000081F		      C     invTASK_adjust_mouse_coordinates        PROC
			      C     ; This routine is called to adjust the mouse coordinates
			      C     ;
			      C     ; Upon entry:   eax - X delta
			      C     ;               edx - Y delta
			      C     ;               ebx - buton status
			      C     ;
			      C     ; Upon exit:    mouse_current_x - updated
			      C     ;               mouse_current_y - updated
			      C     ;
 0000081F  06		      C         push    es
 00000820  B9 000000A8	      C         mov     ecx,_sSYSTEM
 00000825  8E C1	      C         mov     es,ecx
			      C 
			      C       ; Adjust the mouse based on the distance it's moved
 00000827  01 05 00000573 R   C         add     ds:mouse_current_x,eax
 0000082D  01 15 00000577 R   C         add     ds:mouse_current_y,edx
			      C 
			      C       ; Find the maximum coordinates
 00000833  67& 26: 0F B7 06   C         movzx   eax,word ptr es:[_SYSTEM_VGA_HORIZONTAL]
	   0020
 0000083A  48		      C         dec     eax                                                 ; Change base-1 to base-0
 0000083B  67& 26: 0F B7 16   C         movzx   edx,word ptr es:[_SYSTEM_VGA_VERTICAL]
	   0022
 00000842  4A		      C         dec     edx                                                 ; Change base-1 to base-0
			      C       ; Right now, eax - maximum horizontal
			      C       ;            edx - maximum vertical
			      C 
			      C         .IF (ds:dragging_something == 0)
 00000843  83 3D 0000056F R
	   00		   *	    cmp    ds : dragging_something, 000h
 0000084A  75 57	   *	    jne    @C005F
			      C           ; Verify X
			      C             .IF (ds:mouse_current_x > 7fffffffh)
 0000084C  81 3D 00000573 R
	   7FFFFFFF	   *	    cmp    ds : mouse_current_x, 07FFFFFFFh
 00000856  76 0C	   *	    jbe    @C0061
			      C               ; It's negative (it's off the left of the screen or it's at the very left of the screen)
 00000858  C7 05 00000573 R   C                 mov     ds:mouse_current_x,0
	   00000000
			      C             .ELSEIF (ds:mouse_current_x > eax)
 00000862  EB 0D	   *	    jmp    @C0063
 00000864		   *@C0061:
 00000864  39 05 00000573 R *	    cmp    ds : mouse_current_x, eax
 0000086A  76 05	   *	    jbe    @C0064
			      C               ; It's heading off the right side of the screen
 0000086C  A3 00000573 R      C                 mov     ds:mouse_current_x,eax
			      C             .ENDIF
			      C 
			      C           ; Verify Y
			      C             .IF (ds:mouse_current_y > 7fffffffh)
 00000871		   *@C0064:
 00000871		   *@C0063:
 00000871  81 3D 00000577 R
	   7FFFFFFF	   *	    cmp    ds : mouse_current_y, 07FFFFFFFh
 0000087B  76 0F	   *	    jbe    @C0066
			      C               ; It's negative (it's above the top of the screen or it's at the very top of the screen)
 0000087D  C7 05 00000577 R   C                 mov     ds:mouse_current_y,0
	   00000000
			      C             .ELSEIF (ds:mouse_current_y > edx)
 00000887  E9 000000A7	   *	    jmp    @C0068
 0000088C		   *@C0066:
 0000088C  39 15 00000577 R *	    cmp    ds : mouse_current_y, edx
 00000892  0F 86 0000009B  *	    jbe    @C0069
			      C               ; It's heading off the bottom of the screen
 00000898  89 15 00000577 R   C                 mov     ds:mouse_current_y,edx
			      C             .ENDIF
			      C         .ELSE
 0000089E  E9 00000090	   *	    jmp    @C006B
 000008A3		   *@C005F:
			      C           ; The mouse is only allowed to move in certain areas when something is being dragged
			      C           ; This logic is a little more complex than the above no-drag logic
			      C 
			      C           ; Make sure they're not negative
			      C             .IF (ds:mouse_current_x > 7fffffffh)
 000008A3  81 3D 00000573 R
	   7FFFFFFF	   *	    cmp    ds : mouse_current_x, 07FFFFFFFh
 000008AD  76 06	   *	    jbe    @C006C
 000008AF  F7 1D 00000573 R   C                 neg     ds:mouse_current_x
			      C             .ENDIF
			      C             .IF (ds:mouse_current_y > 7fffffffh)
 000008B5		   *@C006C:
 000008B5  81 3D 00000577 R
	   7FFFFFFF	   *	    cmp    ds : mouse_current_y, 07FFFFFFFh
 000008BF  76 06	   *	    jbe    @C006E
 000008C1  F7 1D 00000577 R   C                 neg     ds:mouse_current_y
			      C             .ENDIF
			      C 
			      C           ; Verify X
 000008C7		   *@C006E:
 000008C7  8B 0D 00000573 R   C             mov     ecx,ds:mouse_current_x
 000008CD  2B 0D 000006D3 R   C             sub     ecx,ds:dragging_offset_x
			      C             .IF (carry?)
 000008D3  73 0A	   *	    jae    @C0070
			      C               ; We're less than zero
 000008D5  F7 D9	      C                 neg     ecx
 000008D7  01 0D 00000573 R   C                 add     ds:mouse_current_x,ecx
			      C             .ELSE
 000008DD  EB 1E	   *	    jmp    @C0072
 000008DF		   *@C0070:
			      C               ; We're good on the left-side.  Now, how about the right?
 000008DF  8B 0D 00000573 R   C                 mov     ecx,ds:mouse_current_x
 000008E5  2B 0D 000006D3 R   C                 sub     ecx,ds:dragging_offset_x
 000008EB  03 0D 000006CF R   C                 add     ecx,ds:dragging_width
			      C                 .IF (ecx > eax)
 000008F1  3B C8	   *	    cmp    ecx, eax
 000008F3  76 08	   *	    jbe    @C0073
			      C                   ; We're to far
 000008F5  2B C8	      C                     sub     ecx,eax
 000008F7  29 0D 00000573 R   C                     sub     ds:mouse_current_x,ecx
			      C                 .ENDIF
			      C             .ENDIF
 000008FD		   *@C0073:
			      C 
			      C           ; Verify Y
 000008FD		   *@C0072:
 000008FD  8B 0D 00000577 R   C             mov     ecx,ds:mouse_current_y
 00000903  2B 0D 000006D7 R   C             sub     ecx,ds:dragging_offset_y
			      C             .IF (carry?)
 00000909  73 0A	   *	    jae    @C0075
			      C               ; We're less than zero
 0000090B  F7 D9	      C                 neg     ecx
 0000090D  01 0D 00000577 R   C                 add     ds:mouse_current_y,ecx
			      C             .ELSE
 00000913  EB 1E	   *	    jmp    @C0077
 00000915		   *@C0075:
			      C               ; We're good on the top.  Now, how about the bottom?
 00000915  8B 0D 00000577 R   C                 mov     ecx,ds:mouse_current_y
 0000091B  2B 0D 000006D7 R   C                 sub     ecx,ds:dragging_offset_y
 00000921  03 0D 000006CB R   C                 add     ecx,ds:dragging_height
			      C                 .IF (ecx > edx)
 00000927  3B CA	   *	    cmp    ecx, edx
 00000929  76 08	   *	    jbe    @C0078
			      C                   ; We're to far
 0000092B  2B CA	      C                     sub     ecx,edx
 0000092D  29 0D 00000577 R   C                     sub     ds:mouse_current_y,ecx
			      C                 .ENDIF
			      C             .ENDIF
 00000933		   *@C0078:
			      C         .ENDIF
 00000933		   *@C0077:
 00000933		   *@C006B:
 00000933		   *@C0069:
 00000933		   *@C0068:
			      C 
 00000933  07		      C         pop     es
 00000934  C3		      C         ret
 00000935		      C     invTASK_adjust_mouse_coordinates        ENDP
			      C 
			      C 
			      C 
			      C 
 00000935		      C     invTASK_hide_mouse_pointer      PROC
			      C     ; This routine is called when they want to hide the mouse pointer
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The mouse pointer is displayed
			      C     ;
 00000935  9C		      C         pushfd
 00000936  FF 35 00000573 R   C         push    dword ptr ds:mouse_current_x
 0000093C  FF 35 00000577 R   C         push    dword ptr ds:mouse_current_y
 00000942  6A 00	      C         push    0                                                   ; 0-hide, 1-show
 00000944  FF 35 00000567 R   C         push    dword ptr ds:mouse_pointer_type                     ; mouse pointer type
 0000094A  68 00000583 R      C         push    dword ptr offset mouse_pointer_save_area
 0000094F  FA		      C         cli
 00000950  FF 1D 000025E0 R   C         call    fword ptr ds:_VID_g_mouse_pointer
 00000956  C7 05 00000563 R   C         mov     ds:mouse_status,0
	   00000000
 00000960  9D		      C         popfd
 00000961  C3		      C         ret
 00000962		      C     invTASK_hide_mouse_pointer      ENDP
			      C 
			      C 
			      C 
			      C 
 00000962		      C     invTASK_show_mouse_pointer      PROC
			      C     ; This routine is called when they want to show the mouse pointer
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The mouse pointer is displayed
			      C     ;
			      C .IF (ds:mouse_current_x > 320 || ds:mouse_current_y > 200)
 00000962  81 3D 00000573 R
	   00000140	   *	    cmp    ds : mouse_current_x, 00140h
 0000096C  77 0C	   *	    ja     @C007B
 0000096E  81 3D 00000577 R
	   000000C8	   *	    cmp    ds : mouse_current_y, 0C8h
 00000978  76 01	   *	    jbe    @C007A
 0000097A		   *@C007B:
 0000097A  CC		      C     int 3
			      C .ENDIF
 0000097B		   *@C007A:
 0000097B  9C		      C         pushfd
 0000097C  FF 35 00000573 R   C         push    dword ptr ds:mouse_current_x
 00000982  FF 35 00000577 R   C         push    dword ptr ds:mouse_current_y
 00000988  6A 01	      C         push    1
 0000098A  FF 35 00000567 R   C         push    dword ptr ds:mouse_pointer_type                     ; mouse pointer type
 00000990  68 00000583 R      C         push    dword ptr offset mouse_pointer_save_area
 00000995  FA		      C         cli
 00000996  FF 1D 000025E0 R   C         call    fword ptr ds:_VID_g_mouse_pointer
 0000099C  C7 05 00000563 R   C         mov     ds:mouse_status,1
	   00000001
 000009A6  9D		      C         popfd
 000009A7  C3		      C         ret
 000009A8		      C     invTASK_show_mouse_pointer      ENDP
			      C 
			      C 
			      C 
			      C 
 000009A8		      C     invTASK_mouse_button_activity       PROC
			      C     ; This routine is called to process button activity
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    Any change in button activity is appropriately handled
			      C     ;
 000009A8  C3		      C         ret
 000009A9		      C     invTASK_mouse_button_activity       ENDP
			      C 
			      C 
			      C 
			      C 
 000009A9		      C     invTASK_activate_screen_saver       PROC
			      C     ; This routine is used to cancel a previously activated screen saver
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The screen is saved if it's not already in a saved screen state
			      C     ;
 000009A9  C3		      C         ret
 000009AA		      C     invTASK_activate_screen_saver       ENDP
			      C 
			      C 
			      C 
			      C 
 000009AA		      C     invTASK_cancel_screen_saver     PROC
			      C     ; This routine is used to cancel a previously activated screen saver
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The screen is restored if it was previously in a saved screen state
			      C     ;
 000009AA  C3		      C         ret
 000009AB		      C     invTASK_cancel_screen_saver     ENDP
			      C 
			      C 
			      C 
			      C 
			      C 
 000009AB		      C     iTASK_prevent_task_switch       PROC
			      C     ; This routine is called prior to doing something that might take a period of time
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    Task switching is temporarily disabled
			      C     ;
 000009AB  CB		      C         retf
 000009AC		      C     iTASK_prevent_task_switch       ENDP
			      C 
			      C 
			      C 
			      C 
 000009AC		      C     iTASK_allow_task_switch     PROC
			      C     ; This routine is called when it's once again safe to allow task switching. :)
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    Task switching is enabled
			      C     ;
 000009AC  CB		      C         retf
 000009AD		      C     iTASK_allow_task_switch     ENDP
			      C 
			      C 
			      C 
			      C 
 000009AD		      C     TASK_set_focus      PROC
			      C     ; This routine is used to set focus to a particular task
			      C     ;
			      C     ; Upon entry:   ax - handle
			      C     ;
			      C     ; Upon exit:    Focus is set to that task (if valid)
			      C     ;
 000009AD  1E		      C         push    ds
 000009AE  53		      C         push    ebx
			      C 
			      C         callf   iTASK_locate_handle
			     1C ; This macro:   callf   function_name
 000009AF  0E		     1C     push    cs
 000009B0  E8 00000048	     1C     call    iTASK_locate_handle
			      C         .IF (carry?)
 000009B5  73 02	   *	    jae    @C007D
			      C           ; It wasn't found
 000009B7  EB 12	      C             jmp     just_quit
			      C         .ENDIF
 000009B9		   *@C007D:
			      C       ; Right now, gs:[edi] - far ptr to this task
			      C 
			      C       ;; Update the task structure
 000009B9  BB 000001A0	      C         mov     ebx,_sTASK_SYSTEM
 000009BE  8E DB	      C         mov     ds,ebx
 000009C0  67& 89 3E 0010     C         mov     dword ptr ds:[_TASK_SYSTEM_FOCUS_TASK_OFFSET],edi
			      C 
			      C       ;; Redraw the object's on this task
			      C         callf   iOBJECT_redraw_task
			     1C ; This macro:   callf   function_name
 000009C5  0E		     1C     push    cs
 000009C6  E8 00001777	     1C     call    iOBJECT_redraw_task
			      C 
 000009CB		      C       just_quit:
 000009CB  5B		      C         pop     ebx
 000009CC  1F		      C         pop     ds
 000009CD  CB		      C         retf
 000009CE		      C     TASK_set_focus      ENDP
			      C 
			      C 
			      C 
			      C 
 000009CE		      C     TASK_read_events        PROC
			      C     ; This routine is called from various programs to indicate that linear processing should be terminated for the moment.
			      C     ; Only system events will trigger code execution, such as a mouse clicking on a button
			      C     ;
			      C     ; Upon entry:   ax - task handle
			      C     ;
			      C     ; Upon exit:    This function will only return control after TASK_cancel_read_events() is called.
			      C     ;               Control is never REQUIRED to continue.  The task can be run and executed entirely from objects.
			      C     ;
 000009CE  BB 000001A0	      C         mov     ebx,_sTASK_SYSTEM
 000009D3  8E DB	      C         mov     ds,ebx
 000009D5  67& 8B 1E 0008     C         mov     ebx,dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET]
 000009DA  8A 43 11	      C         mov     al,byte ptr ds:[ebx+_TASK_ENTRY_MODE]
			      C         .IF (al == _LINEAR)
 000009DD  3C 01	   *	    cmp    al, _LINEAR
 000009DF  75 04	   *	    jne    @C007F
			      C           ; They're currently in linear mode, so we can begin read events
 000009E1  C6 43 11 20	      C             mov     byte ptr ds:[ebx+_TASK_ENTRY_MODE],_READ_EVENTS
			      C         .ENDIF
 000009E5		   *@C007F:
 000009E5  EB 00	      C         jmp     TASK_release_timeslice
			      C 
			      C       ; Note, program flow will never reach this point so there's no RETF
 000009E7		      C     TASK_read_events        ENDP
			      C 
			      C 
			      C 
			      C 
 000009E7		      C     TASK_cancel_read_events     PROC
			      C     ; This routine is called to cancel a particular task's previous TASK_read_events() call.  It returns control to the linear
			      C     ; point after the call to TASK_read_events()
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    This function does not return control to the calling program.  It terminates that thread and returns
			      C     ;               control to the instruction immediately after the previous TASK_read_events() call
			      C     ;
			      C       ; Note, program flow will never reach this point so there's no RETF
 000009E7		      C     TASK_cancel_read_events     ENDP
			      C 
			      C 
			      C 
			      C 
 000009E7		      C     TASK_release_timeslice      PROC
			      C     ; This routine is used to release a timeslice
			      C     ;
			      C     ; Upon entry:   The stack is arranged as below
			      C     ;
			      C     ; Upon exit:    The timeslice has resumed
			      C     ;
 000009E7  FA		      C         cli
			      C         callg   _sTASK_SWITCH_TASK_GATE
			     1C ; This macro:   callg   _call_gate
 000009E8  9A		     1C     db  9ah
 000009E9  00000000	     1C     dd  0
 000009ED  0110		     1C     dw  _sTASK_SWITCH_TASK_GATE
			      C       ; Note, program flow will only return here when this task gets its next timeslice
 000009EF  FB		      C         sti
 000009F0  CB		      C         retf
 000009F1		      C     TASK_release_timeslice      ENDP
			      C 
			      C 
			      C 
			      C 
 000009F1		      C     Exodus_TASK_release_timeslice       PROC
			      C     ; This routine is called only from Exodus and only during idle time.
			      C     ; It was added to wait for an interrupt and then release its time slice.
			      C     ;
			      C     ; Upon entry:   Nothing
			      C     ;
			      C     ; Upon exit:    The next interrupt has occurred
			      C     ;
			      C       ; Wait for the next interrupt
 000009F1  F4		      C         hlt
			      C 
			      C       ; Switch tasks
 000009F2  FA		      C         cli
			      C         callg   _sTASK_SWITCH_TASK_GATE
			     1C ; This macro:   callg   _call_gate
 000009F3  9A		     1C     db  9ah
 000009F4  00000000	     1C     dd  0
 000009F8  0110		     1C     dw  _sTASK_SWITCH_TASK_GATE
			      C       ; Note, program flow will only return here when this task gets its next timeslice
 000009FA  FB		      C         sti
 000009FB  CB		      C         retf
 000009FC		      C     Exodus_TASK_release_timeslice       ENDP
			      C 
			      C 
			      C 
			      C 
 000009FC		      C     iTASK_kbd_interface     PROC
			      C     ; This routine is used to take a key that was input and direct it to the appropriate task's input buffer
			      C     ;
			      C     ; Upon entry:   eax - key that was pressed
			      C     ;               ebx - keyboard flags
			      C     ;
			      C     ; Upon exit:    The key is stored and control is returned
			      C     ;
 000009FC  CB		      C         retf
 000009FD		      C     iTASK_kbd_interface     ENDP
			      C 
			      C 
			      C 
			      C 
 000009FD		      C     iTASK_locate_handle     PROC
			      C     ; This routine is used to verify that a particular handle is valid and to locate it
			      C     ;
			      C     ; Upon entry:   ax - handle to search for
			      C     ;
			      C     ; Upon exit:    gs:[edi] - far ptr
			      C     ;
 000009FD  60		      C         pushad
			      C 
 000009FE  BB 000001A0	      C         mov     ebx,_sTASK_SYSTEM
 00000A03  8E EB	      C         mov     gs,ebx
 00000A05  BF 00000040	      C         mov     edi,_FIRST_TASK_ENTRY
			      C         .WHILE (edi < dword ptr gs:[_TASK_SYSTEM_NEXT_OFFSET])
 00000A0A  EB 0F	   *	    jmp    @C0081
 00000A0C		   *@C0082:
			      C             .IF (word ptr gs:[edi] == ax)
 00000A0C  66| 65: 39 07   *	    cmp    word ptr gs : [edi], ax
 00000A10  75 06	   *	    jne    @C0083
			      C               ; This is it
 00000A12  89 3C 24	      C                 mov     dword ptr ss:[esp+00],edi
 00000A15  F8		      C                 clc
 00000A16  EB 0C	      C                 jmp     quit
			      C             .ENDIF
 00000A18		   *@C0083:
 00000A18  83 C7 40	      C             add     edi,_TASK_ENTRY_LENGTH
			      C         .ENDW
 00000A1B		   *@C0081:
 00000A1B  67& 65: 3B 3E
	   0000		   *	    cmp    edi, dword ptr gs : [_TASK_SYSTEM_NEXT_OFFSET]
 00000A21  72 E9	   *	    jb     @C0082
			      C       ; It was not found
 00000A23  F9		      C         stc
			      C 
 00000A24		      C       quit:
 00000A24  61		      C         popad
 00000A25  CB		      C         retf
 00000A26		      C     iTASK_locate_handle     ENDP
			      C 
			      C 
			      C 
			      C 
 00000A26		      C     invTASK_switch_task     PROC
			      C     ; This routine is called from a task gate.  It is known that a task switch is required.
			      C     ;               ÚÄÄÄ¿
			      C     ; Upon entry:   ´CLI³ has been issued and will remain in effect throughout this code
			      C     ;               ÀÃÃÃÙ
			      C     ;
			      C     ;               All of the previous task's registers have been saved into their TSS
			      C     ;               Our TSS loads the following constants:
			      C     ;                   ds,es - _sTASK_SYSTEM
			      C     ;                   fs - data_segment
			      C     ;                   gs - _sALL_MEM
			      C     ;
			      C     ; Upon exit:    The task is switched to the next one
			      C     ;
			      C       ;;---------------------------
			      C       ;; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C       ;; ´ Search LINEAR ³ Here we look for tasks that are valid, and marked _LINEAR_MODE.
			      C       ;; ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÙ We do a top-down search from whatever the current location is
			      C       ;;                   toward the end of the task chain.  If there are no more tasks
			      C       ;;                   at the end of the chain we cycle back to the beginning.
			      C       ;;
			      C       ;;
 00000A26		      C     task_switch_start:
 00000A26  67& 8B 0E 000C     C         mov     ecx,dword ptr ds:[_TASK_SYSTEM_TOTAL_ENTRIES_BASE_0]
 00000A2B  67& 8B 36 0008     C         mov     esi,dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET]
 00000A30		      C       linear_top:
 00000A30  83 C6 40	      C         add     esi,_TASK_ENTRY_LENGTH                              ; Move to next task
			      C         .IF (esi >= ds:[_TASK_SYSTEM_NEXT_OFFSET])
 00000A33  67& 3B 36 0000  *	    cmp    esi, ds : [_TASK_SYSTEM_NEXT_OFFSET]
 00000A38  72 05	   *	    jb     @C0086
 00000A3A  BE 00000040	      C             mov     esi,_FIRST_TASK_ENTRY                           ; If this line executes, we're past the end so we start over
			      C         .ENDIF
 00000A3F		   *@C0086:
			      C 
			      C       ; See if this one meets our criteria
 00000A3F  66| 83 3E FF	      C         cmp     word ptr ds:[esi+_TASK_ENTRY_HANDLE],-1             ; Handle has to be valid
 00000A43  74 14	      C         jz      next_one
 00000A45  80 7E 11 01	      C         cmp     byte ptr ds:[esi+_TASK_ENTRY_MODE],_LINEAR          ; And it must be a linear mode task to get a timeslice
 00000A49  74 06	      C         jz      found_match
 00000A4B  80 7E 11 03	      C         cmp     byte ptr ds:[esi+_TASK_ENTRY_MODE],_SLAVE + _LINEAR
 00000A4F  75 08	      C         jnz     next_one
			      C 
 00000A51		      C       found_match:
			      C       ; We found our task
 00000A51  8A 5E 10	      C         mov     bl,byte ptr ds:[esi+_TASK_ENTRY_TICKS]              ; If here, then this is the next task
 00000A54  88 5E 18	      C         mov     byte ptr ds:[esi+_TASK_ENTRY_TICKS_LEFT],bl
 00000A57  EB 38	      C         jmp     exec_task_switch
			      C       ; If we're here, then no tasks are needing cpu time (they're all waiting for input or suspended)
			      C       ; This is idle time, so let's check if any tasks use idle processing
			      C 
 00000A59		      C       next_one:
 00000A59  49		      C         dec     ecx
 00000A5A  75 D4	      C         jnz     linear_top
			      C 
			      C 
			      C 
			      C 
			      C       ;;---------------------------
			      C       ;; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C       ;; ´ Search IDLE ³   Here we look for tasks that are valid and marked _IDLE_MODE.
			      C       ;; ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÙ   We do another top-down search (as above).  Note, the extra
			      C       ;;                   time this will take shouldn't be an issue because we're
			      C       ;;                   currently in idle mode. :)
			      C       ;;
			      C       ;;
 00000A5C  67& 8B 0E 000C     C         mov     ecx,dword ptr ds:[_TASK_SYSTEM_TOTAL_ENTRIES_BASE_0]
 00000A61  67& 8B 36 0008     C         mov     esi,dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET]
 00000A66		      C       idle_top:
 00000A66  83 C6 40	      C         add     esi,_TASK_ENTRY_LENGTH
			      C         .IF (esi >= ds:[_TASK_SYSTEM_NEXT_OFFSET])
 00000A69  67& 3B 36 0000  *	    cmp    esi, ds : [_TASK_SYSTEM_NEXT_OFFSET]
 00000A6E  72 05	   *	    jb     @C0088
			      C           ; We're passed the end, start back at the beginning
 00000A70  BE 00000040	      C             mov     esi,_FIRST_TASK_ENTRY
			      C         .ENDIF
 00000A75		   *@C0088:
			      C 
			      C       ; See if this one meets our criteria
 00000A75  66| 83 3E FF	      C         cmp     word ptr ds:[esi+_TASK_ENTRY_HANDLE],-1
 00000A79  74 0E	      C         jz      next_one2
 00000A7B  80 7E 11 40	      C         cmp     byte ptr ds:[esi+_TASK_ENTRY_MODE],_IDLE
 00000A7F  75 08	      C         jnz     next_one2
			      C 
 00000A81		      C       found_match2:
			      C       ; We found our task
 00000A81  8A 5E 10	      C         mov     bl,byte ptr ds:[esi+_TASK_ENTRY_TICKS]
 00000A84  88 5E 18	      C         mov     byte ptr ds:[esi+_TASK_ENTRY_TICKS_LEFT],bl
 00000A87  EB 08	      C         jmp     exec_task_switch
			      C 
 00000A89		      C       next_one2:
 00000A89  49		      C         dec     ecx
 00000A8A  75 DA	      C         jnz     idle_top
			      C       ; If we're here, then no tasks need linear or idle cpu time
			      C       ; We revert back to our main Exodus task and wait
 00000A8C  BE 00000040	      C         mov     esi,_FIRST_TASK_ENTRY
			      C 
			      C 
			      C 
			      C 
			      C       ;;---------------------------
			      C       ;; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C       ;; ´ Execute task switch ³    The task switch takes place to whatever task
			      C       ;; ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÙ    is currently specified.  It can be the calling
			      C       ;;                            task if only one task is currently active in
			      C       ;;                            linear mode.  That's all defined in the logic
			      C       ;;                            above.  Regardless, a task switch will occur.
			      C       ;;
 00000A91		      C     exec_task_switch:
			      C       ;; Modify the back-link to point to the correct task
 00000A91  66| 8B 5E 02	      C         mov     bx,word ptr ds:[esi+_TASK_ENTRY_GDT_TSS]
 00000A95  67& 66| 8B 16      C         mov     dx,word ptr ds:[_TASK_SYSTEM_CURRENT_TASK_TSS]
	   0006
			      C         .IF (dx != bx)
 00000A9B  66| 3B D3	   *	    cmp    dx, bx
 00000A9E  74 32	   *	    je     @C008A
			      C           ; We're going to a separate task
			      C 
			      C           ; Save the current FPU (if it needs saving)
 00000AA0  67& 8B 3E 0008     C             mov     edi,dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET]
			      C             .IF (byte ptr ds:[edi+_TASK_ENTRY_USES_FPU] != 0)
 00000AA5  80 7F 12 00	   *	    cmp    byte ptr ds : [edi + _TASK_ENTRY_USES_FPU], 000h
 00000AA9  74 08	   *	    je     @C008C
			      C               ; This task uses the FPU
 00000AAB  8B 5F 14	      C                 mov     ebx,dword ptr ds:[edi+_TASK_ENTRY_TSS_LINEAR_OFFSET]
 00000AAE  9B 65: DD 73	      C                 fsave   gs:[ebx+_TSS_FPU_SAVE_AREA]
	   68
			      C             .ENDIF
			      C 
			      C           ; Update the header info
 00000AB3		   *@C008C:
 00000AB3  67& 66| 89 1E      C             mov     word ptr ds:[_TASK_SYSTEM_CURRENT_TASK_TSS],bx
	   0006
 00000AB9  67& 66| 65: 89     C             mov     word ptr gs:[_sTASK_SWITCH_TSS+_TSS_BACK_LINK],bx
	   1E 0108
 00000AC0  67& 89 36 0008     C             mov     dword ptr ds:[_TASK_SYSTEM_CURRENT_TASK_OFFSET],esi
			      C 
			      C           ; Restore the new FPU (if it needs restoring)
			      C             .IF (byte ptr ds:[esi+_TASK_ENTRY_USES_FPU] != 0)
 00000AC5  80 7E 12 00	   *	    cmp    byte ptr ds : [esi + _TASK_ENTRY_USES_FPU], 000h
 00000AC9  74 07	   *	    je     @C008E
 00000ACB  8B 5E 14	      C                 mov     ebx,dword ptr ds:[esi+_TASK_ENTRY_TSS_LINEAR_OFFSET]
 00000ACE  65: DD 63 68	      C                 frstor  gs:[ebx+_TSS_FPU_SAVE_AREA]
			      C             .ENDIF
			      C         .ENDIF
 00000AD2		   *@C008E:
 00000AD2		   *@C008A:
 00000AD2  CF		      C         iretd
			      C 
			      C 
			      C 
			      C 
			      C       ;;---------------------------
			      C       ;; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			      C       ;; ´ After task switch ³  After the task switch, the CS:EIP value stored
			      C       ;; ÀÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÙ  in the _sTASK_SYSTEM_TSS will be the one immediately
			      C       ;;                        after the IRETD above.  So, to compensate for that
			      C       ;;                        fact we add the following JMP to go back up.
			      C       ;;
 00000AD3  E9 FFFFFF4E	      C         jmp     task_switch_start
 00000AD8		      C     invTASK_switch_task     ENDP
			      C 
				    INCLUDE objects.asp
			      C ; objects.asp
			      C ;
			      C ; Exodus BIOS Object Handler
			      C ;
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
 00000AD8		      C     iOBJECT_initialize_object_space     PROC
			      C     ; This routine is called to initialize the object space set aside by a task
			      C     ;
			      C     ; Upon entry:   eax - selector for object space
			      C     ;
			      C     ; Upon exit:    It's initialize
			      C     ;
 00000AD8  1E		      C         push    ds
			      C 
 00000AD9  8E D8	      C         mov     ds,eax
 00000ADB  67& C7 06 0000     C         mov     dword ptr dword ptr ds:[_OBJECT_HEADER_NEXT_OBJECT],_FIRST_OBJECT
	   00000010
 00000AE4  67& C7 06 0004     C         mov     dword ptr dword ptr ds:[_OBJECT_HEADER_FIRST_BASE_OBJECT],-1
	   FFFFFFFF
 00000AED  67& C7 06 0008     C         mov     dword ptr dword ptr ds:[_OBJECT_HEADER_FIRST_OBJECT],-1
	   FFFFFFFF
			      C 
 00000AF6  1F		      C         pop     ds
 00000AF7  CB		      C         retf
 00000AF8		      C     iOBJECT_initialize_object_space     ENDP
			      C 
			      C 
			      C 
			      C 
 00000AF8		      C     iOBJECT_locate_task_object      PROC
			      C     ; This routine is called to locate a particular object within a given task
			      C     ;
			      C     ; Upon entry:   es:[edi] - far ptr to this task's objects
			      C     ;                    ebx - base object handle to find
			      C     ;
			      C     ; Upon exit:    carry? - SET if not found, CLEAR if found
			      C     ;                  ebx - offset to task's base object
			      C     ;
 00000AF8  52		      C         push    edx
 00000AF9  50		      C         push    eax
			      C 
 00000AFA  67& 26: 8B 16      C         mov     edx,dword ptr es:[_OBJECT_HEADER_FIRST_BASE_OBJECT]
	   0004
 00000B00  33 C0	      C         xor     eax,eax
			      C         .WHILE (edx != -1)
 00000B02  EB 0D	   *	    jmp    @C0090
 00000B04		   *@C0091:
			      C             .IF (eax == ebx)
 00000B04  3B C3	   *	    cmp    eax, ebx
 00000B06  75 05	   *	    jne    @C0092
			      C               ; This is the one
 00000B08  8B DA	      C                 mov     ebx,edx
 00000B0A  F8		      C                 clc
 00000B0B  EB 0A	      C                 jmp     quit
			      C             .ENDIF
 00000B0D		   *@C0092:
 00000B0D  26: 8B 12	      C             mov     edx,dword ptr es:[edx+_OBJECT_NEXT_BASE_OBJECT]
 00000B10  40		      C             inc     eax
			      C         .ENDW
 00000B11		   *@C0090:
 00000B11  83 FA FF	   *	    cmp    edx, - 001h
 00000B14  75 EE	   *	    jne    @C0091
			      C       ; It wasn't found
 00000B16  F9		      C         stc
			      C 
 00000B17		      C       quit:
 00000B17  58		      C         pop     eax
 00000B18  5A		      C         pop     edx
 00000B19  CB		      C         retf
 00000B1A		      C     iOBJECT_locate_task_object      ENDP
			      C 
			      C 
			      C 
			      C 
			      C     INCLUDE create.asp                                              ; Create base objects and objects
			      C ; create.asp
			      C ;
			      C ; Exodus BIOS Object Handler - Create object algorithms
			      C ;
			      C ;   00000 - BASE OBJECTS
			      C ;   11111 - OBJECTS
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ;; 00000 - BASE OBJECTS
 00000B1A		      C     OBJECT_create_base_object       PROC
			      C     ; This routine is called to create a base object
			      C     ;
			      C     ; Upon entry:         ax - handle
			      C     ;               ds:[esi] - far ptr to base of object's parameters
			      C     ;
			      C     ; Upon exit:    carry?  CLEARÂ The object is created
			      C     ;                            À ebx - handle
			      C     ;                         SET-eax is error code
			      C     ;
 00000B1A  C8 000C 00	      C         enter   12,0
			      C       ; [ebp-04] dword, value to store for first base offset (if any)
			      C       ; [ebp-08] dword, value to store for next base offset (if any)
			      C       ; [ebp-12] dword, where to store [ebp-08]
 00000B1E  0F A8	      C         push    gs
 00000B20  60		      C         pushad
			      C 
			      C       ;; Verify that the handle they're using is a valid task
			      C         callf   iTASK_locate_handle                                 ; Returns, carry?, gs:[edi] - far ptr to TASK data structure
			     1C ; This macro:   callf   function_name
 00000B21  0E		     1C     push    cs
 00000B22  E8 FFFFFED6	     1C     call    iTASK_locate_handle
			      C         .IF (carry?)
 00000B27  73 0D	   *	    jae    @C0095
 00000B29  C7 44 24 1C	      C             mov     dword ptr ss:[esp+28],_TASK_NOT_FOUND
	   00000000
 00000B31  E9 000000EC	      C             jmp     quit
			      C         .ENDIF
 00000B36		   *@C0095:
			      C 
			      C 
			      C       ;; Get the pointer to this task's object structure
 00000B36  66| 65: 8E 47      C         mov     es,word ptr gs:[edi+_TASK_ENTRY_SELECTOR_OBJECTS]
	   06
 00000B3B  33 FF	      C         xor     edi,edi
			      C       ; Right now, es:[edi] - far ptr to the base of this task's object
			      C       ;            ds:[esi] - far ptr to the user's object definition area
 00000B3D  C7 45 FC	      C         mov     dword ptr ss:[ebp-04],-1
	   FFFFFFFF
 00000B44  C7 45 F8	      C         mov     dword ptr ss:[ebp-08],-1
	   FFFFFFFF
 00000B4B  C7 45 F4	      C         mov     dword ptr ss:[ebp-12],-1
	   FFFFFFFF
			      C 
			      C 
			      C       ;; Find out where we're adding this base object
 00000B52  26: 8B 57 04	      C         mov     edx,dword ptr es:[edi+_OBJECT_HEADER_FIRST_BASE_OBJECT]
 00000B56  26: 8B 1F	      C         mov     ebx,dword ptr es:[edi+_OBJECT_HEADER_NEXT_OBJECT]
			      C         .IF (edx == -1)
 00000B59  83 FA FF	   *	    cmp    edx, - 001h
 00000B5C  75 05	   *	    jne    @C0097
			      C           ; There isn't currently a base object for this task
			      C           ; So, we raise the flag indicating we need to set one (if creation is successful)
 00000B5E  89 5D FC	      C             mov     dword ptr ss:[ebp-04],ebx
			      C         .ELSE
 00000B61  EB 15	   *	    jmp    @C0099
 00000B63		   *@C0097:
			      C           ; We have to traverse the base objects that already exist to find the last one
 00000B63  26: 8B 57 04	      C             mov     edx,dword ptr es:[edi+_OBJECT_HEADER_FIRST_BASE_OBJECT]
			      C             .WHILE (dword ptr es:[edx+_OBJECT_NEXT_BASE_OBJECT] != -1)
 00000B67  EB 03	   *	    jmp    @C009A
 00000B69		   *@C009B:
 00000B69  26: 8B 12	      C                 mov     edx,es:[edx+_OBJECT_NEXT_BASE_OBJECT]
			      C             .ENDW
 00000B6C		   *@C009A:
 00000B6C  26: 83 3A FF	   *	    cmp    dword ptr es : [edx + _OBJECT_NEXT_BASE_OBJECT], - 001h
 00000B70  75 F7	   *	    jne    @C009B
			      C           ; Right now, es:[edx] - far ptr to the last base object
 00000B72  89 5D F8	      C             mov     dword ptr ss:[ebp-08],ebx
 00000B75  89 55 F4	      C             mov     dword ptr ss:[ebp-12],edx
			      C         .ENDIF
 00000B78		   *@C0099:
 00000B78  8B D3	      C         mov     edx,ebx
			      C       ; Right now, es:[edx] - far ptr to the slot for this base object
			      C 
			      C 
			      C       ;; Initialize common header fields
 00000B7A  26: C7 02	      C         mov     dword ptr es:[edx+_OBJECT_NEXT_BASE_OBJECT],-1
	   FFFFFFFF
 00000B81  26: C7 42 08	      C         mov     dword ptr es:[edx+_OBJECT_FIRST_OBJECT],-1
	   FFFFFFFF
			      C 
			      C 
			      C       ;; Call appropriate base object initialization routine
 00000B89  8A 06	      C         mov     al,byte ptr ds:[esi]
			      C         .IF (al == _GROUPING)
 00000B8B  0A C0	   *	    or	al, al
 00000B8D  75 07	   *	    jne    @C009D
 00000B8F  E8 00000093	      C             call    invOBJECT_create_base_object_grouping
			      C         .ELSEIF (al == _DESKTOP)
 00000B94  EB 61	   *	    jmp    @C009F
 00000B96		   *@C009D:
 00000B96  3C 01	   *	    cmp    al, _DESKTOP
 00000B98  75 07	   *	    jne    @C00A0
 00000B9A  E8 00000089	      C             call    invOBJECT_create_base_object_desktop
			      C         .ELSEIF (al == _WINDOW)
 00000B9F  EB 56	   *	    jmp    @C00A2
 00000BA1		   *@C00A0:
 00000BA1  3C 02	   *	    cmp    al, _WINDOW
 00000BA3  75 07	   *	    jne    @C00A3
 00000BA5  E8 00000479	      C             call    invOBJECT_create_base_object_window
			      C         .ELSEIF (al == _CONSOLE)
 00000BAA  EB 4B	   *	    jmp    @C00A5
 00000BAC		   *@C00A3:
 00000BAC  3C 03	   *	    cmp    al, _CONSOLE
 00000BAE  75 07	   *	    jne    @C00A6
 00000BB0  E8 0000046F	      C             call    invOBJECT_create_base_object_console
			      C         .ELSEIF (al == _TEXT_MODE)
 00000BB5  EB 40	   *	    jmp    @C00A8
 00000BB7		   *@C00A6:
 00000BB7  3C 04	   *	    cmp    al, _TEXT_MODE
 00000BB9  75 07	   *	    jne    @C00A9
 00000BBB  E8 00000465	      C             call    invOBJECT_create_base_object_text_mode
			      C         .ELSEIF (al == _MONO_DESKTOP)
 00000BC0  EB 35	   *	    jmp    @C00AB
 00000BC2		   *@C00A9:
 00000BC2  3C 05	   *	    cmp    al, _MONO_DESKTOP
 00000BC4  75 07	   *	    jne    @C00AC
 00000BC6  E8 0000045B	      C             call    invOBJECT_create_base_object_mono_desktop
			      C         .ELSEIF (al == _MONO_WINDOW)
 00000BCB  EB 2A	   *	    jmp    @C00AE
 00000BCD		   *@C00AC:
 00000BCD  3C 06	   *	    cmp    al, _MONO_WINDOW
 00000BCF  75 07	   *	    jne    @C00AF
 00000BD1  E8 00000451	      C             call    invOBJECT_create_base_object_mono_window
			      C         .ELSEIF (al == _MONO_CONSOLE)
 00000BD6  EB 1F	   *	    jmp    @C00B1
 00000BD8		   *@C00AF:
 00000BD8  3C 07	   *	    cmp    al, _MONO_CONSOLE
 00000BDA  75 07	   *	    jne    @C00B2
 00000BDC  E8 00000447	      C             call    invOBJECT_create_base_object_mono_console
			      C         .ELSEIF (al == _MONO_TEXT_MODE)
 00000BE1  EB 14	   *	    jmp    @C00B4
 00000BE3		   *@C00B2:
 00000BE3  3C 08	   *	    cmp    al, _MONO_TEXT_MODE
 00000BE5  75 07	   *	    jne    @C00B5
 00000BE7  E8 0000043D	      C             call    invOBJECT_create_base_object_mono_text_mode
			      C         .ELSE
 00000BEC  EB 09	   *	    jmp    @C00B7
 00000BEE		   *@C00B5:
			      C           ; It's an unknown object type
 00000BEE  C7 44 24 1C	      C             mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_TYPE
	   00000002
 00000BF6  F9		      C             stc
			      C         .ENDIF
 00000BF7		   *@C00B7:
 00000BF7		   *@C00B4:
 00000BF7		   *@C00B1:
 00000BF7		   *@C00AE:
 00000BF7		   *@C00AB:
 00000BF7		   *@C00A8:
 00000BF7		   *@C00A5:
 00000BF7		   *@C00A2:
 00000BF7		   *@C009F:
 00000BF7  72 29	      C         jc      quit
			      C 
			      C 
			      C       ;; Update the pointers after a successful creation
			      C         .IF (dword ptr ss:[ebp-4] != -1)
 00000BF9  83 7D FC FF	   *	    cmp    dword ptr ss : [ebp - 004h], - 001h
 00000BFD  74 09	   *	    je     @C00B8
			      C           ; Set the first base object pointer
 00000BFF  8B 5D FC	      C             mov     ebx,dword ptr ss:[ebp-4]
 00000C02  67& 26: 89 1E      C             mov     dword ptr es:[_OBJECT_HEADER_FIRST_BASE_OBJECT],ebx
	   0004
			      C         .ENDIF
 00000C08		   *@C00B8:
			      C         .IF (dword ptr ss:[ebp-12] != -1)
 00000C08  83 7D F4 FF	   *	    cmp    dword ptr ss : [ebp - 00Ch], - 001h
 00000C0C  74 09	   *	    je     @C00BA
			      C           ; Set the first base object pointer
 00000C0E  8B 5D F8	      C             mov     ebx,dword ptr ss:[ebp-8]
 00000C11  8B 55 F4	      C             mov     edx,dword ptr ss:[ebp-12]
 00000C14  26: 89 1A	      C             mov     dword ptr es:[edx+_OBJECT_NEXT_BASE_OBJECT],ebx
			      C         .ENDIF
 00000C17		   *@C00BA:
 00000C17  67& 26: 81 06      C         add     dword ptr es:[_OBJECT_HEADER_NEXT_OBJECT],_BO_LENGTH
	   0000 00000100
 00000C21  F8		      C         clc
			      C 
			      C 
 00000C22		      C       quit:
 00000C22  61		      C         popad
 00000C23  0F A9	      C         pop     gs
 00000C25  C9		      C         leave
 00000C26  CB		      C         retf
 00000C27		      C     OBJECT_create_base_object       ENDP
			      C 
			      C 
			      C 
			      C 
 00000C27		      C     invOBJECT_create_base_object_grouping       PROC
			      C     ; This routine handles the creation of a _GROUPING object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _GROUPING data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00000C27  C3		      C         ret
 00000C28		      C     invOBJECT_create_base_object_grouping       ENDP
			      C 
			      C 
			      C 
			      C 
 00000C28		      C     invOBJECT_create_base_object_desktop        PROC
			      C     ; This routine handles the creation of a _DESKTOP object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _DESKTOP data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
 00000C28  26: C6 42 04	      C         mov     byte ptr es:[edx+_BASE_OBJECT_TYPE],_DESKTOP
	   01
			      C 
			      C       ; Headers unique to _DESKTOP items
			      C       ; Required headers
 00000C2D  8B 5E 01	      C         mov     ebx,dword ptr ds:[esi+_BO_LD_TOP]
 00000C30  26: 89 5A 0C	      C         mov     dword ptr es:[edx+_BO_D_TOP],ebx
 00000C34  8B 5E 05	      C         mov     ebx,dword ptr ds:[esi+_BO_LD_LEFT]
 00000C37  26: 89 5A 10	      C         mov     dword ptr es:[edx+_BO_D_LEFT],ebx
 00000C3B  8B 5E 09	      C         mov     ebx,dword ptr ds:[esi+_BO_LD_WIDTH]
 00000C3E  26: 89 5A 14	      C         mov     dword ptr es:[edx+_BO_D_WIDTH],ebx
 00000C42  8B 5E 0D	      C         mov     ebx,dword ptr ds:[esi+_BO_LD_HEIGHT]
 00000C45  26: 89 5A 18	      C         mov     dword ptr es:[edx+_BO_D_HEIGHT],ebx
			      C 
			      C       ; Default initialization
 00000C49  B8 FFFFFFFF	      C         mov     eax,-1
 00000C4E  33 C9	      C         xor     ecx,ecx
 00000C50  26: C6 42 1C	      C         mov     byte ptr es:[edx+_BO_D_ENABLED],1
	   01
 00000C55  26: 88 4A 1D	      C         mov     byte ptr es:[edx+_BO_D_VISIBLE],cl
 00000C59  26: 88 4A 1E	      C         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_RED],cl
 00000C5D  26: 88 4A 1F	      C         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_GREEN],cl
 00000C61  26: 88 4A 20	      C         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_BLUE],cl
 00000C65  26: C6 42 21	      C         mov     byte ptr es:[edx+_BO_D_ICON_HORIZONTAL],20
	   14
 00000C6A  26: C6 42 22	      C         mov     byte ptr es:[edx+_BO_D_ICON_VERTICAL],20
	   14
 00000C6F  26: C6 42 23	      C         mov     byte ptr es:[edx+_BO_D_MENU_POSITION],6
	   06
 00000C74  66| 26: C7 42      C         mov     word ptr es:[edx+_BO_D_MENU_HEIGHT],30
	   24 001E
 00000C7B  26: 89 42 26	      C         mov     dword ptr es:[edx+_BO_D_WALLPAPER],eax
 00000C7F  26: 89 42 28	      C         mov     dword ptr es:[edx+_BO_D_MISC_1],eax
 00000C83  26: 89 42 2C	      C         mov     dword ptr es:[edx+_BO_D_MISC_2],eax
 00000C87  26: 89 42 30	      C         mov     dword ptr es:[edx+_BO_D_MISC_3],eax
 00000C8B  26: 89 42 34	      C         mov     dword ptr es:[edx+_BO_D_MISC_4],eax
 00000C8F  26: 88 42 38	      C         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_1],al
 00000C93  26: 88 42 39	      C         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_2],al
 00000C97  26: 88 42 3A	      C         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_3],al
 00000C9B  81 C2 00000080     C         add     edx,_BO_D_ACTIVATE
 00000CA1  26: 89 02	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_ACTIVATE],eax
 00000CA4  26: 89 42 04	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_BOTH_SINGLE],eax
 00000CA8  26: 89 42 08	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_BOTH_DOUBLE],eax
 00000CAC  26: 89 42 0C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_LEFT_SINGLE],eax
 00000CB0  26: 89 42 10	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_LEFT_DOUBLE],eax
 00000CB4  26: 89 42 14	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_LEFT_DOWN],eax
 00000CB8  26: 89 42 18	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_LEFT_UP],eax
 00000CBC  26: 89 42 1C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_RIGHT_SINGLE],eax
 00000CC0  26: 89 42 20	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_RIGHT_DOUBLE],eax
 00000CC4  26: 89 42 24	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_RIGHT_DOWN],eax
 00000CC8  26: 89 42 28	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_CLICK_RIGHT_UP],eax
 00000CCC  26: 89 42 2C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DROPPED_INTO_LEFT],eax
 00000CD0  26: 89 42 30	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DROPPED_INTO_RIGHT],eax
 00000CD4  26: 89 42 34	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DRAG_LEFT_START],eax
 00000CD8  26: 89 42 38	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DRAG_LEFT_STOP],eax
 00000CDC  26: 89 42 3C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DRAG_RIGHT_START],eax
 00000CE0  26: 89 42 40	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_DRAG_RIGHT_STOP],eax
 00000CE4  26: 89 42 44	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_FOCUS_GOT],eax
 00000CE8  26: 89 42 48	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_FOCUS_LOST],eax
 00000CEC  26: 89 42 4C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_FOCUS_SET],eax
 00000CF0  26: 89 42 50	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_HOVER],eax
 00000CF4  26: 89 42 54	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_KEYSTROKE],eax
 00000CF8  26: 89 42 58	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_WHEN_CREATED],eax
 00000CFC  26: 89 42 5C	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_WHEN_DESTROYED],eax
 00000D00  26: 89 42 60	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_REQUESTOR],eax
 00000D04  26: 89 42 64	      C         mov     dword ptr es:[edx-_BO_D_ACTIVATE+_BO_D_REFRESH],eax
 00000D08  81 EA 00000080     C         sub     edx,_BO_D_ACTIVATE
 00000D0E  83 C6 11	      C         add     esi,_BO_LD_LENGTH
			      C 
			      C       ; Right now, ds:[esi] is sitting on any subsequent properties that are initialized to "other-than-default" values
 00000D11  B3 FD	      C         mov     bl,_PROPERTY_START
			      C         .WHILE (byte ptr ds:[esi] != _OBJECT_END)
 00000D13  E9 00000301	   *	    jmp    @C00BC
 00000D18		   *@C00BD:
 00000D18  8A 06	      C             mov     al,byte ptr ds:[esi]
			      C             .IF (al == _PROPERTY_START || al == _EVENT_START)
 00000D1A  3C FD	   *	    cmp    al, _PROPERTY_START
 00000D1C  74 04	   *	    je     @C00BF
 00000D1E  3C FE	   *	    cmp    al, _EVENT_START
 00000D20  75 07	   *	    jne    @C00BE
 00000D22		   *@C00BF:
 00000D22  8A D8	      C                 mov     bl,al
			      C             .ELSE
 00000D24  E9 000002F0	   *	    jmp    @C00C1
 00000D29		   *@C00BE:
			      C                 .IF (bl == _PROPERTY_START)
 00000D29  80 FB FD	   *	    cmp    bl, _PROPERTY_START
 00000D2C  0F 85 00000151  *	    jne    @C00C2
			      C                   ; They're setting a property, which one?
			      C                     .IF     (al == _DP_ENABLED)
 00000D32  0A C0	   *	    or	al, al
 00000D34  75 0F	   *	    jne    @C00C4
 00000D36  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_ENABLED]
 00000D39  26: 88 42 1C	      C                         mov     byte ptr es:[edx+_BO_D_ENABLED],al
 00000D3D  83 C6 02	      C                         add     esi,_BO_LD_ENABLED_SIZE
			      C                     .ELSEIF (al == _DP_VISIBLE)
 00000D40  E9 000002D4	   *	    jmp    @C00C6
 00000D45		   *@C00C4:
 00000D45  3C 01	   *	    cmp    al, _DP_VISIBLE
 00000D47  75 0F	   *	    jne    @C00C7
 00000D49  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_VISIBLE]
 00000D4C  26: 88 42 1D	      C                         mov     byte ptr es:[edx+_BO_D_VISIBLE],al
 00000D50  83 C6 02	      C                         add     esi,_BO_LD_VISIBLE_SIZE
			      C                     .ELSEIF (al == _DP_BACKGROUND)
 00000D53  E9 000002C1	   *	    jmp    @C00C9
 00000D58		   *@C00C7:
 00000D58  3C 02	   *	    cmp    al, _DP_BACKGROUND
 00000D5A  75 1D	   *	    jne    @C00CA
 00000D5C  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_BACKGROUND_RED]
 00000D5F  26: 88 42 1E	      C                         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_RED],al
 00000D63  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_BO_LD_BACKGROUND_GREEN]
 00000D66  26: 88 42 1F	      C                         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_GREEN],al
 00000D6A  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_BO_LD_BACKGROUND_BLUE]
 00000D6D  26: 88 42 20	      C                         mov     byte ptr es:[edx+_BO_D_BACKGROUND+_OBJECT_BLUE],al
 00000D71  83 C6 04	      C                         add     esi,_BO_LD_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _DP_ICON_HORIZONTAL)
 00000D74  E9 000002A0	   *	    jmp    @C00CC
 00000D79		   *@C00CA:
 00000D79  3C 03	   *	    cmp    al, _DP_ICON_HORIZONTAL
 00000D7B  75 0F	   *	    jne    @C00CD
 00000D7D  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_ICON_HORIZONTAL]
 00000D80  26: 88 42 21	      C                         mov     byte ptr es:[edx+_BO_D_ICON_HORIZONTAL],al
 00000D84  83 C6 02	      C                         add     esi,_BO_LD_ICON_HORIZONTAL_SIZE
			      C                     .ELSEIF (al == _DP_ICON_VERTICAL)
 00000D87  E9 0000028D	   *	    jmp    @C00CF
 00000D8C		   *@C00CD:
 00000D8C  3C 04	   *	    cmp    al, _DP_ICON_VERTICAL
 00000D8E  75 0F	   *	    jne    @C00D0
 00000D90  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_ICON_VERTICAL]
 00000D93  26: 88 42 22	      C                         mov     byte ptr es:[edx+_BO_D_ICON_VERTICAL],al
 00000D97  83 C6 02	      C                         add     esi,_BO_LD_ICON_VERTICAL_SIZE
			      C                     .ELSEIF (al == _DP_MENU_POSITION)
 00000D9A  E9 0000027A	   *	    jmp    @C00D2
 00000D9F		   *@C00D0:
 00000D9F  3C 05	   *	    cmp    al, _DP_MENU_POSITION
 00000DA1  75 0F	   *	    jne    @C00D3
 00000DA3  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MENU_POSITION]
 00000DA6  26: 88 42 23	      C                         mov     byte ptr es:[edx+_BO_D_MENU_POSITION],al
 00000DAA  83 C6 02	      C                         add     esi,_BO_LD_MENU_POSITION_SIZE
			      C                     .ELSEIF (al == _DP_MENU_HEIGHT)
 00000DAD  E9 00000267	   *	    jmp    @C00D5
 00000DB2		   *@C00D3:
 00000DB2  3C 06	   *	    cmp    al, _DP_MENU_HEIGHT
 00000DB4  75 0F	   *	    jne    @C00D6
 00000DB6  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MENU_HEIGHT]
 00000DB9  26: 88 42 24	      C                         mov     byte ptr es:[edx+_BO_D_MENU_HEIGHT],al
 00000DBD  83 C6 02	      C                         add     esi,_BO_LD_MENU_HEIGHT_SIZE
			      C                     .ELSEIF (al == _DP_MENU_AUTOHIDE)
 00000DC0  E9 00000254	   *	    jmp    @C00D8
 00000DC5		   *@C00D6:
 00000DC5  3C 07	   *	    cmp    al, _DP_MENU_AUTOHIDE
 00000DC7  75 0F	   *	    jne    @C00D9
 00000DC9  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MENU_AUTOHIDE]
 00000DCC  26: 88 42 3B	      C                         mov     byte ptr es:[edx+_BO_D_MENU_AUTOHIDE],al
 00000DD0  83 C6 02	      C                         add     esi,_BO_LD_MENU_AUTOHIDE_SIZE
			      C                     .ELSEIF (al == _DP_MISC_1)
 00000DD3  E9 00000241	   *	    jmp    @C00DB
 00000DD8		   *@C00D9:
 00000DD8  3C 08	   *	    cmp    al, _DP_MISC_1
 00000DDA  75 0F	   *	    jne    @C00DC
 00000DDC  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_1]
 00000DDF  26: 88 42 28	      C                         mov     byte ptr es:[edx+_BO_D_MISC_1],al
 00000DE3  83 C6 05	      C                         add     esi,_BO_LD_MISC_1_SIZE
			      C                     .ELSEIF (al == _DP_MISC_2)
 00000DE6  E9 0000022E	   *	    jmp    @C00DE
 00000DEB		   *@C00DC:
 00000DEB  3C 09	   *	    cmp    al, _DP_MISC_2
 00000DED  75 0F	   *	    jne    @C00DF
 00000DEF  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_2]
 00000DF2  26: 88 42 2C	      C                         mov     byte ptr es:[edx+_BO_D_MISC_2],al
 00000DF6  83 C6 05	      C                         add     esi,_BO_LD_MISC_2_SIZE
			      C                     .ELSEIF (al == _DP_MISC_3)
 00000DF9  E9 0000021B	   *	    jmp    @C00E1
 00000DFE		   *@C00DF:
 00000DFE  3C 0A	   *	    cmp    al, _DP_MISC_3
 00000E00  75 0F	   *	    jne    @C00E2
 00000E02  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_3]
 00000E05  26: 88 42 30	      C                         mov     byte ptr es:[edx+_BO_D_MISC_3],al
 00000E09  83 C6 05	      C                         add     esi,_BO_LD_MISC_3_SIZE
			      C                     .ELSEIF (al == _DP_MISC_4)
 00000E0C  E9 00000208	   *	    jmp    @C00E4
 00000E11		   *@C00E2:
 00000E11  3C 0B	   *	    cmp    al, _DP_MISC_4
 00000E13  75 0F	   *	    jne    @C00E5
 00000E15  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_4]
 00000E18  26: 88 42 34	      C                         mov     byte ptr es:[edx+_BO_D_MISC_4],al
 00000E1C  83 C6 05	      C                         add     esi,_BO_LD_MISC_4_SIZE
			      C                     .ELSEIF (al == _DP_MISC_FLAG_1)
 00000E1F  E9 000001F5	   *	    jmp    @C00E7
 00000E24		   *@C00E5:
 00000E24  3C 0C	   *	    cmp    al, _DP_MISC_FLAG_1
 00000E26  75 0F	   *	    jne    @C00E8
 00000E28  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_FLAG_1]
 00000E2B  26: 88 42 38	      C                         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_1],al
 00000E2F  83 C6 02	      C                         add     esi,_BO_LD_MISC_FLAG_1_SIZE
			      C                     .ELSEIF (al == _DP_MISC_FLAG_2)
 00000E32  E9 000001E2	   *	    jmp    @C00EA
 00000E37		   *@C00E8:
 00000E37  3C 0D	   *	    cmp    al, _DP_MISC_FLAG_2
 00000E39  75 0F	   *	    jne    @C00EB
 00000E3B  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_FLAG_2]
 00000E3E  26: 88 42 39	      C                         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_2],al
 00000E42  83 C6 02	      C                         add     esi,_BO_LD_MISC_FLAG_2_SIZE
			      C                     .ELSEIF (al == _DP_MISC_FLAG_3)
 00000E45  E9 000001CF	   *	    jmp    @C00ED
 00000E4A		   *@C00EB:
 00000E4A  3C 0E	   *	    cmp    al, _DP_MISC_FLAG_3
 00000E4C  75 0F	   *	    jne    @C00EE
 00000E4E  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_MISC_FLAG_3]
 00000E51  26: 88 42 3A	      C                         mov     byte ptr es:[edx+_BO_D_MISC_FLAG_3],al
 00000E55  83 C6 02	      C                         add     esi,_BO_LD_MISC_FLAG_3_SIZE
			      C                     .ELSEIF (al == _DP_WALLPAPER)
 00000E58  E9 000001BC	   *	    jmp    @C00F0
 00000E5D		   *@C00EE:
 00000E5D  3C 0F	   *	    cmp    al, _DP_WALLPAPER
 00000E5F  75 0F	   *	    jne    @C00F1
 00000E61  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_BO_LD_WALLPAPER]
 00000E64  26: 88 42 26	      C                         mov     byte ptr es:[edx+_BO_D_WALLPAPER],al
 00000E68  83 C6 05	      C                         add     esi,_BO_LD_WALLPAPER_SIZE
			      C                     .ELSE
 00000E6B  E9 000001A9	   *	    jmp    @C00F3
 00000E70		   *@C00F1:
			      C                       ; Unknown property, abort
 00000E70  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_PROPERTY
	   00000003
 00000E78  F9		      C                         stc
 00000E79  E9 000001A4	      C                         jmp     quit
			      C                     .ENDIF
			      C                 .ELSE
 00000E7E  E9 00000196	   *	    jmp    @C00F4
 00000E83		   *@C00C2:
			      C                   ; They're setting an event, which one?
 00000E83  8B 4E 01	      C                     mov     ecx,dword ptr ds:[esi+1]
			      C                     .IF     (al == _DE_ACTIVATE)
 00000E86  0A C0	   *	    or	al, al
 00000E88  75 0C	   *	    jne    @C00F5
 00000E8A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_ACTIVATE],ecx
	   00000080
			      C                     .ELSEIF (al == _DE_CLICK_BOTH_SINGLE)
 00000E91  E9 00000180	   *	    jmp    @C00F7
 00000E96		   *@C00F5:
 00000E96  3C 01	   *	    cmp    al, _DE_CLICK_BOTH_SINGLE
 00000E98  75 0C	   *	    jne    @C00F8
 00000E9A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_BOTH_SINGLE],ecx
	   00000084
			      C                     .ELSEIF (al == _DE_CLICK_BOTH_DOUBLE)
 00000EA1  E9 00000170	   *	    jmp    @C00FA
 00000EA6		   *@C00F8:
 00000EA6  3C 02	   *	    cmp    al, _DE_CLICK_BOTH_DOUBLE
 00000EA8  75 0C	   *	    jne    @C00FB
 00000EAA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_BOTH_DOUBLE],ecx
	   00000088
			      C                     .ELSEIF (al == _DE_CLICK_LEFT_SINGLE)
 00000EB1  E9 00000160	   *	    jmp    @C00FD
 00000EB6		   *@C00FB:
 00000EB6  3C 03	   *	    cmp    al, _DE_CLICK_LEFT_SINGLE
 00000EB8  75 0C	   *	    jne    @C00FE
 00000EBA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_LEFT_SINGLE],ecx
	   0000008C
			      C                     .ELSEIF (al == _DE_CLICK_LEFT_DOUBLE)
 00000EC1  E9 00000150	   *	    jmp    @C0100
 00000EC6		   *@C00FE:
 00000EC6  3C 04	   *	    cmp    al, _DE_CLICK_LEFT_DOUBLE
 00000EC8  75 0C	   *	    jne    @C0101
 00000ECA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_LEFT_DOUBLE],ecx
	   00000090
			      C                     .ELSEIF (al == _DE_CLICK_LEFT_DOWN)
 00000ED1  E9 00000140	   *	    jmp    @C0103
 00000ED6		   *@C0101:
 00000ED6  3C 05	   *	    cmp    al, _DE_CLICK_LEFT_DOWN
 00000ED8  75 0C	   *	    jne    @C0104
 00000EDA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_LEFT_DOWN],ecx
	   00000094
			      C                     .ELSEIF (al == _DE_CLICK_LEFT_UP)
 00000EE1  E9 00000130	   *	    jmp    @C0106
 00000EE6		   *@C0104:
 00000EE6  3C 06	   *	    cmp    al, _DE_CLICK_LEFT_UP
 00000EE8  75 0C	   *	    jne    @C0107
 00000EEA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_LEFT_UP],ecx
	   00000098
			      C                     .ELSEIF (al == _DE_CLICK_RIGHT_SINGLE)
 00000EF1  E9 00000120	   *	    jmp    @C0109
 00000EF6		   *@C0107:
 00000EF6  3C 07	   *	    cmp    al, _DE_CLICK_RIGHT_SINGLE
 00000EF8  75 0C	   *	    jne    @C010A
 00000EFA  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_RIGHT_SINGLE],ecx
	   0000009C
			      C                     .ELSEIF (al == _DE_CLICK_RIGHT_DOUBLE)
 00000F01  E9 00000110	   *	    jmp    @C010C
 00000F06		   *@C010A:
 00000F06  3C 08	   *	    cmp    al, _DE_CLICK_RIGHT_DOUBLE
 00000F08  75 0C	   *	    jne    @C010D
 00000F0A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_RIGHT_DOUBLE],ecx
	   000000A0
			      C                     .ELSEIF (al == _DE_CLICK_RIGHT_DOWN)
 00000F11  E9 00000100	   *	    jmp    @C010F
 00000F16		   *@C010D:
 00000F16  3C 09	   *	    cmp    al, _DE_CLICK_RIGHT_DOWN
 00000F18  75 0C	   *	    jne    @C0110
 00000F1A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_RIGHT_DOWN],ecx
	   000000A4
			      C                     .ELSEIF (al == _DE_CLICK_RIGHT_UP)
 00000F21  E9 000000F0	   *	    jmp    @C0112
 00000F26		   *@C0110:
 00000F26  3C 0A	   *	    cmp    al, _DE_CLICK_RIGHT_UP
 00000F28  75 0C	   *	    jne    @C0113
 00000F2A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_CLICK_RIGHT_UP],ecx
	   000000A8
			      C                     .ELSEIF (al == _DE_DROPPED_INTO_LEFT)
 00000F31  E9 000000E0	   *	    jmp    @C0115
 00000F36		   *@C0113:
 00000F36  3C 0B	   *	    cmp    al, _DE_DROPPED_INTO_LEFT
 00000F38  75 0C	   *	    jne    @C0116
 00000F3A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DROPPED_INTO_LEFT],ecx
	   000000AC
			      C                     .ELSEIF (al == _DE_DROPPED_INTO_RIGHT)
 00000F41  E9 000000D0	   *	    jmp    @C0118
 00000F46		   *@C0116:
 00000F46  3C 0C	   *	    cmp    al, _DE_DROPPED_INTO_RIGHT
 00000F48  75 0C	   *	    jne    @C0119
 00000F4A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DROPPED_INTO_RIGHT],ecx
	   000000B0
			      C                     .ELSEIF (al == _DE_DRAG_LEFT_START)
 00000F51  E9 000000C0	   *	    jmp    @C011B
 00000F56		   *@C0119:
 00000F56  3C 0D	   *	    cmp    al, _DE_DRAG_LEFT_START
 00000F58  75 0C	   *	    jne    @C011C
 00000F5A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DRAG_LEFT_START],ecx
	   000000B4
			      C                     .ELSEIF (al == _DE_DRAG_LEFT_STOP)
 00000F61  E9 000000B0	   *	    jmp    @C011E
 00000F66		   *@C011C:
 00000F66  3C 0E	   *	    cmp    al, _DE_DRAG_LEFT_STOP
 00000F68  75 0C	   *	    jne    @C011F
 00000F6A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DRAG_LEFT_STOP],ecx
	   000000B8
			      C                     .ELSEIF (al == _DE_DRAG_RIGHT_START)
 00000F71  E9 000000A0	   *	    jmp    @C0121
 00000F76		   *@C011F:
 00000F76  3C 0F	   *	    cmp    al, _DE_DRAG_RIGHT_START
 00000F78  75 0C	   *	    jne    @C0122
 00000F7A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DRAG_RIGHT_START],ecx
	   000000BC
			      C                     .ELSEIF (al == _DE_DRAG_RIGHT_STOP)
 00000F81  E9 00000090	   *	    jmp    @C0124
 00000F86		   *@C0122:
 00000F86  3C 10	   *	    cmp    al, _DE_DRAG_RIGHT_STOP
 00000F88  75 0C	   *	    jne    @C0125
 00000F8A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_DRAG_RIGHT_STOP],ecx
	   000000C0
			      C                     .ELSEIF (al == _DE_FOCUS_GOT)
 00000F91  E9 00000080	   *	    jmp    @C0127
 00000F96		   *@C0125:
 00000F96  3C 11	   *	    cmp    al, _DE_FOCUS_GOT
 00000F98  75 09	   *	    jne    @C0128
 00000F9A  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_FOCUS_GOT],ecx
	   000000C4
			      C                     .ELSEIF (al == _DE_FOCUS_LOST)
 00000FA1  EB 73	   *	    jmp    @C012A
 00000FA3		   *@C0128:
 00000FA3  3C 12	   *	    cmp    al, _DE_FOCUS_LOST
 00000FA5  75 09	   *	    jne    @C012B
 00000FA7  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_FOCUS_LOST],ecx
	   000000C8
			      C                     .ELSEIF (al == _DE_FOCUS_SET)
 00000FAE  EB 66	   *	    jmp    @C012D
 00000FB0		   *@C012B:
 00000FB0  3C 13	   *	    cmp    al, _DE_FOCUS_SET
 00000FB2  75 09	   *	    jne    @C012E
 00000FB4  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_FOCUS_SET],ecx
	   000000CC
			      C                     .ELSEIF (al == _DE_HOVER)
 00000FBB  EB 59	   *	    jmp    @C0130
 00000FBD		   *@C012E:
 00000FBD  3C 14	   *	    cmp    al, _DE_HOVER
 00000FBF  75 09	   *	    jne    @C0131
 00000FC1  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_HOVER],ecx
	   000000D0
			      C                     .ELSEIF (al == _DE_KEYSTROKE)
 00000FC8  EB 4C	   *	    jmp    @C0133
 00000FCA		   *@C0131:
 00000FCA  3C 15	   *	    cmp    al, _DE_KEYSTROKE
 00000FCC  75 09	   *	    jne    @C0134
 00000FCE  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_KEYSTROKE],ecx
	   000000D4
			      C                     .ELSEIF (al == _DE_WHEN_CREATED)
 00000FD5  EB 3F	   *	    jmp    @C0136
 00000FD7		   *@C0134:
 00000FD7  3C 16	   *	    cmp    al, _DE_WHEN_CREATED
 00000FD9  75 09	   *	    jne    @C0137
 00000FDB  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_WHEN_CREATED],ecx
	   000000D8
			      C                     .ELSEIF (al == _DE_WHEN_DESTROYED)
 00000FE2  EB 32	   *	    jmp    @C0139
 00000FE4		   *@C0137:
 00000FE4  3C 17	   *	    cmp    al, _DE_WHEN_DESTROYED
 00000FE6  75 09	   *	    jne    @C013A
 00000FE8  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_WHEN_DESTROYED],ecx
	   000000DC
			      C                     .ELSEIF (al == _DE_REQUESTOR)
 00000FEF  EB 25	   *	    jmp    @C013C
 00000FF1		   *@C013A:
 00000FF1  3C 18	   *	    cmp    al, _DE_REQUESTOR
 00000FF3  75 09	   *	    jne    @C013D
 00000FF5  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_REQUESTOR],ecx
	   000000E0
			      C                     .ELSEIF (al == _DE_REFRESH)
 00000FFC  EB 18	   *	    jmp    @C013F
 00000FFE		   *@C013D:
 00000FFE  3C 19	   *	    cmp    al, _DE_REFRESH
 00001000  75 09	   *	    jne    @C0140
 00001002  26: 89 8A	      C                         mov     dword ptr es:[edx+_BO_D_REFRESH],ecx
	   000000E4
			      C                     .ELSE
 00001009  EB 0B	   *	    jmp    @C0142
 0000100B		   *@C0140:
			      C                       ; Unknown property, abort
 0000100B  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_EVENT
	   00000004
 00001013  F9		      C                         stc
 00001014  EB 0C	      C                         jmp     quit
			      C                     .ENDIF
 00001016		   *@C0142:
 00001016		   *@C013F:
 00001016		   *@C013C:
 00001016		   *@C0139:
 00001016		   *@C0136:
 00001016		   *@C0133:
 00001016		   *@C0130:
 00001016		   *@C012D:
 00001016		   *@C012A:
 00001016		   *@C0127:
 00001016		   *@C0124:
 00001016		   *@C0121:
 00001016		   *@C011E:
 00001016		   *@C011B:
 00001016		   *@C0118:
 00001016		   *@C0115:
 00001016		   *@C0112:
 00001016		   *@C010F:
 00001016		   *@C010C:
 00001016		   *@C0109:
 00001016		   *@C0106:
 00001016		   *@C0103:
 00001016		   *@C0100:
 00001016		   *@C00FD:
 00001016		   *@C00FA:
 00001016		   *@C00F7:
 00001016  83 C6 05	      C                     add     esi,5
			      C                 .ENDIF
			      C             .ENDIF
 00001019		   *@C00F4:
 00001019		   *@C00F3:
 00001019		   *@C00F0:
 00001019		   *@C00ED:
 00001019		   *@C00EA:
 00001019		   *@C00E7:
 00001019		   *@C00E4:
 00001019		   *@C00E1:
 00001019		   *@C00DE:
 00001019		   *@C00DB:
 00001019		   *@C00D8:
 00001019		   *@C00D5:
 00001019		   *@C00D2:
 00001019		   *@C00CF:
 00001019		   *@C00CC:
 00001019		   *@C00C9:
 00001019		   *@C00C6:
			      C         .ENDW
 00001019		   *@C00C1:
 00001019		   *@C00BC:
 00001019  80 3E FF	   *	    cmp    byte ptr ds : [esi], _OBJECT_END
 0000101C  0F 85 FFFFFCF6  *	    jne    @C00BD
			      C       ; We're successful!
			      C 
 00001022		      C       quit:
 00001022  C3		      C         ret
 00001023		      C     invOBJECT_create_base_object_desktop        ENDP
			      C 
			      C 
			      C 
			      C 
 00001023		      C     invOBJECT_create_base_object_window     PROC
			      C     ; This routine handles the creation of a _WINDOW object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _WINDOW data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001023  C3		      C         ret
 00001024		      C     invOBJECT_create_base_object_window     ENDP
			      C 
			      C 
			      C 
			      C 
 00001024		      C     invOBJECT_create_base_object_console        PROC
			      C     ; This routine handles the creation of a _CONSOLE object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _CONSOLE data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001024  C3		      C         ret
 00001025		      C     invOBJECT_create_base_object_console        ENDP
			      C 
			      C 
			      C 
			      C 
 00001025		      C     invOBJECT_create_base_object_text_mode      PROC
			      C     ; This routine handles the creation of a _TEXT_MODE object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _TEXT_MODE data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001025  C3		      C         ret
 00001026		      C     invOBJECT_create_base_object_text_mode      ENDP
			      C 
			      C 
			      C 
			      C 
 00001026		      C     invOBJECT_create_base_object_mono_desktop       PROC
			      C     ; This routine handles the creation of a _MONO_DESKTOP object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _MONO_DESKTOP data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001026  C3		      C         ret
 00001027		      C     invOBJECT_create_base_object_mono_desktop       ENDP
			      C 
			      C 
			      C 
			      C 
 00001027		      C     invOBJECT_create_base_object_mono_window        PROC
			      C     ; This routine handles the creation of a _MONO_WINDOW object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _MONO_WINDOW data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001027  C3		      C         ret
 00001028		      C     invOBJECT_create_base_object_mono_window        ENDP
			      C 
			      C 
			      C 
			      C 
 00001028		      C     invOBJECT_create_base_object_mono_console       PROC
			      C     ; This routine handles the creation of a _MONO_CONSOLE object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _MONO_CONSOLE data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001028  C3		      C         ret
 00001029		      C     invOBJECT_create_base_object_mono_console       ENDP
			      C 
			      C 
			      C 
			      C 
 00001029		      C     invOBJECT_create_base_object_mono_text_mode     PROC
			      C     ; This routine handles the creation of a _MONO_TEXT_MODE object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to _MONO_TEXT_MODE data item in structure
			      C     ;               es:[edi] - far ptr to the TASK structure
			      C     ;
			      C     ; Upon exit:    carry? - SET if error
			      C     ;                        CLEAR - the object was created
			      C     ;
			      C 
 00001029  C3		      C         ret
 0000102A		      C     invOBJECT_create_base_object_mono_text_mode     ENDP
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ;; 11111 - OBJECTS
 0000102A		      C     OBJECT_create_object        PROC
			      C     ; This routine is called to create an object
			      C     ; * Note:  Refer to inf\objects.inf for information on this object
			      C     ;
			      C     ; Upon entry:         ax - task handle
			      C     ;                     bx - base object handle to add to
			      C     ;               ds:[esi] - far ptr to base of object's parameters
			      C     ;
			      C     ; Upon exit:    carry?  CLEAR-The object is created
			      C     ;                         SET-eax is error code
			      C     ;
 0000102A  C8 0008 00	      C         enter   8,0
			      C       ; [ebp-4] - dword, ptr to object to store "next object ptr"
			      C       ; [ebp-8] - dword, ptr to where object gets added
 0000102E  0F A8	      C         push    gs
 00001030  60		      C         pushad
			      C 
			      C 
			      C       ;; Verify the ask handle they've specified is valid
			      C         callf   iTASK_locate_handle                                 ; Returns, carry?, gs:[edi] - far ptr to TASK data structure
			     1C ; This macro:   callf   function_name
 00001031  0E		     1C     push    cs
 00001032  E8 FFFFF9C6	     1C     call    iTASK_locate_handle
			      C         .IF (carry?)
 00001037  73 0D	   *	    jae    @C0144
 00001039  C7 44 24 1C	      C             mov     dword ptr ss:[esp+28],_TASK_NOT_FOUND
	   00000000
 00001041  E9 00000148	      C             jmp     quit
			      C         .ENDIF
 00001046		   *@C0144:
 00001046  66| 65: 8E 47      C         mov     es,word ptr gs:[edi+_TASK_ENTRY_SELECTOR_OBJECTS]
	   06
 0000104B  33 FF	      C         xor     edi,edi
			      C       ; Right now, es:[edi] - far ptr to the base of this task's object
			      C       ;            ds:[esi] - far ptr to the user's object definition area
			      C 
			      C 
			      C       ;; Verify the base object handle they've specifed is valid
			      C         callf   iOBJECT_locate_task_object
			     1C ; This macro:   callf   function_name
 0000104D  0E		     1C     push    cs
 0000104E  E8 FFFFFAA5	     1C     call    iOBJECT_locate_task_object
			      C         .IF (carry?)
 00001053  73 0D	   *	    jae    @C0146
 00001055  C7 44 24 1C	      C             mov     dword ptr ss:[esp+28],_OBJECT_NOT_FOUND
	   00000001
 0000105D  E9 0000012C	      C             jmp     quit
			      C         .ENDIF
 00001062		   *@C0146:
			      C       ; Right now, es:[ebx] - far ptr to base object
			      C       ;            ds:[esi] - far ptr to object they want to add
			      C       ;            es:[_OBJECT_HEADER_NEXT_OBJECT] - where the ds:[esi] object will be added
			      C 
			      C 
			      C       ;; Skip to the last object for this base object
 00001062  26: 8B 53 08	      C         mov     edx,dword ptr es:[ebx+_OBJECT_FIRST_OBJECT]
 00001066  8B CA	      C         mov     ecx,edx
			      C         .WHILE (edx != -1)
 00001068  EB 06	   *	    jmp    @C0148
 0000106A		   *@C0149:
 0000106A  8B CA	      C             mov     ecx,edx
 0000106C  26: 8B 52 08	      C             mov     edx,dword ptr es:[edx+_OBJECT_NEXT_OBJECT]
			      C         .ENDW
 00001070		   *@C0148:
 00001070  83 FA FF	   *	    cmp    edx, - 001h
 00001073  75 F5	   *	    jne    @C0149
 00001075  67& 26: 8B 3E      C         mov     edi,dword ptr es:[_OBJECT_HEADER_NEXT_OBJECT]
	   0000
			      C       ; Right now, es:[ebx] - far ptr to base object to add to to
			      C       ;            es:[edx] - last object in base-object's chain
			      C       ;            es:[edi] - where object will be added
			      C       ;            ds:[esi] - far ptr to object source
			      C 
			      C 
			      C       ;; Determine where we'll be adding
 0000107B  89 4D FC	      C         mov     dword ptr ss:[ebp-4],ecx
 0000107E  89 7D F8	      C         mov     dword ptr ss:[ebp-8],edi
			      C 
			      C 
			      C       ;; Add common fields
 00001081  26: C7 07	      C         mov     dword ptr es:[edi+_OBJECT_NEXT_BASE_OBJECT],-1
	   FFFFFFFF
 00001088  26: C7 47 08	      C         mov     dword ptr es:[edi+_OBJECT_NEXT_OBJECT],-1
	   FFFFFFFF
			      C 
			      C 
			      C       ;; Add the object
 00001090  8A 06	      C         mov     al,byte ptr ds:[esi]
			      C         .IF     (al == _INPUT_FIELD)
 00001092  0A C0	   *	    or	al, al
 00001094  75 05	   *	    jne    @C014B
			      C           ; It's an input field
			      C         .ELSEIF     (al == _TEXT_FIELD)
 00001096  E9 000000CD	   *	    jmp    @C014D
 0000109B		   *@C014B:
 0000109B  3C 01	   *	    cmp    al, _TEXT_FIELD
 0000109D  75 0A	   *	    jne    @C014E
			      C           ; It's a text field
 0000109F  E8 000000EF	      C             call    invOBJECT_create_text_field
			      C         .ELSEIF (al == _BUTTON)
 000010A4  E9 000000BF	   *	    jmp    @C0150
 000010A9		   *@C014E:
 000010A9  3C 02	   *	    cmp    al, _BUTTON
 000010AB  75 05	   *	    jne    @C0151
			      C           ; It's a button
			      C         .ELSEIF (al == _MENU_BAR)
 000010AD  E9 000000B6	   *	    jmp    @C0153
 000010B2		   *@C0151:
 000010B2  3C 03	   *	    cmp    al, _MENU_BAR
 000010B4  75 05	   *	    jne    @C0154
			      C           ; It's a menu bar
			      C         .ELSEIF (al == _MENU_POPUP)
 000010B6  E9 000000AD	   *	    jmp    @C0156
 000010BB		   *@C0154:
 000010BB  3C 04	   *	    cmp    al, _MENU_POPUP
 000010BD  75 05	   *	    jne    @C0157
			      C           ; It's a popup menu
			      C         .ELSEIF (al == _RADIO_DIAL)
 000010BF  E9 000000A4	   *	    jmp    @C0159
 000010C4		   *@C0157:
 000010C4  3C 05	   *	    cmp    al, _RADIO_DIAL
 000010C6  75 05	   *	    jne    @C015A
			      C           ; It's a radio dial
			      C         .ELSEIF (al == _CHECK_BOX)
 000010C8  E9 0000009B	   *	    jmp    @C015C
 000010CD		   *@C015A:
 000010CD  3C 06	   *	    cmp    al, _CHECK_BOX
 000010CF  75 05	   *	    jne    @C015D
			      C           ; It's a check box
			      C         .ELSEIF (al == _CIRCLE_BOX)
 000010D1  E9 00000092	   *	    jmp    @C015F
 000010D6		   *@C015D:
 000010D6  3C 07	   *	    cmp    al, _CIRCLE_BOX
 000010D8  75 05	   *	    jne    @C0160
			      C           ; It's a circle box
			      C         .ELSEIF (al == _PULLDOWN)
 000010DA  E9 00000089	   *	    jmp    @C0162
 000010DF		   *@C0160:
 000010DF  3C 08	   *	    cmp    al, _PULLDOWN
 000010E1  75 05	   *	    jne    @C0163
			      C           ; It's a pulldown
			      C         .ELSEIF (al == _SLIDE_BAR)
 000010E3  E9 00000080	   *	    jmp    @C0165
 000010E8		   *@C0163:
 000010E8  3C 09	   *	    cmp    al, _SLIDE_BAR
 000010EA  75 02	   *	    jne    @C0166
			      C           ; It's a slide bar
			      C         .ELSEIF (al == _PERCENT_BAR)
 000010EC  EB 7A	   *	    jmp    @C0168
 000010EE		   *@C0166:
 000010EE  3C 0A	   *	    cmp    al, _PERCENT_BAR
 000010F0  75 02	   *	    jne    @C0169
			      C           ; It's a percent bar
			      C         .ELSEIF (al == _TRAY)
 000010F2  EB 74	   *	    jmp    @C016B
 000010F4		   *@C0169:
 000010F4  3C 0B	   *	    cmp    al, _TRAY
 000010F6  75 02	   *	    jne    @C016C
			      C           ; It's a tray
			      C         .ELSEIF (al == _ICON)
 000010F8  EB 6E	   *	    jmp    @C016E
 000010FA		   *@C016C:
 000010FA  3C 0C	   *	    cmp    al, _ICON
 000010FC  75 02	   *	    jne    @C016F
			      C           ; It's a icon
			      C         .ELSEIF (al == _BITMAP)
 000010FE  EB 68	   *	    jmp    @C0171
 00001100		   *@C016F:
 00001100  3C 0D	   *	    cmp    al, _BITMAP
 00001102  75 02	   *	    jne    @C0172
			      C           ; It's a bitmap
			      C         .ELSEIF (al == _HLINE)
 00001104  EB 62	   *	    jmp    @C0174
 00001106		   *@C0172:
 00001106  3C 0E	   *	    cmp    al, _HLINE
 00001108  75 07	   *	    jne    @C0175
			      C           ; It's a horizontal line
 0000110A  E8 0000058D	      C             call    invOBJECT_create_hline
			      C         .ELSEIF (al == _VLINE)
 0000110F  EB 57	   *	    jmp    @C0177
 00001111		   *@C0175:
 00001111  3C 0F	   *	    cmp    al, _VLINE
 00001113  75 02	   *	    jne    @C0178
			      C           ; It's a vertical line
			      C         .ELSEIF (al == _LINE)
 00001115  EB 51	   *	    jmp    @C017A
 00001117		   *@C0178:
 00001117  3C 10	   *	    cmp    al, _LINE
 00001119  75 02	   *	    jne    @C017B
			      C           ; It's a line
			      C         .ELSEIF (al == _OVAL)
 0000111B  EB 4B	   *	    jmp    @C017D
 0000111D		   *@C017B:
 0000111D  3C 11	   *	    cmp    al, _OVAL
 0000111F  75 02	   *	    jne    @C017E
			      C           ; It's a oval
			      C         .ELSEIF (al == _RECTANGLE)
 00001121  EB 45	   *	    jmp    @C0180
 00001123		   *@C017E:
 00001123  3C 12	   *	    cmp    al, _RECTANGLE
 00001125  75 07	   *	    jne    @C0181
			      C           ; It's a rectangle
 00001127  E8 000008DA	      C             call    invOBJECT_create_rectangle
			      C         .ELSEIF (al == _SCROLL_BAR_HORIZONTAL)
 0000112C  EB 3A	   *	    jmp    @C0183
 0000112E		   *@C0181:
 0000112E  3C 13	   *	    cmp    al, _SCROLL_BAR_HORIZONTAL
 00001130  75 02	   *	    jne    @C0184
			      C           ; It's a horizontal scroll bar
			      C         .ELSEIF (al == _SCROLL_BAR_VERTICAL)
 00001132  EB 34	   *	    jmp    @C0186
 00001134		   *@C0184:
 00001134  3C 14	   *	    cmp    al, _SCROLL_BAR_VERTICAL
 00001136  75 02	   *	    jne    @C0187
			      C           ; It's a vertical scroll bar
			      C         .ELSEIF (al == _CASK)
 00001138  EB 2E	   *	    jmp    @C0189
 0000113A		   *@C0187:
 0000113A  3C 15	   *	    cmp    al, _CASK
 0000113C  75 02	   *	    jne    @C018A
			      C           ; It's a cask
			      C         .ELSEIF (al == _CFSCA_WINDOW)
 0000113E  EB 28	   *	    jmp    @C018C
 00001140		   *@C018A:
 00001140  3C 16	   *	    cmp    al, _CFSCA_WINDOW
 00001142  75 02	   *	    jne    @C018D
			      C           ; It's a cfsca window
			      C         .ELSEIF (al == _NUMBERS_WINDOW)
 00001144  EB 22	   *	    jmp    @C018F
 00001146		   *@C018D:
 00001146  3C 17	   *	    cmp    al, _NUMBERS_WINDOW
 00001148  75 02	   *	    jne    @C0190
			      C           ; It's a numbers window
			      C         .ELSEIF (al == _TYPESET_WINDOW)
 0000114A  EB 1C	   *	    jmp    @C0192
 0000114C		   *@C0190:
 0000114C  3C 18	   *	    cmp    al, _TYPESET_WINDOW
 0000114E  75 02	   *	    jne    @C0193
			      C           ; It's a typeset window
			      C         .ELSEIF (al == _BORDER_BOX)
 00001150  EB 16	   *	    jmp    @C0195
 00001152		   *@C0193:
 00001152  3C 19	   *	    cmp    al, _BORDER_BOX
 00001154  75 07	   *	    jne    @C0196
			      C           ; It's a border box
 00001156  E8 00000C1C	      C             call    invOBJECT_create_border_box
			      C         .ELSE
 0000115B  EB 0B	   *	    jmp    @C0198
 0000115D		   *@C0196:
 0000115D  B8 00000002	      C             mov     eax,_UNKNOWN_OBJECT_TYPE
 00001162  89 44 24 1C	      C             mov     dword ptr ss:[esp+28],eax
 00001166  EB 26	      C             jmp     quit
			      C         .ENDIF
 00001168		   *@C0198:
 00001168		   *@C0195:
 00001168		   *@C0192:
 00001168		   *@C018F:
 00001168		   *@C018C:
 00001168		   *@C0189:
 00001168		   *@C0186:
 00001168		   *@C0183:
 00001168		   *@C0180:
 00001168		   *@C017D:
 00001168		   *@C017A:
 00001168		   *@C0177:
 00001168		   *@C0174:
 00001168		   *@C0171:
 00001168		   *@C016E:
 00001168		   *@C016B:
 00001168		   *@C0168:
 00001168		   *@C0165:
 00001168		   *@C0162:
 00001168		   *@C015F:
 00001168		   *@C015C:
 00001168		   *@C0159:
 00001168		   *@C0156:
 00001168		   *@C0153:
 00001168		   *@C0150:
 00001168		   *@C014D:
 00001168  72 24	      C         jc      quit
			      C 
			      C 
			      C       ;; Update pointers after a successful creation
 0000116A  8B 7D F8	      C         mov     edi,dword ptr ss:[ebp-8]
			      C         .IF (dword ptr ss:[ebp-4] != -1)
 0000116D  83 7D FC FF	   *	    cmp    dword ptr ss : [ebp - 004h], - 001h
 00001171  74 08	   *	    je     @C0199
			      C           ; We are adding one more object into the chain
 00001173  8B 55 FC	      C             mov     edx,dword ptr ss:[ebp-4]
 00001176  83 C2 08	      C             add     edx,_OBJECT_NEXT_OBJECT
			      C         .ELSE
 00001179  EB 05	   *	    jmp    @C019B
 0000117B		   *@C0199:
			      C           ; We are adding the first one, so we add it to the base object
 0000117B  8B D3	      C             mov     edx,ebx
 0000117D  83 C2 08	      C             add     edx,_OBJECT_FIRST_OBJECT
			      C         .ENDIF
 00001180		   *@C019B:
 00001180  26: 89 3A	      C         mov     dword ptr es:[edx],edi
 00001183  67& 26: 81 06      C         add     dword ptr es:[_OBJECT_HEADER_NEXT_OBJECT],_O_LENGTH
	   0000 00000100
 0000118D  F8		      C         clc
			      C 
			      C 
 0000118E		      C       quit:
 0000118E  61		      C         popad
 0000118F  0F A9	      C         pop     gs
 00001191  C9		      C         leave
 00001192  CB		      C         retf
 00001193		      C     OBJECT_create_object        ENDP
			      C 
			      C 
			      C 
			      C 
 00001193		      C     invOBJECT_create_text_field     PROC
			      C     ; This routine is used to create a text field
			      C     ;
			      C     ; Upon entry:   es:[ebx] - far ptr to base object to add to to
			      C     ;               es:[edx] - last object in base-object's chain
			      C     ;               es:[edi] - where object will be added
			      C     ;               ds:[esi] - far ptr to object source
			      C     ;
			      C     ; Upon exit:    The object is created if it contains valid information
			      C     ;
 00001193  60		      C         pushad
			      C       ; Headers unique to _TEXT_FIELD items
 00001194  26: C6 47 04	      C         mov     byte ptr es:[edi+_OBJECT_TYPE],_TEXT_FIELD
	   01
			      C       ; Required headers
 00001199  8B 5E 01	      C         mov     ebx,dword ptr ds:[esi+_O_LTF_TOP]
 0000119C  26: 89 5F 0C	      C         mov     dword ptr es:[edi+_O_TF_TOP],ebx
 000011A0  8B 5E 05	      C         mov     ebx,dword ptr ds:[esi+_O_LTF_LEFT]
 000011A3  26: 89 5F 10	      C         mov     dword ptr es:[edi+_O_TF_LEFT],ebx
 000011A7  8B 5E 09	      C         mov     ebx,dword ptr ds:[esi+_O_LTF_WIDTH]
 000011AA  26: 89 5F 14	      C         mov     dword ptr es:[edi+_O_TF_WIDTH],ebx
 000011AE  8B 5E 0D	      C         mov     ebx,dword ptr ds:[esi+_O_LTF_HEIGHT]
 000011B1  26: 89 5F 18	      C         mov     dword ptr es:[edi+_O_TF_HEIGHT],ebx
			      C       ; Default initialization
 000011B5  B8 FFFFFFFF	      C         mov     eax,-1
 000011BA  33 C9	      C         xor     ecx,ecx
 000011BC  26: C6 47 25	      C         mov     byte ptr es:[edi+_O_TF_ENABLED],1
	   01
 000011C1  26: 88 4F 3B	      C         mov     byte ptr es:[edi+_O_TF_VISIBLE],cl
 000011C5  26: 88 4F 1C	      C         mov     byte ptr es:[edi+_O_TF_BORDER],cl
 000011C9  26: 88 4F 1D	      C         mov     byte ptr es:[edi+_O_TF_ALIGNMENT],cl
 000011CD  26: 88 4F 1E	      C         mov     byte ptr es:[edi+_O_TF_AUTO_SIZE],cl
 000011D1  26: 88 4F 1F	      C         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_RED],cl
 000011D5  26: 88 4F 20	      C         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_GREEN],cl
 000011D9  26: 88 4F 21	      C         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_BLUE],cl
 000011DD  26: 88 4F 22	      C         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_RED],cl
 000011E1  26: 88 4F 23	      C         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_GREEN],cl
 000011E5  26: 88 4F 24	      C         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_BLUE],cl
 000011E9  26: 89 47 28	      C         mov     dword ptr es:[edi+_O_TF_SOURCE_PTR_SEGMENT],eax
 000011ED  26: 89 47 2C	      C         mov     dword ptr es:[edi+_O_TF_SOURCE_PTR_OFFSET],eax
 000011F1  26: 89 47 30	      C         mov     dword ptr es:[edi+_O_TF_FONT_NAME],eax
 000011F5  26: 88 47 34	      C         mov     byte ptr es:[edi+_O_TF_FONT_SIZE],al
 000011F9  26: 88 4F 35	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_BOLD],cl
 000011FD  26: 88 4F 36	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_DITHER],cl
 00001201  26: 88 4F 37	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_ITALICS],cl
 00001205  26: 88 4F 38	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_REVERSE],cl
 00001209  26: 88 4F 39	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_STRIKETHROUGH],cl
 0000120D  26: 88 4F 3A	      C         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_UNDERLINE],cl
 00001211  26: 89 47 3C	      C         mov     dword ptr es:[edi+_O_TF_FONT_NAME_ID],eax
 00001215  66| 26: 89 4F      C         mov     word ptr es:[edi+_O_TF_MARGIN_LEFT],cx
	   40
 0000121A  66| 26: 89 4F      C         mov     word ptr es:[edi+_O_TF_MARGIN_TOP],cx
	   42
 0000121F  26: 89 47 44	      C         mov     dword ptr es:[edi+_O_TF_MISC_1],eax
 00001223  26: 89 47 48	      C         mov     dword ptr es:[edi+_O_TF_MISC_2],eax
 00001227  26: 89 47 4C	      C         mov     dword ptr es:[edi+_O_TF_MISC_3],eax
 0000122B  26: 89 47 50	      C         mov     dword ptr es:[edi+_O_TF_MISC_4],eax
 0000122F  26: 88 47 54	      C         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_1],al
 00001233  26: 88 47 55	      C         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_2],al
 00001237  26: 88 47 56	      C         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_3],al
 0000123B  81 C7 00000080     C         add     edi,_O_TF_ACTIVATE
 00001241  26: 89 07	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_ACTIVATE],eax
 00001244  26: 89 47 04	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_BOTH_SINGLE],eax
 00001248  26: 89 47 08	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_BOTH_DOUBLE],eax
 0000124C  26: 89 47 0C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_LEFT_SINGLE],eax
 00001250  26: 89 47 10	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_LEFT_DOUBLE],eax
 00001254  26: 89 47 14	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_LEFT_DOWN],eax
 00001258  26: 89 47 18	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_LEFT_UP],eax
 0000125C  26: 89 47 1C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_RIGHT_SINGLE],eax
 00001260  26: 89 47 20	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_RIGHT_DOUBLE],eax
 00001264  26: 89 47 24	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_RIGHT_DOWN],eax
 00001268  26: 89 47 28	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_CLICK_RIGHT_UP],eax
 0000126C  26: 89 47 2C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DROPPED_INTO_LEFT],eax
 00001270  26: 89 47 30	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DROPPED_INTO_RIGHT],eax
 00001274  26: 89 47 34	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DRAG_LEFT_START],eax
 00001278  26: 89 47 38	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DRAG_LEFT_STOP],eax
 0000127C  26: 89 47 3C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DRAG_RIGHT_START],eax
 00001280  26: 89 47 40	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_DRAG_RIGHT_STOP],eax
 00001284  26: 89 47 44	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_FOCUS_GOT],eax
 00001288  26: 89 47 48	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_FOCUS_LOST],eax
 0000128C  26: 89 47 4C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_FOCUS_SET],eax
 00001290  26: 89 47 50	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_HOVER],eax
 00001294  26: 89 47 54	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_KEYSTROKE],eax
 00001298  26: 89 47 58	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_WHEN_CREATED],eax
 0000129C  26: 89 47 5C	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_WHEN_DESTROYED],eax
 000012A0  26: 89 47 60	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_REQUESTOR],eax
 000012A4  26: 89 47 64	      C         mov     dword ptr es:[edi-_O_TF_ACTIVATE+_O_TF_REFRESH],eax
 000012A8  81 EF 00000080     C         sub     edi,_O_TF_ACTIVATE
 000012AE  83 C6 11	      C         add     esi,_O_LTF_LENGTH
			      C 
			      C       ; Right now, ds:[esi] is sitting on any properties that are initialized to "other-than-default" values
 000012B1  B3 FD	      C         mov     bl,_PROPERTY_START
			      C         .WHILE (byte ptr ds:[esi] != _OBJECT_END)
 000012B3  E9 000003D9	   *	    jmp    @C019C
 000012B8		   *@C019D:
 000012B8  8A 06	      C             mov     al,byte ptr ds:[esi]
			      C             .IF (al == _PROPERTY_START || al == _EVENT_START)
 000012BA  3C FD	   *	    cmp    al, _PROPERTY_START
 000012BC  74 04	   *	    je     @C019F
 000012BE  3C FE	   *	    cmp    al, _EVENT_START
 000012C0  75 07	   *	    jne    @C019E
 000012C2		   *@C019F:
 000012C2  8A D8	      C                 mov     bl,al
			      C             .ELSE
 000012C4  E9 000003C8	   *	    jmp    @C01A1
 000012C9		   *@C019E:
			      C                 .IF (bl == _PROPERTY_START)
 000012C9  80 FB FD	   *	    cmp    bl, _PROPERTY_START
 000012CC  0F 85 00000229  *	    jne    @C01A2
			      C                   ; They're setting a property, which one?
			      C                     .IF (al == _TFP_ENABLED)
 000012D2  0A C0	   *	    or	al, al
 000012D4  75 0F	   *	    jne    @C01A4
 000012D6  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_ENABLED]
 000012D9  26: 88 47 25	      C                         mov     byte ptr es:[edi+_O_TF_ENABLED],al
 000012DD  83 C6 02	      C                         add     esi,_O_LTF_ENABLED_SIZE
			      C                     .ELSEIF (al == _TFP_VISIBLE)
 000012E0  E9 000003AC	   *	    jmp    @C01A6
 000012E5		   *@C01A4:
 000012E5  3C 01	   *	    cmp    al, _TFP_VISIBLE
 000012E7  75 0F	   *	    jne    @C01A7
 000012E9  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_VISIBLE]
 000012EC  26: 88 47 3B	      C                         mov     byte ptr es:[edi+_O_TF_VISIBLE],al
 000012F0  83 C6 02	      C                         add     esi,_O_LTF_VISIBLE_SIZE
			      C                     .ELSEIF (al == _TFP_BORDER)
 000012F3  E9 00000399	   *	    jmp    @C01A9
 000012F8		   *@C01A7:
 000012F8  3C 02	   *	    cmp    al, _TFP_BORDER
 000012FA  75 0F	   *	    jne    @C01AA
 000012FC  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_BORDER]
 000012FF  26: 88 47 1C	      C                         mov     byte ptr es:[edi+_O_TF_BORDER],al
 00001303  83 C6 02	      C                         add     esi,_O_LTF_BORDER_SIZE
			      C                     .ELSEIF (al == _TFP_ALIGNMENT)
 00001306  E9 00000386	   *	    jmp    @C01AC
 0000130B		   *@C01AA:
 0000130B  3C 03	   *	    cmp    al, _TFP_ALIGNMENT
 0000130D  75 0F	   *	    jne    @C01AD
 0000130F  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_ALIGNMENT]
 00001312  26: 88 47 1D	      C                         mov     byte ptr es:[edi+_O_TF_ALIGNMENT],al
 00001316  83 C6 02	      C                         add     esi,_O_LTF_ALIGNMENT_SIZE
			      C                     .ELSEIF (al == _TFP_AUTO_SIZE)
 00001319  E9 00000373	   *	    jmp    @C01AF
 0000131E		   *@C01AD:
 0000131E  3C 04	   *	    cmp    al, _TFP_AUTO_SIZE
 00001320  75 0F	   *	    jne    @C01B0
 00001322  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_AUTO_SIZE]
 00001325  26: 88 47 1E	      C                         mov     byte ptr es:[edi+_O_TF_AUTO_SIZE],al
 00001329  83 C6 02	      C                         add     esi,_O_LTF_AUTO_SIZE_SIZE
			      C                     .ELSEIF (al == _TFP_COLOR_FOREGROUND)
 0000132C  E9 00000360	   *	    jmp    @C01B2
 00001331		   *@C01B0:
 00001331  3C 06	   *	    cmp    al, _TFP_COLOR_FOREGROUND
 00001333  75 1D	   *	    jne    @C01B3
 00001335  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FOREGROUND_RED]
 00001338  26: 88 47 22	      C                         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_RED],al
 0000133C  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FOREGROUND_GREEN]
 0000133F  26: 88 47 23	      C                         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_GREEN],al
 00001343  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FOREGROUND_BLUE]
 00001346  26: 88 47 24	      C                         mov     byte ptr es:[edi+_O_TF_FOREGROUND+_OBJECT_BLUE],al
 0000134A  83 C6 04	      C                         add     esi,_O_LTF_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _TFP_COLOR_BACKGROUND)
 0000134D  E9 0000033F	   *	    jmp    @C01B5
 00001352		   *@C01B3:
 00001352  3C 05	   *	    cmp    al, _TFP_COLOR_BACKGROUND
 00001354  75 1D	   *	    jne    @C01B6
 00001356  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_BACKGROUND_RED]
 00001359  26: 88 47 1F	      C                         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_RED],al
 0000135D  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LTF_BACKGROUND_GREEN]
 00001360  26: 88 47 20	      C                         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_GREEN],al
 00001364  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LTF_BACKGROUND_BLUE]
 00001367  26: 88 47 21	      C                         mov     byte ptr es:[edi+_O_TF_BACKGROUND+_OBJECT_BLUE],al
 0000136B  83 C6 04	      C                         add     esi,_O_LTF_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _TFP_SOURCE_PTR)
 0000136E  E9 0000031E	   *	    jmp    @C01B8
 00001373		   *@C01B6:
 00001373  3C 09	   *	    cmp    al, _TFP_SOURCE_PTR
 00001375  75 17	   *	    jne    @C01B9
 00001377  0F B7 46 01	      C                         movzx   eax,word ptr ds:[esi+_O_LTF_SOURCE_PTR_SEGMENT]
 0000137B  26: 89 47 28	      C                         mov     dword ptr es:[edi+_O_TF_SOURCE_PTR_SEGMENT],eax
 0000137F  8B 46 03	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_SOURCE_PTR_OFFSET]
 00001382  26: 89 47 2C	      C                         mov     dword ptr es:[edi+_O_TF_SOURCE_PTR_OFFSET],eax
 00001386  83 C6 07	      C                         add     esi,_O_LTF_SOURCE_PTR_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_NAME)
 00001389  E9 00000303	   *	    jmp    @C01BB
 0000138E		   *@C01B9:
 0000138E  3C 0A	   *	    cmp    al, _TFP_FONT_NAME
 00001390  75 0F	   *	    jne    @C01BC
 00001392  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_FONT_NAME]
 00001395  26: 89 47 30	      C                         mov     dword ptr es:[edi+_O_TF_FONT_NAME],eax
 00001399  83 C6 05	      C                         add     esi,_O_LTF_FONT_NAME_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_SIZE)
 0000139C  E9 000002F0	   *	    jmp    @C01BE
 000013A1		   *@C01BC:
 000013A1  3C 0B	   *	    cmp    al, _TFP_FONT_SIZE
 000013A3  75 0F	   *	    jne    @C01BF
 000013A5  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_SIZE]
 000013A8  26: 88 47 34	      C                         mov     byte ptr es:[edi+_O_TF_FONT_SIZE],al
 000013AC  83 C6 02	      C                         add     esi,_O_LTF_FONT_SIZE_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_BOLD)
 000013AF  E9 000002DD	   *	    jmp    @C01C1
 000013B4		   *@C01BF:
 000013B4  3C 0C	   *	    cmp    al, _TFP_FONT_TYPEFACE_BOLD
 000013B6  75 0F	   *	    jne    @C01C2
 000013B8  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_BOLD]
 000013BB  26: 88 47 35	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_BOLD],al
 000013BF  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_BOLD_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_DITHER)
 000013C2  E9 000002CA	   *	    jmp    @C01C4
 000013C7		   *@C01C2:
 000013C7  3C 0D	   *	    cmp    al, _TFP_FONT_TYPEFACE_DITHER
 000013C9  75 0F	   *	    jne    @C01C5
 000013CB  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_DITHER]
 000013CE  26: 88 47 36	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_DITHER],al
 000013D2  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_DITHER_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_ITALICS)
 000013D5  E9 000002B7	   *	    jmp    @C01C7
 000013DA		   *@C01C5:
 000013DA  3C 0E	   *	    cmp    al, _TFP_FONT_TYPEFACE_ITALICS
 000013DC  75 0F	   *	    jne    @C01C8
 000013DE  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_ITALICS]
 000013E1  26: 88 47 37	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_ITALICS],al
 000013E5  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_ITALICS_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_REVERSE)
 000013E8  E9 000002A4	   *	    jmp    @C01CA
 000013ED		   *@C01C8:
 000013ED  3C 0F	   *	    cmp    al, _TFP_FONT_TYPEFACE_REVERSE
 000013EF  75 0F	   *	    jne    @C01CB
 000013F1  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_REVERSE]
 000013F4  26: 88 47 38	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_REVERSE],al
 000013F8  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_REVERSE_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_STRIKETHROUGH)
 000013FB  E9 00000291	   *	    jmp    @C01CD
 00001400		   *@C01CB:
 00001400  3C 10	   *	    cmp    al, _TFP_FONT_TYPEFACE_STRIKETHROUGH
 00001402  75 0F	   *	    jne    @C01CE
 00001404  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_STRIKETHROUGH]
 00001407  26: 88 47 39	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_STRIKETHROUGH],al
 0000140B  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_STRIKETHROUGH_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_TYPEFACE_UNDERLINE)
 0000140E  E9 0000027E	   *	    jmp    @C01D0
 00001413		   *@C01CE:
 00001413  3C 11	   *	    cmp    al, _TFP_FONT_TYPEFACE_UNDERLINE
 00001415  75 0F	   *	    jne    @C01D1
 00001417  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_FONT_TYPEFACE_UNDERLINE]
 0000141A  26: 88 47 3A	      C                         mov     byte ptr es:[edi+_O_TF_FONT_TYPEFACE_UNDERLINE],al
 0000141E  83 C6 02	      C                         add     esi,_O_LTF_FONT_TYPEFACE_UNDERLINE_SIZE
			      C                     .ELSEIF (al == _TFP_FONT_NAME_ID)
 00001421  E9 0000026B	   *	    jmp    @C01D3
 00001426		   *@C01D1:
 00001426  3C 12	   *	    cmp    al, _TFP_FONT_NAME_ID
 00001428  75 0F	   *	    jne    @C01D4
 0000142A  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_FONT_NAME_ID]
 0000142D  26: 89 47 3C	      C                         mov     dword ptr es:[edi+_O_TF_FONT_NAME_ID],eax
 00001431  83 C6 05	      C                         add     esi,_O_LTF_FONT_NAME_ID_SIZE
			      C                     .ELSEIF (al == _TFP_MARGIN_LEFT)
 00001434  E9 00000258	   *	    jmp    @C01D6
 00001439		   *@C01D4:
 00001439  3C 13	   *	    cmp    al, _TFP_MARGIN_LEFT
 0000143B  75 11	   *	    jne    @C01D7
 0000143D  66| 8B 46 01	      C                         mov     ax,word ptr ds:[esi+_O_LTF_MARGIN_LEFT]
 00001441  66| 26: 89 47      C                         mov     word ptr es:[edi+_O_TF_MARGIN_LEFT],ax
	   40
 00001446  83 C6 03	      C                         add     esi,_O_LTF_MARGIN_LEFT_SIZE
			      C                     .ELSEIF (al == _TFP_MARGIN_TOP)
 00001449  E9 00000243	   *	    jmp    @C01D9
 0000144E		   *@C01D7:
 0000144E  3C 14	   *	    cmp    al, _TFP_MARGIN_TOP
 00001450  75 11	   *	    jne    @C01DA
 00001452  66| 8B 46 01	      C                         mov     ax,word ptr ds:[esi+_O_LTF_MARGIN_TOP]
 00001456  66| 26: 89 47      C                         mov     word ptr es:[edi+_O_TF_MARGIN_TOP],ax
	   42
 0000145B  83 C6 03	      C                         add     esi,_O_LTF_MARGIN_TOP_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_1)
 0000145E  E9 0000022E	   *	    jmp    @C01DC
 00001463		   *@C01DA:
 00001463  3C 17	   *	    cmp    al, _TFP_MISC_1
 00001465  75 0F	   *	    jne    @C01DD
 00001467  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_MISC_1]
 0000146A  26: 89 47 44	      C                         mov     dword ptr es:[edi+_O_TF_MISC_1],eax
 0000146E  83 C6 05	      C                         add     esi,_O_LTF_MISC_1_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_2)
 00001471  E9 0000021B	   *	    jmp    @C01DF
 00001476		   *@C01DD:
 00001476  3C 18	   *	    cmp    al, _TFP_MISC_2
 00001478  75 0F	   *	    jne    @C01E0
 0000147A  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_MISC_2]
 0000147D  26: 89 47 48	      C                         mov     dword ptr es:[edi+_O_TF_MISC_2],eax
 00001481  83 C6 05	      C                         add     esi,_O_LTF_MISC_2_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_3)
 00001484  E9 00000208	   *	    jmp    @C01E2
 00001489		   *@C01E0:
 00001489  3C 19	   *	    cmp    al, _TFP_MISC_3
 0000148B  75 0F	   *	    jne    @C01E3
 0000148D  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_MISC_3]
 00001490  26: 89 47 4C	      C                         mov     dword ptr es:[edi+_O_TF_MISC_3],eax
 00001494  83 C6 05	      C                         add     esi,_O_LTF_MISC_3_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_4)
 00001497  E9 000001F5	   *	    jmp    @C01E5
 0000149C		   *@C01E3:
 0000149C  3C 1A	   *	    cmp    al, _TFP_MISC_4
 0000149E  75 0F	   *	    jne    @C01E6
 000014A0  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LTF_MISC_4]
 000014A3  26: 89 47 50	      C                         mov     dword ptr es:[edi+_O_TF_MISC_4],eax
 000014A7  83 C6 05	      C                         add     esi,_O_LTF_MISC_4_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_FLAG_1)
 000014AA  E9 000001E2	   *	    jmp    @C01E8
 000014AF		   *@C01E6:
 000014AF  3C 1B	   *	    cmp    al, _TFP_MISC_FLAG_1
 000014B1  75 0F	   *	    jne    @C01E9
 000014B3  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_MISC_FLAG_1]
 000014B6  26: 88 47 54	      C                         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_1],al
 000014BA  83 C6 02	      C                         add     esi,_O_LTF_MISC_FLAG_1_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_FLAG_2)
 000014BD  E9 000001CF	   *	    jmp    @C01EB
 000014C2		   *@C01E9:
 000014C2  3C 1C	   *	    cmp    al, _TFP_MISC_FLAG_2
 000014C4  75 0F	   *	    jne    @C01EC
 000014C6  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_MISC_FLAG_2]
 000014C9  26: 88 47 55	      C                         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_2],al
 000014CD  83 C6 02	      C                         add     esi,_O_LTF_MISC_FLAG_2_SIZE
			      C                     .ELSEIF (al == _TFP_MISC_FLAG_3)
 000014D0  E9 000001BC	   *	    jmp    @C01EE
 000014D5		   *@C01EC:
 000014D5  3C 1D	   *	    cmp    al, _TFP_MISC_FLAG_3
 000014D7  75 0F	   *	    jne    @C01EF
 000014D9  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LTF_MISC_FLAG_3]
 000014DC  26: 88 47 56	      C                         mov     byte ptr es:[edi+_O_TF_MISC_FLAG_3],al
 000014E0  83 C6 02	      C                         add     esi,_O_LTF_MISC_FLAG_3_SIZE
			      C                     .ELSE
 000014E3  E9 000001A9	   *	    jmp    @C01F1
 000014E8		   *@C01EF:
			      C                       ; Unknown property, abort
 000014E8  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_PROPERTY
	   00000003
 000014F0  F9		      C                         stc
 000014F1  E9 000001A4	      C                         jmp     quit
			      C                     .ENDIF
			      C                 .ELSE
 000014F6  E9 00000196	   *	    jmp    @C01F2
 000014FB		   *@C01A2:
			      C                   ; They're setting an event, which one?
 000014FB  8B 4E 01	      C                     mov     ecx,dword ptr ds:[esi+1]
			      C                     .IF     (al == _TFE_ACTIVATE)
 000014FE  0A C0	   *	    or	al, al
 00001500  75 0C	   *	    jne    @C01F3
 00001502  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_ACTIVATE],ecx
	   00000080
			      C                     .ELSEIF (al == _TFE_CLICK_BOTH_SINGLE)
 00001509  E9 00000180	   *	    jmp    @C01F5
 0000150E		   *@C01F3:
 0000150E  3C 01	   *	    cmp    al, _TFE_CLICK_BOTH_SINGLE
 00001510  75 0C	   *	    jne    @C01F6
 00001512  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_BOTH_SINGLE],ecx
	   00000084
			      C                     .ELSEIF (al == _TFE_CLICK_BOTH_DOUBLE)
 00001519  E9 00000170	   *	    jmp    @C01F8
 0000151E		   *@C01F6:
 0000151E  3C 02	   *	    cmp    al, _TFE_CLICK_BOTH_DOUBLE
 00001520  75 0C	   *	    jne    @C01F9
 00001522  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_BOTH_DOUBLE],ecx
	   00000088
			      C                     .ELSEIF (al == _TFE_CLICK_LEFT_SINGLE)
 00001529  E9 00000160	   *	    jmp    @C01FB
 0000152E		   *@C01F9:
 0000152E  3C 03	   *	    cmp    al, _TFE_CLICK_LEFT_SINGLE
 00001530  75 0C	   *	    jne    @C01FC
 00001532  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_LEFT_SINGLE],ecx
	   0000008C
			      C                     .ELSEIF (al == _TFE_CLICK_LEFT_DOUBLE)
 00001539  E9 00000150	   *	    jmp    @C01FE
 0000153E		   *@C01FC:
 0000153E  3C 04	   *	    cmp    al, _TFE_CLICK_LEFT_DOUBLE
 00001540  75 0C	   *	    jne    @C01FF
 00001542  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_LEFT_DOUBLE],ecx
	   00000090
			      C                     .ELSEIF (al == _TFE_CLICK_LEFT_DOWN)
 00001549  E9 00000140	   *	    jmp    @C0201
 0000154E		   *@C01FF:
 0000154E  3C 05	   *	    cmp    al, _TFE_CLICK_LEFT_DOWN
 00001550  75 0C	   *	    jne    @C0202
 00001552  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_LEFT_DOWN],ecx
	   00000094
			      C                     .ELSEIF (al == _TFE_CLICK_LEFT_UP)
 00001559  E9 00000130	   *	    jmp    @C0204
 0000155E		   *@C0202:
 0000155E  3C 06	   *	    cmp    al, _TFE_CLICK_LEFT_UP
 00001560  75 0C	   *	    jne    @C0205
 00001562  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_LEFT_UP],ecx
	   00000098
			      C                     .ELSEIF (al == _TFE_CLICK_RIGHT_SINGLE)
 00001569  E9 00000120	   *	    jmp    @C0207
 0000156E		   *@C0205:
 0000156E  3C 07	   *	    cmp    al, _TFE_CLICK_RIGHT_SINGLE
 00001570  75 0C	   *	    jne    @C0208
 00001572  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_RIGHT_SINGLE],ecx
	   0000009C
			      C                     .ELSEIF (al == _TFE_CLICK_RIGHT_DOUBLE)
 00001579  E9 00000110	   *	    jmp    @C020A
 0000157E		   *@C0208:
 0000157E  3C 08	   *	    cmp    al, _TFE_CLICK_RIGHT_DOUBLE
 00001580  75 0C	   *	    jne    @C020B
 00001582  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_RIGHT_DOUBLE],ecx
	   000000A0
			      C                     .ELSEIF (al == _TFE_CLICK_RIGHT_DOWN)
 00001589  E9 00000100	   *	    jmp    @C020D
 0000158E		   *@C020B:
 0000158E  3C 09	   *	    cmp    al, _TFE_CLICK_RIGHT_DOWN
 00001590  75 0C	   *	    jne    @C020E
 00001592  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_RIGHT_DOWN],ecx
	   000000A4
			      C                     .ELSEIF (al == _TFE_CLICK_RIGHT_UP)
 00001599  E9 000000F0	   *	    jmp    @C0210
 0000159E		   *@C020E:
 0000159E  3C 0A	   *	    cmp    al, _TFE_CLICK_RIGHT_UP
 000015A0  75 0C	   *	    jne    @C0211
 000015A2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_CLICK_RIGHT_UP],ecx
	   000000A8
			      C                     .ELSEIF (al == _TFE_DROPPED_INTO_LEFT)
 000015A9  E9 000000E0	   *	    jmp    @C0213
 000015AE		   *@C0211:
 000015AE  3C 0B	   *	    cmp    al, _TFE_DROPPED_INTO_LEFT
 000015B0  75 0C	   *	    jne    @C0214
 000015B2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DROPPED_INTO_LEFT],ecx
	   000000AC
			      C                     .ELSEIF (al == _TFE_DROPPED_INTO_RIGHT)
 000015B9  E9 000000D0	   *	    jmp    @C0216
 000015BE		   *@C0214:
 000015BE  3C 0C	   *	    cmp    al, _TFE_DROPPED_INTO_RIGHT
 000015C0  75 0C	   *	    jne    @C0217
 000015C2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DROPPED_INTO_RIGHT],ecx
	   000000B0
			      C                     .ELSEIF (al == _TFE_DRAG_LEFT_START)
 000015C9  E9 000000C0	   *	    jmp    @C0219
 000015CE		   *@C0217:
 000015CE  3C 0D	   *	    cmp    al, _TFE_DRAG_LEFT_START
 000015D0  75 0C	   *	    jne    @C021A
 000015D2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DRAG_LEFT_START],ecx
	   000000B4
			      C                     .ELSEIF (al == _TFE_DRAG_LEFT_STOP)
 000015D9  E9 000000B0	   *	    jmp    @C021C
 000015DE		   *@C021A:
 000015DE  3C 0E	   *	    cmp    al, _TFE_DRAG_LEFT_STOP
 000015E0  75 0C	   *	    jne    @C021D
 000015E2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DRAG_LEFT_STOP],ecx
	   000000B8
			      C                     .ELSEIF (al == _TFE_DRAG_RIGHT_START)
 000015E9  E9 000000A0	   *	    jmp    @C021F
 000015EE		   *@C021D:
 000015EE  3C 0F	   *	    cmp    al, _TFE_DRAG_RIGHT_START
 000015F0  75 0C	   *	    jne    @C0220
 000015F2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DRAG_RIGHT_START],ecx
	   000000BC
			      C                     .ELSEIF (al == _TFE_DRAG_RIGHT_STOP)
 000015F9  E9 00000090	   *	    jmp    @C0222
 000015FE		   *@C0220:
 000015FE  3C 10	   *	    cmp    al, _TFE_DRAG_RIGHT_STOP
 00001600  75 0C	   *	    jne    @C0223
 00001602  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_DRAG_RIGHT_STOP],ecx
	   000000C0
			      C                     .ELSEIF (al == _TFE_FOCUS_GOT)
 00001609  E9 00000080	   *	    jmp    @C0225
 0000160E		   *@C0223:
 0000160E  3C 11	   *	    cmp    al, _TFE_FOCUS_GOT
 00001610  75 09	   *	    jne    @C0226
 00001612  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_FOCUS_GOT],ecx
	   000000C4
			      C                     .ELSEIF (al == _TFE_FOCUS_LOST)
 00001619  EB 73	   *	    jmp    @C0228
 0000161B		   *@C0226:
 0000161B  3C 12	   *	    cmp    al, _TFE_FOCUS_LOST
 0000161D  75 09	   *	    jne    @C0229
 0000161F  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_FOCUS_LOST],ecx
	   000000C8
			      C                     .ELSEIF (al == _TFE_FOCUS_SET)
 00001626  EB 66	   *	    jmp    @C022B
 00001628		   *@C0229:
 00001628  3C 13	   *	    cmp    al, _TFE_FOCUS_SET
 0000162A  75 09	   *	    jne    @C022C
 0000162C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_FOCUS_SET],ecx
	   000000CC
			      C                     .ELSEIF (al == _TFE_HOVER)
 00001633  EB 59	   *	    jmp    @C022E
 00001635		   *@C022C:
 00001635  3C 14	   *	    cmp    al, _TFE_HOVER
 00001637  75 09	   *	    jne    @C022F
 00001639  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_HOVER],ecx
	   000000D0
			      C                     .ELSEIF (al == _TFE_KEYSTROKE)
 00001640  EB 4C	   *	    jmp    @C0231
 00001642		   *@C022F:
 00001642  3C 15	   *	    cmp    al, _TFE_KEYSTROKE
 00001644  75 09	   *	    jne    @C0232
 00001646  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_KEYSTROKE],ecx
	   000000D4
			      C                     .ELSEIF (al == _TFE_WHEN_CREATED)
 0000164D  EB 3F	   *	    jmp    @C0234
 0000164F		   *@C0232:
 0000164F  3C 16	   *	    cmp    al, _TFE_WHEN_CREATED
 00001651  75 09	   *	    jne    @C0235
 00001653  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_WHEN_CREATED],ecx
	   000000D8
			      C                     .ELSEIF (al == _TFE_WHEN_DESTROYED)
 0000165A  EB 32	   *	    jmp    @C0237
 0000165C		   *@C0235:
 0000165C  3C 17	   *	    cmp    al, _TFE_WHEN_DESTROYED
 0000165E  75 09	   *	    jne    @C0238
 00001660  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_WHEN_DESTROYED],ecx
	   000000DC
			      C                     .ELSEIF (al == _TFE_REQUESTOR)
 00001667  EB 25	   *	    jmp    @C023A
 00001669		   *@C0238:
 00001669  3C 18	   *	    cmp    al, _TFE_REQUESTOR
 0000166B  75 09	   *	    jne    @C023B
 0000166D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_REQUESTOR],ecx
	   000000E0
			      C                     .ELSEIF (al == _TFE_REFRESH)
 00001674  EB 18	   *	    jmp    @C023D
 00001676		   *@C023B:
 00001676  3C 19	   *	    cmp    al, _TFE_REFRESH
 00001678  75 09	   *	    jne    @C023E
 0000167A  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_TF_REFRESH],ecx
	   000000E4
			      C                     .ELSE
 00001681  EB 0B	   *	    jmp    @C0240
 00001683		   *@C023E:
			      C                       ; Unknown property, abort
 00001683  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_EVENT
	   00000004
 0000168B  F9		      C                         stc
 0000168C  EB 0C	      C                         jmp     quit
			      C                     .ENDIF
 0000168E		   *@C0240:
 0000168E		   *@C023D:
 0000168E		   *@C023A:
 0000168E		   *@C0237:
 0000168E		   *@C0234:
 0000168E		   *@C0231:
 0000168E		   *@C022E:
 0000168E		   *@C022B:
 0000168E		   *@C0228:
 0000168E		   *@C0225:
 0000168E		   *@C0222:
 0000168E		   *@C021F:
 0000168E		   *@C021C:
 0000168E		   *@C0219:
 0000168E		   *@C0216:
 0000168E		   *@C0213:
 0000168E		   *@C0210:
 0000168E		   *@C020D:
 0000168E		   *@C020A:
 0000168E		   *@C0207:
 0000168E		   *@C0204:
 0000168E		   *@C0201:
 0000168E		   *@C01FE:
 0000168E		   *@C01FB:
 0000168E		   *@C01F8:
 0000168E		   *@C01F5:
 0000168E  83 C6 05	      C                     add     esi,5
			      C                 .ENDIF
			      C             .ENDIF
 00001691		   *@C01F2:
 00001691		   *@C01F1:
 00001691		   *@C01EE:
 00001691		   *@C01EB:
 00001691		   *@C01E8:
 00001691		   *@C01E5:
 00001691		   *@C01E2:
 00001691		   *@C01DF:
 00001691		   *@C01DC:
 00001691		   *@C01D9:
 00001691		   *@C01D6:
 00001691		   *@C01D3:
 00001691		   *@C01D0:
 00001691		   *@C01CD:
 00001691		   *@C01CA:
 00001691		   *@C01C7:
 00001691		   *@C01C4:
 00001691		   *@C01C1:
 00001691		   *@C01BE:
 00001691		   *@C01BB:
 00001691		   *@C01B8:
 00001691		   *@C01B5:
 00001691		   *@C01B2:
 00001691		   *@C01AF:
 00001691		   *@C01AC:
 00001691		   *@C01A9:
 00001691		   *@C01A6:
			      C         .ENDW
 00001691		   *@C01A1:
 00001691		   *@C019C:
 00001691  80 3E FF	   *	    cmp    byte ptr ds : [esi], _OBJECT_END
 00001694  0F 85 FFFFFC1E  *	    jne    @C019D
			      C 
 0000169A		      C       quit:
 0000169A  61		      C         popad
 0000169B  C3		      C         ret
 0000169C		      C     invOBJECT_create_text_field     ENDP
			      C 
			      C 
			      C 
			      C 
 0000169C		      C     invOBJECT_create_hline      PROC
			      C     ; This routine is called to create a horizontal line object
			      C     ;
			      C     ; Upon entry:   es:[ebx] - far ptr to base object to add to to
			      C     ;               es:[edx] - last object in base-object's chain
			      C     ;               es:[edi] - where object will be added
			      C     ;               ds:[esi] - far ptr to object source
			      C     ;
			      C     ; Upon exit:    The object is created if it contains valid information
			      C     ;
 0000169C  60		      C         pushad
			      C       ; Headers unique to _HLINE items
 0000169D  26: C6 47 04	      C         mov     byte ptr es:[edi+_OBJECT_TYPE],_HLINE
	   0E
			      C       ; Required headers
 000016A2  8B 5E 01	      C         mov     ebx,dword ptr ds:[esi+_O_LHL_TOP]
 000016A5  26: 89 5F 0C	      C         mov     dword ptr es:[edi+_O_HL_TOP],ebx
 000016A9  8B 5E 05	      C         mov     ebx,dword ptr ds:[esi+_O_LHL_LEFT]
 000016AC  26: 89 5F 10	      C         mov     dword ptr es:[edi+_O_HL_LEFT],ebx
 000016B0  8B 5E 09	      C         mov     ebx,dword ptr ds:[esi+_O_LHL_WIDTH]
 000016B3  26: 89 5F 14	      C         mov     dword ptr es:[edi+_O_HL_WIDTH],ebx
			      C 
			      C       ; Default initialization
 000016B7  B8 FFFFFFFF	      C         mov     eax,-1
 000016BC  33 C9	      C         xor     ecx,ecx
 000016BE  26: C6 47 1B	      C         mov     byte ptr es:[edi+_O_HL_ENABLED],1
	   01
 000016C3  26: 88 4F 2F	      C         mov     byte ptr es:[edi+_O_HL_VISIBLE],cl
 000016C7  26: 88 4F 18	      C         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_RED],cl
 000016CB  26: 88 4F 19	      C         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_GREEN],cl
 000016CF  26: 88 4F 1A	      C         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_BLUE],cl
 000016D3  26: 89 47 1C	      C         mov     dword ptr es:[edi+_O_HL_MISC_1],eax
 000016D7  26: 89 47 20	      C         mov     dword ptr es:[edi+_O_HL_MISC_2],eax
 000016DB  26: 89 47 24	      C         mov     dword ptr es:[edi+_O_HL_MISC_3],eax
 000016DF  26: 89 47 28	      C         mov     dword ptr es:[edi+_O_HL_MISC_4],eax
 000016E3  26: 88 47 2C	      C         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_1],al
 000016E7  26: 88 47 2D	      C         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_2],al
 000016EB  26: 88 47 2E	      C         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_3],al
 000016EF  81 C7 00000080     C         add     edi,_O_HL_ACTIVATE
 000016F5  26: 89 07	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_ACTIVATE],eax
 000016F8  26: 89 47 04	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_BOTH_SINGLE],eax
 000016FC  26: 89 47 08	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_BOTH_DOUBLE],eax
 00001700  26: 89 47 0C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_LEFT_SINGLE],eax
 00001704  26: 89 47 10	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_LEFT_DOUBLE],eax
 00001708  26: 89 47 14	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_LEFT_DOWN],eax
 0000170C  26: 89 47 18	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_LEFT_UP],eax
 00001710  26: 89 47 1C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_RIGHT_SINGLE],eax
 00001714  26: 89 47 20	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_RIGHT_DOUBLE],eax
 00001718  26: 89 47 24	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_RIGHT_DOWN],eax
 0000171C  26: 89 47 28	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_CLICK_RIGHT_UP],eax
 00001720  26: 89 47 2C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DROPPED_INTO_LEFT],eax
 00001724  26: 89 47 30	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DROPPED_INTO_RIGHT],eax
 00001728  26: 89 47 34	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DRAG_LEFT_START],eax
 0000172C  26: 89 47 38	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DRAG_LEFT_STOP],eax
 00001730  26: 89 47 3C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DRAG_RIGHT_START],eax
 00001734  26: 89 47 40	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_DRAG_RIGHT_STOP],eax
 00001738  26: 89 47 44	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_FOCUS_GOT],eax
 0000173C  26: 89 47 48	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_FOCUS_LOST],eax
 00001740  26: 89 47 4C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_FOCUS_SET],eax
 00001744  26: 89 47 50	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_HOVER],eax
 00001748  26: 89 47 54	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_KEYSTROKE],eax
 0000174C  26: 89 47 58	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_WHEN_CREATED],eax
 00001750  26: 89 47 5C	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_WHEN_DESTROYED],eax
 00001754  26: 89 47 60	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_REQUESTOR],eax
 00001758  26: 89 47 64	      C         mov     dword ptr es:[edi-_O_HL_ACTIVATE+_O_HL_REFRESH],eax
 0000175C  81 EF 00000080     C         sub     edi,_O_HL_ACTIVATE
 00001762  83 C6 0D	      C         add     esi,_O_LHL_LENGTH
			      C 
			      C       ; Right now, ds:[esi] is sitting on any properties that are initialized to "other-than-default" values
 00001765  B3 FD	      C         mov     bl,_PROPERTY_START
			      C         .WHILE (byte ptr ds:[esi] != _OBJECT_END)
 00001767  E9 0000028F	   *	    jmp    @C0242
 0000176C		   *@C0243:
 0000176C  8A 06	      C             mov     al,byte ptr ds:[esi]
			      C             .IF (al == _PROPERTY_START || al == _EVENT_START)
 0000176E  3C FD	   *	    cmp    al, _PROPERTY_START
 00001770  74 04	   *	    je     @C0245
 00001772  3C FE	   *	    cmp    al, _EVENT_START
 00001774  75 07	   *	    jne    @C0244
 00001776		   *@C0245:
 00001776  8A D8	      C                 mov     bl,al
			      C             .ELSE
 00001778  E9 0000027E	   *	    jmp    @C0247
 0000177D		   *@C0244:
			      C                 .IF (bl == _PROPERTY_START)
 0000177D  80 FB FD	   *	    cmp    bl, _PROPERTY_START
 00001780  0F 85 000000DF  *	    jne    @C0248
			      C                   ; They're setting a property, which one?
			      C                     .IF (al == _RP_ENABLED)
 00001786  0A C0	   *	    or	al, al
 00001788  75 0F	   *	    jne    @C024A
 0000178A  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_ENABLED]
 0000178D  26: 88 47 1B	      C                         mov     byte ptr es:[edi+_O_HL_ENABLED],al
 00001791  83 C6 02	      C                         add     esi,_O_LHL_ENABLED_SIZE
			      C                     .ELSEIF (al == _RP_VISIBLE)
 00001794  E9 00000262	   *	    jmp    @C024C
 00001799		   *@C024A:
 00001799  3C 01	   *	    cmp    al, _RP_VISIBLE
 0000179B  75 0F	   *	    jne    @C024D
 0000179D  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_VISIBLE]
 000017A0  26: 88 47 2F	      C                         mov     byte ptr es:[edi+_O_HL_VISIBLE],al
 000017A4  83 C6 02	      C                         add     esi,_O_LHL_VISIBLE_SIZE
			      C                     .ELSEIF (al == _RP_BACKGROUND)
 000017A7  E9 0000024F	   *	    jmp    @C024F
 000017AC		   *@C024D:
 000017AC  3C 02	   *	    cmp    al, _RP_BACKGROUND
 000017AE  75 1D	   *	    jne    @C0250
 000017B0  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_BACKGROUND_RED]
 000017B3  26: 88 47 18	      C                         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_RED],al
 000017B7  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LHL_BACKGROUND_GREEN]
 000017BA  26: 88 47 19	      C                         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_GREEN],al
 000017BE  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LHL_BACKGROUND_BLUE]
 000017C1  26: 88 47 1A	      C                         mov     byte ptr es:[edi+_O_HL_BACKGROUND+_OBJECT_BLUE],al
 000017C5  83 C6 04	      C                         add     esi,_O_LHL_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _RP_MISC_1)
 000017C8  E9 0000022E	   *	    jmp    @C0252
 000017CD		   *@C0250:
 000017CD  3C 03	   *	    cmp    al, _RP_MISC_1
 000017CF  75 0F	   *	    jne    @C0253
 000017D1  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LHL_MISC_1]
 000017D4  26: 89 47 1C	      C                         mov     dword ptr es:[edi+_O_HL_MISC_1],eax
 000017D8  83 C6 05	      C                         add     esi,_O_LHL_MISC_1_SIZE
			      C                     .ELSEIF (al == _RP_MISC_2)
 000017DB  E9 0000021B	   *	    jmp    @C0255
 000017E0		   *@C0253:
 000017E0  3C 04	   *	    cmp    al, _RP_MISC_2
 000017E2  75 0F	   *	    jne    @C0256
 000017E4  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LHL_MISC_2]
 000017E7  26: 89 47 20	      C                         mov     dword ptr es:[edi+_O_HL_MISC_2],eax
 000017EB  83 C6 05	      C                         add     esi,_O_LHL_MISC_2_SIZE
			      C                     .ELSEIF (al == _RP_MISC_3)
 000017EE  E9 00000208	   *	    jmp    @C0258
 000017F3		   *@C0256:
 000017F3  3C 05	   *	    cmp    al, _RP_MISC_3
 000017F5  75 0F	   *	    jne    @C0259
 000017F7  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LHL_MISC_3]
 000017FA  26: 89 47 24	      C                         mov     dword ptr es:[edi+_O_HL_MISC_3],eax
 000017FE  83 C6 05	      C                         add     esi,_O_LHL_MISC_3_SIZE
			      C                     .ELSEIF (al == _RP_MISC_4)
 00001801  E9 000001F5	   *	    jmp    @C025B
 00001806		   *@C0259:
 00001806  3C 06	   *	    cmp    al, _RP_MISC_4
 00001808  75 0F	   *	    jne    @C025C
 0000180A  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LHL_MISC_4]
 0000180D  26: 89 47 28	      C                         mov     dword ptr es:[edi+_O_HL_MISC_4],eax
 00001811  83 C6 05	      C                         add     esi,_O_LHL_MISC_4_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_1)
 00001814  E9 000001E2	   *	    jmp    @C025E
 00001819		   *@C025C:
 00001819  3C 07	   *	    cmp    al, _RP_MISC_FLAG_1
 0000181B  75 0F	   *	    jne    @C025F
 0000181D  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_MISC_FLAG_1]
 00001820  26: 88 47 2C	      C                         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_1],al
 00001824  83 C6 02	      C                         add     esi,_O_LHL_MISC_FLAG_1_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_2)
 00001827  E9 000001CF	   *	    jmp    @C0261
 0000182C		   *@C025F:
 0000182C  3C 08	   *	    cmp    al, _RP_MISC_FLAG_2
 0000182E  75 0F	   *	    jne    @C0262
 00001830  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_MISC_FLAG_2]
 00001833  26: 88 47 2D	      C                         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_2],al
 00001837  83 C6 02	      C                         add     esi,_O_LHL_MISC_FLAG_2_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_3)
 0000183A  E9 000001BC	   *	    jmp    @C0264
 0000183F		   *@C0262:
 0000183F  3C 09	   *	    cmp    al, _RP_MISC_FLAG_3
 00001841  75 0F	   *	    jne    @C0265
 00001843  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LHL_MISC_FLAG_3]
 00001846  26: 88 47 2E	      C                         mov     byte ptr es:[edi+_O_HL_MISC_FLAG_3],al
 0000184A  83 C6 02	      C                         add     esi,_O_LHL_MISC_FLAG_3_SIZE
			      C                     .ELSE
 0000184D  E9 000001A9	   *	    jmp    @C0267
 00001852		   *@C0265:
			      C                       ; Unknown property, abort
 00001852  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_PROPERTY
	   00000003
 0000185A  F9		      C                         stc
 0000185B  E9 000001A4	      C                         jmp     quit
			      C                     .ENDIF
			      C                 .ELSE
 00001860  E9 00000196	   *	    jmp    @C0268
 00001865		   *@C0248:
			      C                   ; They're setting an event, which one?
 00001865  8B 4E 01	      C                     mov     ecx,dword ptr ds:[esi+1]
			      C                     .IF     (al == _RE_ACTIVATE)
 00001868  0A C0	   *	    or	al, al
 0000186A  75 0C	   *	    jne    @C0269
 0000186C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_ACTIVATE],ecx
	   00000080
			      C                     .ELSEIF (al == _RE_CLICK_BOTH_SINGLE)
 00001873  E9 00000180	   *	    jmp    @C026B
 00001878		   *@C0269:
 00001878  3C 01	   *	    cmp    al, _RE_CLICK_BOTH_SINGLE
 0000187A  75 0C	   *	    jne    @C026C
 0000187C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_BOTH_SINGLE],ecx
	   00000084
			      C                     .ELSEIF (al == _RE_CLICK_BOTH_DOUBLE)
 00001883  E9 00000170	   *	    jmp    @C026E
 00001888		   *@C026C:
 00001888  3C 02	   *	    cmp    al, _RE_CLICK_BOTH_DOUBLE
 0000188A  75 0C	   *	    jne    @C026F
 0000188C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_BOTH_DOUBLE],ecx
	   00000088
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_SINGLE)
 00001893  E9 00000160	   *	    jmp    @C0271
 00001898		   *@C026F:
 00001898  3C 03	   *	    cmp    al, _RE_CLICK_LEFT_SINGLE
 0000189A  75 0C	   *	    jne    @C0272
 0000189C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_LEFT_SINGLE],ecx
	   0000008C
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_DOUBLE)
 000018A3  E9 00000150	   *	    jmp    @C0274
 000018A8		   *@C0272:
 000018A8  3C 04	   *	    cmp    al, _RE_CLICK_LEFT_DOUBLE
 000018AA  75 0C	   *	    jne    @C0275
 000018AC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_LEFT_DOUBLE],ecx
	   00000090
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_DOWN)
 000018B3  E9 00000140	   *	    jmp    @C0277
 000018B8		   *@C0275:
 000018B8  3C 05	   *	    cmp    al, _RE_CLICK_LEFT_DOWN
 000018BA  75 0C	   *	    jne    @C0278
 000018BC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_LEFT_DOWN],ecx
	   00000094
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_UP)
 000018C3  E9 00000130	   *	    jmp    @C027A
 000018C8		   *@C0278:
 000018C8  3C 06	   *	    cmp    al, _RE_CLICK_LEFT_UP
 000018CA  75 0C	   *	    jne    @C027B
 000018CC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_LEFT_UP],ecx
	   00000098
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_SINGLE)
 000018D3  E9 00000120	   *	    jmp    @C027D
 000018D8		   *@C027B:
 000018D8  3C 07	   *	    cmp    al, _RE_CLICK_RIGHT_SINGLE
 000018DA  75 0C	   *	    jne    @C027E
 000018DC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_RIGHT_SINGLE],ecx
	   0000009C
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_DOUBLE)
 000018E3  E9 00000110	   *	    jmp    @C0280
 000018E8		   *@C027E:
 000018E8  3C 08	   *	    cmp    al, _RE_CLICK_RIGHT_DOUBLE
 000018EA  75 0C	   *	    jne    @C0281
 000018EC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_RIGHT_DOUBLE],ecx
	   000000A0
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_DOWN)
 000018F3  E9 00000100	   *	    jmp    @C0283
 000018F8		   *@C0281:
 000018F8  3C 09	   *	    cmp    al, _RE_CLICK_RIGHT_DOWN
 000018FA  75 0C	   *	    jne    @C0284
 000018FC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_RIGHT_DOWN],ecx
	   000000A4
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_UP)
 00001903  E9 000000F0	   *	    jmp    @C0286
 00001908		   *@C0284:
 00001908  3C 0A	   *	    cmp    al, _RE_CLICK_RIGHT_UP
 0000190A  75 0C	   *	    jne    @C0287
 0000190C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_CLICK_RIGHT_UP],ecx
	   000000A8
			      C                     .ELSEIF (al == _RE_DROPPED_INTO_LEFT)
 00001913  E9 000000E0	   *	    jmp    @C0289
 00001918		   *@C0287:
 00001918  3C 0B	   *	    cmp    al, _RE_DROPPED_INTO_LEFT
 0000191A  75 0C	   *	    jne    @C028A
 0000191C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DROPPED_INTO_LEFT],ecx
	   000000AC
			      C                     .ELSEIF (al == _RE_DROPPED_INTO_RIGHT)
 00001923  E9 000000D0	   *	    jmp    @C028C
 00001928		   *@C028A:
 00001928  3C 0C	   *	    cmp    al, _RE_DROPPED_INTO_RIGHT
 0000192A  75 0C	   *	    jne    @C028D
 0000192C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DROPPED_INTO_RIGHT],ecx
	   000000B0
			      C                     .ELSEIF (al == _RE_DRAG_LEFT_START)
 00001933  E9 000000C0	   *	    jmp    @C028F
 00001938		   *@C028D:
 00001938  3C 0D	   *	    cmp    al, _RE_DRAG_LEFT_START
 0000193A  75 0C	   *	    jne    @C0290
 0000193C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DRAG_LEFT_START],ecx
	   000000B4
			      C                     .ELSEIF (al == _RE_DRAG_LEFT_STOP)
 00001943  E9 000000B0	   *	    jmp    @C0292
 00001948		   *@C0290:
 00001948  3C 0E	   *	    cmp    al, _RE_DRAG_LEFT_STOP
 0000194A  75 0C	   *	    jne    @C0293
 0000194C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DRAG_LEFT_STOP],ecx
	   000000B8
			      C                     .ELSEIF (al == _RE_DRAG_RIGHT_START)
 00001953  E9 000000A0	   *	    jmp    @C0295
 00001958		   *@C0293:
 00001958  3C 0F	   *	    cmp    al, _RE_DRAG_RIGHT_START
 0000195A  75 0C	   *	    jne    @C0296
 0000195C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DRAG_RIGHT_START],ecx
	   000000BC
			      C                     .ELSEIF (al == _RE_DRAG_RIGHT_STOP)
 00001963  E9 00000090	   *	    jmp    @C0298
 00001968		   *@C0296:
 00001968  3C 10	   *	    cmp    al, _RE_DRAG_RIGHT_STOP
 0000196A  75 0C	   *	    jne    @C0299
 0000196C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_DRAG_RIGHT_STOP],ecx
	   000000C0
			      C                     .ELSEIF (al == _RE_FOCUS_GOT)
 00001973  E9 00000080	   *	    jmp    @C029B
 00001978		   *@C0299:
 00001978  3C 11	   *	    cmp    al, _RE_FOCUS_GOT
 0000197A  75 09	   *	    jne    @C029C
 0000197C  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_FOCUS_GOT],ecx
	   000000C4
			      C                     .ELSEIF (al == _RE_FOCUS_LOST)
 00001983  EB 73	   *	    jmp    @C029E
 00001985		   *@C029C:
 00001985  3C 12	   *	    cmp    al, _RE_FOCUS_LOST
 00001987  75 09	   *	    jne    @C029F
 00001989  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_FOCUS_LOST],ecx
	   000000C8
			      C                     .ELSEIF (al == _RE_FOCUS_SET)
 00001990  EB 66	   *	    jmp    @C02A1
 00001992		   *@C029F:
 00001992  3C 13	   *	    cmp    al, _RE_FOCUS_SET
 00001994  75 09	   *	    jne    @C02A2
 00001996  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_FOCUS_SET],ecx
	   000000CC
			      C                     .ELSEIF (al == _RE_HOVER)
 0000199D  EB 59	   *	    jmp    @C02A4
 0000199F		   *@C02A2:
 0000199F  3C 14	   *	    cmp    al, _RE_HOVER
 000019A1  75 09	   *	    jne    @C02A5
 000019A3  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_HOVER],ecx
	   000000D0
			      C                     .ELSEIF (al == _RE_KEYSTROKE)
 000019AA  EB 4C	   *	    jmp    @C02A7
 000019AC		   *@C02A5:
 000019AC  3C 15	   *	    cmp    al, _RE_KEYSTROKE
 000019AE  75 09	   *	    jne    @C02A8
 000019B0  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_KEYSTROKE],ecx
	   000000D4
			      C                     .ELSEIF (al == _RE_WHEN_CREATED)
 000019B7  EB 3F	   *	    jmp    @C02AA
 000019B9		   *@C02A8:
 000019B9  3C 16	   *	    cmp    al, _RE_WHEN_CREATED
 000019BB  75 09	   *	    jne    @C02AB
 000019BD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_WHEN_CREATED],ecx
	   000000D8
			      C                     .ELSEIF (al == _RE_WHEN_DESTROYED)
 000019C4  EB 32	   *	    jmp    @C02AD
 000019C6		   *@C02AB:
 000019C6  3C 17	   *	    cmp    al, _RE_WHEN_DESTROYED
 000019C8  75 09	   *	    jne    @C02AE
 000019CA  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_WHEN_DESTROYED],ecx
	   000000DC
			      C                     .ELSEIF (al == _RE_REQUESTOR)
 000019D1  EB 25	   *	    jmp    @C02B0
 000019D3		   *@C02AE:
 000019D3  3C 18	   *	    cmp    al, _RE_REQUESTOR
 000019D5  75 09	   *	    jne    @C02B1
 000019D7  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_REQUESTOR],ecx
	   000000E0
			      C                     .ELSEIF (al == _RE_REFRESH)
 000019DE  EB 18	   *	    jmp    @C02B3
 000019E0		   *@C02B1:
 000019E0  3C 19	   *	    cmp    al, _RE_REFRESH
 000019E2  75 09	   *	    jne    @C02B4
 000019E4  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_HL_REFRESH],ecx
	   000000E4
			      C                     .ELSE
 000019EB  EB 0B	   *	    jmp    @C02B6
 000019ED		   *@C02B4:
			      C                       ; Unknown property, abort
 000019ED  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_EVENT
	   00000004
 000019F5  F9		      C                         stc
 000019F6  EB 0C	      C                         jmp     quit
			      C                     .ENDIF
 000019F8		   *@C02B6:
 000019F8		   *@C02B3:
 000019F8		   *@C02B0:
 000019F8		   *@C02AD:
 000019F8		   *@C02AA:
 000019F8		   *@C02A7:
 000019F8		   *@C02A4:
 000019F8		   *@C02A1:
 000019F8		   *@C029E:
 000019F8		   *@C029B:
 000019F8		   *@C0298:
 000019F8		   *@C0295:
 000019F8		   *@C0292:
 000019F8		   *@C028F:
 000019F8		   *@C028C:
 000019F8		   *@C0289:
 000019F8		   *@C0286:
 000019F8		   *@C0283:
 000019F8		   *@C0280:
 000019F8		   *@C027D:
 000019F8		   *@C027A:
 000019F8		   *@C0277:
 000019F8		   *@C0274:
 000019F8		   *@C0271:
 000019F8		   *@C026E:
 000019F8		   *@C026B:
 000019F8  83 C6 05	      C                     add     esi,5
			      C                 .ENDIF
			      C             .ENDIF
 000019FB		   *@C0268:
 000019FB		   *@C0267:
 000019FB		   *@C0264:
 000019FB		   *@C0261:
 000019FB		   *@C025E:
 000019FB		   *@C025B:
 000019FB		   *@C0258:
 000019FB		   *@C0255:
 000019FB		   *@C0252:
 000019FB		   *@C024F:
 000019FB		   *@C024C:
			      C         .ENDW
 000019FB		   *@C0247:
 000019FB		   *@C0242:
 000019FB  80 3E FF	   *	    cmp    byte ptr ds : [esi], _OBJECT_END
 000019FE  0F 85 FFFFFD68  *	    jne    @C0243
			      C 
 00001A04		      C       quit:
 00001A04  61		      C         popad
 00001A05  C3		      C         ret
 00001A06		      C     invOBJECT_create_hline      ENDP
			      C 
			      C 
			      C 
			      C 
 00001A06		      C     invOBJECT_create_rectangle      PROC
			      C     ; This routine is called to create a rectangle
			      C     ;
			      C     ; Upon entry:   es:[ebx] - far ptr to base object to add to to
			      C     ;               es:[edx] - last object in base-object's chain
			      C     ;               es:[edi] - where object will be added
			      C     ;               ds:[esi] - far ptr to object source
			      C     ;
			      C     ; Upon exit:    The object is created if it contains valid information
			      C     ;
 00001A06  60		      C         pushad
			      C       ; Headers unique to _RECTANGLE items
 00001A07  26: C6 47 04	      C         mov     byte ptr es:[edi+_OBJECT_TYPE],_RECTANGLE
	   12
			      C       ; Required headers
 00001A0C  8B 5E 01	      C         mov     ebx,dword ptr ds:[esi+_O_LR_TOP]
 00001A0F  26: 89 5F 0C	      C         mov     dword ptr es:[edi+_O_R_TOP],ebx
 00001A13  8B 5E 05	      C         mov     ebx,dword ptr ds:[esi+_O_LR_LEFT]
 00001A16  26: 89 5F 10	      C         mov     dword ptr es:[edi+_O_R_LEFT],ebx
 00001A1A  8B 5E 09	      C         mov     ebx,dword ptr ds:[esi+_O_LR_WIDTH]
 00001A1D  26: 89 5F 14	      C         mov     dword ptr es:[edi+_O_R_WIDTH],ebx
 00001A21  8B 5E 0D	      C         mov     ebx,dword ptr ds:[esi+_O_LR_HEIGHT]
 00001A24  26: 89 5F 18	      C         mov     dword ptr es:[edi+_O_R_HEIGHT],ebx
			      C 
			      C       ; Default initialization
 00001A28  B8 FFFFFFFF	      C         mov     eax,-1
 00001A2D  33 C9	      C         xor     ecx,ecx
 00001A2F  26: C6 47 1F	      C         mov     byte ptr es:[edi+_O_R_ENABLED],1
	   01
 00001A34  26: 88 4F 33	      C         mov     byte ptr es:[edi+_O_R_VISIBLE],cl
 00001A38  26: 88 4F 1C	      C         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_RED],cl
 00001A3C  26: 88 4F 1D	      C         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_GREEN],cl
 00001A40  26: 88 4F 1E	      C         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_BLUE],cl
 00001A44  26: 89 47 20	      C         mov     dword ptr es:[edi+_O_R_MISC_1],eax
 00001A48  26: 89 47 24	      C         mov     dword ptr es:[edi+_O_R_MISC_2],eax
 00001A4C  26: 89 47 28	      C         mov     dword ptr es:[edi+_O_R_MISC_3],eax
 00001A50  26: 89 47 2C	      C         mov     dword ptr es:[edi+_O_R_MISC_4],eax
 00001A54  26: 88 47 30	      C         mov     byte ptr es:[edi+_O_R_MISC_FLAG_1],al
 00001A58  26: 88 47 31	      C         mov     byte ptr es:[edi+_O_R_MISC_FLAG_2],al
 00001A5C  26: 88 47 32	      C         mov     byte ptr es:[edi+_O_R_MISC_FLAG_3],al
 00001A60  81 C7 00000080     C         add     edi,_O_R_ACTIVATE
 00001A66  26: 89 07	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_ACTIVATE],eax
 00001A69  26: 89 47 04	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_BOTH_SINGLE],eax
 00001A6D  26: 89 47 08	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_BOTH_DOUBLE],eax
 00001A71  26: 89 47 0C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_LEFT_SINGLE],eax
 00001A75  26: 89 47 10	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_LEFT_DOUBLE],eax
 00001A79  26: 89 47 14	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_LEFT_DOWN],eax
 00001A7D  26: 89 47 18	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_LEFT_UP],eax
 00001A81  26: 89 47 1C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_RIGHT_SINGLE],eax
 00001A85  26: 89 47 20	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_RIGHT_DOUBLE],eax
 00001A89  26: 89 47 24	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_RIGHT_DOWN],eax
 00001A8D  26: 89 47 28	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_CLICK_RIGHT_UP],eax
 00001A91  26: 89 47 2C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DROPPED_INTO_LEFT],eax
 00001A95  26: 89 47 30	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DROPPED_INTO_RIGHT],eax
 00001A99  26: 89 47 34	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DRAG_LEFT_START],eax
 00001A9D  26: 89 47 38	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DRAG_LEFT_STOP],eax
 00001AA1  26: 89 47 3C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DRAG_RIGHT_START],eax
 00001AA5  26: 89 47 40	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_DRAG_RIGHT_STOP],eax
 00001AA9  26: 89 47 44	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_FOCUS_GOT],eax
 00001AAD  26: 89 47 48	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_FOCUS_LOST],eax
 00001AB1  26: 89 47 4C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_FOCUS_SET],eax
 00001AB5  26: 89 47 50	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_HOVER],eax
 00001AB9  26: 89 47 54	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_KEYSTROKE],eax
 00001ABD  26: 89 47 58	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_WHEN_CREATED],eax
 00001AC1  26: 89 47 5C	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_WHEN_DESTROYED],eax
 00001AC5  26: 89 47 60	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_REQUESTOR],eax
 00001AC9  26: 89 47 64	      C         mov     dword ptr es:[edi-_O_R_ACTIVATE+_O_R_REFRESH],eax
 00001ACD  81 EF 00000080     C         sub     edi,_O_R_ACTIVATE
 00001AD3  83 C6 11	      C         add     esi,_O_LR_LENGTH
			      C 
			      C       ; Right now, ds:[esi] is sitting on any properties that are initialized to "other-than-default" values
 00001AD6  B3 FD	      C         mov     bl,_PROPERTY_START
			      C         .WHILE (byte ptr ds:[esi] != _OBJECT_END)
 00001AD8  E9 0000028F	   *	    jmp    @C02B8
 00001ADD		   *@C02B9:
 00001ADD  8A 06	      C             mov     al,byte ptr ds:[esi]
			      C             .IF (al == _PROPERTY_START || al == _EVENT_START)
 00001ADF  3C FD	   *	    cmp    al, _PROPERTY_START
 00001AE1  74 04	   *	    je     @C02BB
 00001AE3  3C FE	   *	    cmp    al, _EVENT_START
 00001AE5  75 07	   *	    jne    @C02BA
 00001AE7		   *@C02BB:
 00001AE7  8A D8	      C                 mov     bl,al
			      C             .ELSE
 00001AE9  E9 0000027E	   *	    jmp    @C02BD
 00001AEE		   *@C02BA:
			      C                 .IF (bl == _PROPERTY_START)
 00001AEE  80 FB FD	   *	    cmp    bl, _PROPERTY_START
 00001AF1  0F 85 000000DF  *	    jne    @C02BE
			      C                   ; They're setting a property, which one?
			      C                     .IF (al == _RP_ENABLED)
 00001AF7  0A C0	   *	    or	al, al
 00001AF9  75 0F	   *	    jne    @C02C0
 00001AFB  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_ENABLED]
 00001AFE  26: 88 47 1F	      C                         mov     byte ptr es:[edi+_O_R_ENABLED],al
 00001B02  83 C6 02	      C                         add     esi,_O_LR_ENABLED_SIZE
			      C                     .ELSEIF (al == _RP_VISIBLE)
 00001B05  E9 00000262	   *	    jmp    @C02C2
 00001B0A		   *@C02C0:
 00001B0A  3C 01	   *	    cmp    al, _RP_VISIBLE
 00001B0C  75 0F	   *	    jne    @C02C3
 00001B0E  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_VISIBLE]
 00001B11  26: 88 47 33	      C                         mov     byte ptr es:[edi+_O_R_VISIBLE],al
 00001B15  83 C6 02	      C                         add     esi,_O_LR_VISIBLE_SIZE
			      C                     .ELSEIF (al == _RP_BACKGROUND)
 00001B18  E9 0000024F	   *	    jmp    @C02C5
 00001B1D		   *@C02C3:
 00001B1D  3C 02	   *	    cmp    al, _RP_BACKGROUND
 00001B1F  75 1D	   *	    jne    @C02C6
 00001B21  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_BACKGROUND_RED]
 00001B24  26: 88 47 1C	      C                         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_RED],al
 00001B28  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LR_BACKGROUND_GREEN]
 00001B2B  26: 88 47 1D	      C                         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_GREEN],al
 00001B2F  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LR_BACKGROUND_BLUE]
 00001B32  26: 88 47 1E	      C                         mov     byte ptr es:[edi+_O_R_BACKGROUND+_OBJECT_BLUE],al
 00001B36  83 C6 04	      C                         add     esi,_O_LR_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _RP_MISC_1)
 00001B39  E9 0000022E	   *	    jmp    @C02C8
 00001B3E		   *@C02C6:
 00001B3E  3C 03	   *	    cmp    al, _RP_MISC_1
 00001B40  75 0F	   *	    jne    @C02C9
 00001B42  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LR_MISC_1]
 00001B45  26: 89 47 20	      C                         mov     dword ptr es:[edi+_O_R_MISC_1],eax
 00001B49  83 C6 05	      C                         add     esi,_O_LR_MISC_1_SIZE
			      C                     .ELSEIF (al == _RP_MISC_2)
 00001B4C  E9 0000021B	   *	    jmp    @C02CB
 00001B51		   *@C02C9:
 00001B51  3C 04	   *	    cmp    al, _RP_MISC_2
 00001B53  75 0F	   *	    jne    @C02CC
 00001B55  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LR_MISC_2]
 00001B58  26: 89 47 24	      C                         mov     dword ptr es:[edi+_O_R_MISC_2],eax
 00001B5C  83 C6 05	      C                         add     esi,_O_LR_MISC_2_SIZE
			      C                     .ELSEIF (al == _RP_MISC_3)
 00001B5F  E9 00000208	   *	    jmp    @C02CE
 00001B64		   *@C02CC:
 00001B64  3C 05	   *	    cmp    al, _RP_MISC_3
 00001B66  75 0F	   *	    jne    @C02CF
 00001B68  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LR_MISC_3]
 00001B6B  26: 89 47 28	      C                         mov     dword ptr es:[edi+_O_R_MISC_3],eax
 00001B6F  83 C6 05	      C                         add     esi,_O_LR_MISC_3_SIZE
			      C                     .ELSEIF (al == _RP_MISC_4)
 00001B72  E9 000001F5	   *	    jmp    @C02D1
 00001B77		   *@C02CF:
 00001B77  3C 06	   *	    cmp    al, _RP_MISC_4
 00001B79  75 0F	   *	    jne    @C02D2
 00001B7B  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LR_MISC_4]
 00001B7E  26: 89 47 2C	      C                         mov     dword ptr es:[edi+_O_R_MISC_4],eax
 00001B82  83 C6 05	      C                         add     esi,_O_LR_MISC_4_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_1)
 00001B85  E9 000001E2	   *	    jmp    @C02D4
 00001B8A		   *@C02D2:
 00001B8A  3C 07	   *	    cmp    al, _RP_MISC_FLAG_1
 00001B8C  75 0F	   *	    jne    @C02D5
 00001B8E  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_MISC_FLAG_1]
 00001B91  26: 88 47 30	      C                         mov     byte ptr es:[edi+_O_R_MISC_FLAG_1],al
 00001B95  83 C6 02	      C                         add     esi,_O_LR_MISC_FLAG_1_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_2)
 00001B98  E9 000001CF	   *	    jmp    @C02D7
 00001B9D		   *@C02D5:
 00001B9D  3C 08	   *	    cmp    al, _RP_MISC_FLAG_2
 00001B9F  75 0F	   *	    jne    @C02D8
 00001BA1  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_MISC_FLAG_2]
 00001BA4  26: 88 47 31	      C                         mov     byte ptr es:[edi+_O_R_MISC_FLAG_2],al
 00001BA8  83 C6 02	      C                         add     esi,_O_LR_MISC_FLAG_2_SIZE
			      C                     .ELSEIF (al == _RP_MISC_FLAG_3)
 00001BAB  E9 000001BC	   *	    jmp    @C02DA
 00001BB0		   *@C02D8:
 00001BB0  3C 09	   *	    cmp    al, _RP_MISC_FLAG_3
 00001BB2  75 0F	   *	    jne    @C02DB
 00001BB4  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LR_MISC_FLAG_3]
 00001BB7  26: 88 47 32	      C                         mov     byte ptr es:[edi+_O_R_MISC_FLAG_3],al
 00001BBB  83 C6 02	      C                         add     esi,_O_LR_MISC_FLAG_3_SIZE
			      C                     .ELSE
 00001BBE  E9 000001A9	   *	    jmp    @C02DD
 00001BC3		   *@C02DB:
			      C                       ; Unknown property, abort
 00001BC3  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_PROPERTY
	   00000003
 00001BCB  F9		      C                         stc
 00001BCC  E9 000001A4	      C                         jmp     quit
			      C                     .ENDIF
			      C                 .ELSE
 00001BD1  E9 00000196	   *	    jmp    @C02DE
 00001BD6		   *@C02BE:
			      C                   ; They're setting an event, which one?
 00001BD6  8B 4E 01	      C                     mov     ecx,dword ptr ds:[esi+1]
			      C                     .IF     (al == _RE_ACTIVATE)
 00001BD9  0A C0	   *	    or	al, al
 00001BDB  75 0C	   *	    jne    @C02DF
 00001BDD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_ACTIVATE],ecx
	   00000080
			      C                     .ELSEIF (al == _RE_CLICK_BOTH_SINGLE)
 00001BE4  E9 00000180	   *	    jmp    @C02E1
 00001BE9		   *@C02DF:
 00001BE9  3C 01	   *	    cmp    al, _RE_CLICK_BOTH_SINGLE
 00001BEB  75 0C	   *	    jne    @C02E2
 00001BED  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_BOTH_SINGLE],ecx
	   00000084
			      C                     .ELSEIF (al == _RE_CLICK_BOTH_DOUBLE)
 00001BF4  E9 00000170	   *	    jmp    @C02E4
 00001BF9		   *@C02E2:
 00001BF9  3C 02	   *	    cmp    al, _RE_CLICK_BOTH_DOUBLE
 00001BFB  75 0C	   *	    jne    @C02E5
 00001BFD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_BOTH_DOUBLE],ecx
	   00000088
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_SINGLE)
 00001C04  E9 00000160	   *	    jmp    @C02E7
 00001C09		   *@C02E5:
 00001C09  3C 03	   *	    cmp    al, _RE_CLICK_LEFT_SINGLE
 00001C0B  75 0C	   *	    jne    @C02E8
 00001C0D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_LEFT_SINGLE],ecx
	   0000008C
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_DOUBLE)
 00001C14  E9 00000150	   *	    jmp    @C02EA
 00001C19		   *@C02E8:
 00001C19  3C 04	   *	    cmp    al, _RE_CLICK_LEFT_DOUBLE
 00001C1B  75 0C	   *	    jne    @C02EB
 00001C1D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_LEFT_DOUBLE],ecx
	   00000090
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_DOWN)
 00001C24  E9 00000140	   *	    jmp    @C02ED
 00001C29		   *@C02EB:
 00001C29  3C 05	   *	    cmp    al, _RE_CLICK_LEFT_DOWN
 00001C2B  75 0C	   *	    jne    @C02EE
 00001C2D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_LEFT_DOWN],ecx
	   00000094
			      C                     .ELSEIF (al == _RE_CLICK_LEFT_UP)
 00001C34  E9 00000130	   *	    jmp    @C02F0
 00001C39		   *@C02EE:
 00001C39  3C 06	   *	    cmp    al, _RE_CLICK_LEFT_UP
 00001C3B  75 0C	   *	    jne    @C02F1
 00001C3D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_LEFT_UP],ecx
	   00000098
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_SINGLE)
 00001C44  E9 00000120	   *	    jmp    @C02F3
 00001C49		   *@C02F1:
 00001C49  3C 07	   *	    cmp    al, _RE_CLICK_RIGHT_SINGLE
 00001C4B  75 0C	   *	    jne    @C02F4
 00001C4D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_RIGHT_SINGLE],ecx
	   0000009C
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_DOUBLE)
 00001C54  E9 00000110	   *	    jmp    @C02F6
 00001C59		   *@C02F4:
 00001C59  3C 08	   *	    cmp    al, _RE_CLICK_RIGHT_DOUBLE
 00001C5B  75 0C	   *	    jne    @C02F7
 00001C5D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_RIGHT_DOUBLE],ecx
	   000000A0
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_DOWN)
 00001C64  E9 00000100	   *	    jmp    @C02F9
 00001C69		   *@C02F7:
 00001C69  3C 09	   *	    cmp    al, _RE_CLICK_RIGHT_DOWN
 00001C6B  75 0C	   *	    jne    @C02FA
 00001C6D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_RIGHT_DOWN],ecx
	   000000A4
			      C                     .ELSEIF (al == _RE_CLICK_RIGHT_UP)
 00001C74  E9 000000F0	   *	    jmp    @C02FC
 00001C79		   *@C02FA:
 00001C79  3C 0A	   *	    cmp    al, _RE_CLICK_RIGHT_UP
 00001C7B  75 0C	   *	    jne    @C02FD
 00001C7D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_CLICK_RIGHT_UP],ecx
	   000000A8
			      C                     .ELSEIF (al == _RE_DROPPED_INTO_LEFT)
 00001C84  E9 000000E0	   *	    jmp    @C02FF
 00001C89		   *@C02FD:
 00001C89  3C 0B	   *	    cmp    al, _RE_DROPPED_INTO_LEFT
 00001C8B  75 0C	   *	    jne    @C0300
 00001C8D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DROPPED_INTO_LEFT],ecx
	   000000AC
			      C                     .ELSEIF (al == _RE_DROPPED_INTO_RIGHT)
 00001C94  E9 000000D0	   *	    jmp    @C0302
 00001C99		   *@C0300:
 00001C99  3C 0C	   *	    cmp    al, _RE_DROPPED_INTO_RIGHT
 00001C9B  75 0C	   *	    jne    @C0303
 00001C9D  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DROPPED_INTO_RIGHT],ecx
	   000000B0
			      C                     .ELSEIF (al == _RE_DRAG_LEFT_START)
 00001CA4  E9 000000C0	   *	    jmp    @C0305
 00001CA9		   *@C0303:
 00001CA9  3C 0D	   *	    cmp    al, _RE_DRAG_LEFT_START
 00001CAB  75 0C	   *	    jne    @C0306
 00001CAD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DRAG_LEFT_START],ecx
	   000000B4
			      C                     .ELSEIF (al == _RE_DRAG_LEFT_STOP)
 00001CB4  E9 000000B0	   *	    jmp    @C0308
 00001CB9		   *@C0306:
 00001CB9  3C 0E	   *	    cmp    al, _RE_DRAG_LEFT_STOP
 00001CBB  75 0C	   *	    jne    @C0309
 00001CBD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DRAG_LEFT_STOP],ecx
	   000000B8
			      C                     .ELSEIF (al == _RE_DRAG_RIGHT_START)
 00001CC4  E9 000000A0	   *	    jmp    @C030B
 00001CC9		   *@C0309:
 00001CC9  3C 0F	   *	    cmp    al, _RE_DRAG_RIGHT_START
 00001CCB  75 0C	   *	    jne    @C030C
 00001CCD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DRAG_RIGHT_START],ecx
	   000000BC
			      C                     .ELSEIF (al == _RE_DRAG_RIGHT_STOP)
 00001CD4  E9 00000090	   *	    jmp    @C030E
 00001CD9		   *@C030C:
 00001CD9  3C 10	   *	    cmp    al, _RE_DRAG_RIGHT_STOP
 00001CDB  75 0C	   *	    jne    @C030F
 00001CDD  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_DRAG_RIGHT_STOP],ecx
	   000000C0
			      C                     .ELSEIF (al == _RE_FOCUS_GOT)
 00001CE4  E9 00000080	   *	    jmp    @C0311
 00001CE9		   *@C030F:
 00001CE9  3C 11	   *	    cmp    al, _RE_FOCUS_GOT
 00001CEB  75 09	   *	    jne    @C0312
 00001CED  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_FOCUS_GOT],ecx
	   000000C4
			      C                     .ELSEIF (al == _RE_FOCUS_LOST)
 00001CF4  EB 73	   *	    jmp    @C0314
 00001CF6		   *@C0312:
 00001CF6  3C 12	   *	    cmp    al, _RE_FOCUS_LOST
 00001CF8  75 09	   *	    jne    @C0315
 00001CFA  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_FOCUS_LOST],ecx
	   000000C8
			      C                     .ELSEIF (al == _RE_FOCUS_SET)
 00001D01  EB 66	   *	    jmp    @C0317
 00001D03		   *@C0315:
 00001D03  3C 13	   *	    cmp    al, _RE_FOCUS_SET
 00001D05  75 09	   *	    jne    @C0318
 00001D07  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_FOCUS_SET],ecx
	   000000CC
			      C                     .ELSEIF (al == _RE_HOVER)
 00001D0E  EB 59	   *	    jmp    @C031A
 00001D10		   *@C0318:
 00001D10  3C 14	   *	    cmp    al, _RE_HOVER
 00001D12  75 09	   *	    jne    @C031B
 00001D14  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_HOVER],ecx
	   000000D0
			      C                     .ELSEIF (al == _RE_KEYSTROKE)
 00001D1B  EB 4C	   *	    jmp    @C031D
 00001D1D		   *@C031B:
 00001D1D  3C 15	   *	    cmp    al, _RE_KEYSTROKE
 00001D1F  75 09	   *	    jne    @C031E
 00001D21  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_KEYSTROKE],ecx
	   000000D4
			      C                     .ELSEIF (al == _RE_WHEN_CREATED)
 00001D28  EB 3F	   *	    jmp    @C0320
 00001D2A		   *@C031E:
 00001D2A  3C 16	   *	    cmp    al, _RE_WHEN_CREATED
 00001D2C  75 09	   *	    jne    @C0321
 00001D2E  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_WHEN_CREATED],ecx
	   000000D8
			      C                     .ELSEIF (al == _RE_WHEN_DESTROYED)
 00001D35  EB 32	   *	    jmp    @C0323
 00001D37		   *@C0321:
 00001D37  3C 17	   *	    cmp    al, _RE_WHEN_DESTROYED
 00001D39  75 09	   *	    jne    @C0324
 00001D3B  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_WHEN_DESTROYED],ecx
	   000000DC
			      C                     .ELSEIF (al == _RE_REQUESTOR)
 00001D42  EB 25	   *	    jmp    @C0326
 00001D44		   *@C0324:
 00001D44  3C 18	   *	    cmp    al, _RE_REQUESTOR
 00001D46  75 09	   *	    jne    @C0327
 00001D48  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_REQUESTOR],ecx
	   000000E0
			      C                     .ELSEIF (al == _RE_REFRESH)
 00001D4F  EB 18	   *	    jmp    @C0329
 00001D51		   *@C0327:
 00001D51  3C 19	   *	    cmp    al, _RE_REFRESH
 00001D53  75 09	   *	    jne    @C032A
 00001D55  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_R_REFRESH],ecx
	   000000E4
			      C                     .ELSE
 00001D5C  EB 0B	   *	    jmp    @C032C
 00001D5E		   *@C032A:
			      C                       ; Unknown property, abort
 00001D5E  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_EVENT
	   00000004
 00001D66  F9		      C                         stc
 00001D67  EB 0C	      C                         jmp     quit
			      C                     .ENDIF
 00001D69		   *@C032C:
 00001D69		   *@C0329:
 00001D69		   *@C0326:
 00001D69		   *@C0323:
 00001D69		   *@C0320:
 00001D69		   *@C031D:
 00001D69		   *@C031A:
 00001D69		   *@C0317:
 00001D69		   *@C0314:
 00001D69		   *@C0311:
 00001D69		   *@C030E:
 00001D69		   *@C030B:
 00001D69		   *@C0308:
 00001D69		   *@C0305:
 00001D69		   *@C0302:
 00001D69		   *@C02FF:
 00001D69		   *@C02FC:
 00001D69		   *@C02F9:
 00001D69		   *@C02F6:
 00001D69		   *@C02F3:
 00001D69		   *@C02F0:
 00001D69		   *@C02ED:
 00001D69		   *@C02EA:
 00001D69		   *@C02E7:
 00001D69		   *@C02E4:
 00001D69		   *@C02E1:
 00001D69  83 C6 05	      C                     add     esi,5
			      C                 .ENDIF
			      C             .ENDIF
 00001D6C		   *@C02DE:
 00001D6C		   *@C02DD:
 00001D6C		   *@C02DA:
 00001D6C		   *@C02D7:
 00001D6C		   *@C02D4:
 00001D6C		   *@C02D1:
 00001D6C		   *@C02CE:
 00001D6C		   *@C02CB:
 00001D6C		   *@C02C8:
 00001D6C		   *@C02C5:
 00001D6C		   *@C02C2:
			      C         .ENDW
 00001D6C		   *@C02BD:
 00001D6C		   *@C02B8:
 00001D6C  80 3E FF	   *	    cmp    byte ptr ds : [esi], _OBJECT_END
 00001D6F  0F 85 FFFFFD68  *	    jne    @C02B9
			      C 
 00001D75		      C       quit:
 00001D75  61		      C         popad
 00001D76  C3		      C         ret
 00001D77		      C     invOBJECT_create_rectangle      ENDP
			      C 
			      C 
			      C 
			      C 
 00001D77		      C     invOBJECT_create_border_box     PROC
			      C     ; This routine is called to create a border box
			      C     ;
			      C     ; Upon entry:   es:[ebx] - far ptr to base object to add to to
			      C     ;               es:[edx] - last object in base-object's chain
			      C     ;               es:[edi] - where object will be added
			      C     ;               ds:[esi] - far ptr to object source
			      C     ;
			      C     ; Upon exit:    The object is created if it contains valid information
			      C     ;
 00001D77  60		      C         pushad
			      C       ; Headers unique to _RECTANGLE items
 00001D78  26: C6 47 04	      C         mov     byte ptr es:[edi+_OBJECT_TYPE],_BORDER_BOX
	   19
			      C       ; Required headers
 00001D7D  8B 5E 01	      C         mov     ebx,dword ptr ds:[esi+_O_LBB_TOP]
 00001D80  26: 89 5F 0C	      C         mov     dword ptr es:[edi+_O_BB_TOP],ebx
 00001D84  8B 5E 05	      C         mov     ebx,dword ptr ds:[esi+_O_LBB_LEFT]
 00001D87  26: 89 5F 10	      C         mov     dword ptr es:[edi+_O_BB_LEFT],ebx
 00001D8B  8B 5E 09	      C         mov     ebx,dword ptr ds:[esi+_O_LBB_WIDTH]
 00001D8E  26: 89 5F 14	      C         mov     dword ptr es:[edi+_O_BB_WIDTH],ebx
 00001D92  8B 5E 0D	      C         mov     ebx,dword ptr ds:[esi+_O_LBB_HEIGHT]
 00001D95  26: 89 5F 18	      C         mov     dword ptr es:[edi+_O_BB_HEIGHT],ebx
			      C 
			      C       ; Default initialization
 00001D99  B8 FFFFFFFF	      C         mov     eax,-1
 00001D9E  33 C9	      C         xor     ecx,ecx
 00001DA0  26: C6 47 25	      C         mov     byte ptr es:[edi+_O_BB_ENABLED],1
	   01
 00001DA5  26: 88 4F 27	      C         mov     byte ptr es:[edi+_O_BB_VISIBLE],cl
 00001DA9  26: 88 4F 1C	      C         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_RED],cl
 00001DAD  26: 88 4F 1D	      C         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_GREEN],cl
 00001DB1  26: 88 4F 1E	      C         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_BLUE],cl
 00001DB5  26: 88 4F 1F	      C         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_RED],cl
 00001DB9  26: 88 4F 20	      C         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_GREEN],cl
 00001DBD  26: 88 4F 21	      C         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_BLUE],cl
 00001DC1  26: 88 4F 22	      C         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_RED],cl
 00001DC5  26: 88 4F 23	      C         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_GREEN],cl
 00001DC9  26: 88 4F 24	      C         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_BLUE],cl
 00001DCD  26: 89 47 28	      C         mov     dword ptr es:[edi+_O_BB_MISC_1],eax
 00001DD1  26: 89 47 2C	      C         mov     dword ptr es:[edi+_O_BB_MISC_2],eax
 00001DD5  26: 89 47 30	      C         mov     dword ptr es:[edi+_O_BB_MISC_3],eax
 00001DD9  26: 89 47 34	      C         mov     dword ptr es:[edi+_O_BB_MISC_4],eax
 00001DDD  26: 88 47 38	      C         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_1],al
 00001DE1  26: 88 47 39	      C         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_2],al
 00001DE5  26: 88 47 3A	      C         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_3],al
 00001DE9  81 C7 00000080     C         add     edi,_O_BB_ACTIVATE
 00001DEF  26: 89 07	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_ACTIVATE],eax
 00001DF2  26: 89 47 04	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_BOTH_SINGLE],eax
 00001DF6  26: 89 47 08	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_BOTH_DOUBLE],eax
 00001DFA  26: 89 47 0C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_LEFT_SINGLE],eax
 00001DFE  26: 89 47 10	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_LEFT_DOUBLE],eax
 00001E02  26: 89 47 14	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_LEFT_DOWN],eax
 00001E06  26: 89 47 18	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_LEFT_UP],eax
 00001E0A  26: 89 47 1C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_RIGHT_SINGLE],eax
 00001E0E  26: 89 47 20	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_RIGHT_DOUBLE],eax
 00001E12  26: 89 47 24	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_RIGHT_DOWN],eax
 00001E16  26: 89 47 28	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_CLICK_RIGHT_UP],eax
 00001E1A  26: 89 47 2C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DROPPED_INTO_LEFT],eax
 00001E1E  26: 89 47 30	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DROPPED_INTO_RIGHT],eax
 00001E22  26: 89 47 34	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DRAG_LEFT_START],eax
 00001E26  26: 89 47 38	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DRAG_LEFT_STOP],eax
 00001E2A  26: 89 47 3C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DRAG_RIGHT_START],eax
 00001E2E  26: 89 47 40	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_DRAG_RIGHT_STOP],eax
 00001E32  26: 89 47 44	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_FOCUS_GOT],eax
 00001E36  26: 89 47 48	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_FOCUS_LOST],eax
 00001E3A  26: 89 47 4C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_FOCUS_SET],eax
 00001E3E  26: 89 47 50	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_HOVER],eax
 00001E42  26: 89 47 54	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_KEYSTROKE],eax
 00001E46  26: 89 47 58	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_WHEN_CREATED],eax
 00001E4A  26: 89 47 5C	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_WHEN_DESTROYED],eax
 00001E4E  26: 89 47 60	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_REQUESTOR],eax
 00001E52  26: 89 47 64	      C         mov     dword ptr es:[edi-_O_BB_ACTIVATE+_O_BB_REFRESH],eax
 00001E56  81 EF 00000080     C         sub     edi,_O_BB_ACTIVATE
 00001E5C  83 C6 11	      C         add     esi,_O_LBB_LENGTH
			      C 
			      C       ; Right now, ds:[esi] is sitting on any properties that are initialized to "other-than-default" values
 00001E5F  B3 FD	      C         mov     bl,_PROPERTY_START
			      C         .WHILE (byte ptr ds:[esi] != _OBJECT_END)
 00001E61  E9 000002D1	   *	    jmp    @C032E
 00001E66		   *@C032F:
 00001E66  8A 06	      C             mov     al,byte ptr ds:[esi]
			      C             .IF (al == _PROPERTY_START || al == _EVENT_START)
 00001E68  3C FD	   *	    cmp    al, _PROPERTY_START
 00001E6A  74 04	   *	    je     @C0331
 00001E6C  3C FE	   *	    cmp    al, _EVENT_START
 00001E6E  75 07	   *	    jne    @C0330
 00001E70		   *@C0331:
 00001E70  8A D8	      C                 mov     bl,al
			      C             .ELSE
 00001E72  E9 000002C0	   *	    jmp    @C0333
 00001E77		   *@C0330:
			      C                 .IF (bl == _PROPERTY_START)
 00001E77  80 FB FD	   *	    cmp    bl, _PROPERTY_START
 00001E7A  0F 85 00000121  *	    jne    @C0334
			      C                   ; They're setting a property, which one?
			      C                     .IF (al == _BBP_ENABLED)
 00001E80  0A C0	   *	    or	al, al
 00001E82  75 0F	   *	    jne    @C0336
 00001E84  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_ENABLED]
 00001E87  26: 88 47 25	      C                         mov     byte ptr es:[edi+_O_BB_ENABLED],al
 00001E8B  83 C6 02	      C                         add     esi,_O_LBB_ENABLED_SIZE
			      C                     .ELSEIF (al == _BBP_VISIBLE)
 00001E8E  E9 000002A4	   *	    jmp    @C0338
 00001E93		   *@C0336:
 00001E93  3C 01	   *	    cmp    al, _BBP_VISIBLE
 00001E95  75 0F	   *	    jne    @C0339
 00001E97  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_VISIBLE]
 00001E9A  26: 88 47 27	      C                         mov     byte ptr es:[edi+_O_BB_VISIBLE],al
 00001E9E  83 C6 02	      C                         add     esi,_O_LBB_VISIBLE_SIZE
			      C                     .ELSEIF (al == _BBP_BACKGROUND)
 00001EA1  E9 00000291	   *	    jmp    @C033B
 00001EA6		   *@C0339:
 00001EA6  3C 02	   *	    cmp    al, _BBP_BACKGROUND
 00001EA8  75 1D	   *	    jne    @C033C
 00001EAA  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_BACKGROUND_RED]
 00001EAD  26: 88 47 1C	      C                         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_RED],al
 00001EB1  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LBB_BACKGROUND_GREEN]
 00001EB4  26: 88 47 1D	      C                         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_GREEN],al
 00001EB8  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LBB_BACKGROUND_BLUE]
 00001EBB  26: 88 47 1E	      C                         mov     byte ptr es:[edi+_O_BB_BACKGROUND+_OBJECT_BLUE],al
 00001EBF  83 C6 04	      C                         add     esi,_O_LBB_BACKGROUND_SIZE
			      C                     .ELSEIF (al == _BBP_LIGHT_BORDER)
 00001EC2  E9 00000270	   *	    jmp    @C033E
 00001EC7		   *@C033C:
 00001EC7  3C 03	   *	    cmp    al, _BBP_LIGHT_BORDER
 00001EC9  75 1D	   *	    jne    @C033F
 00001ECB  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_LIGHT_BORDER_RED]
 00001ECE  26: 88 47 1F	      C                         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_RED],al
 00001ED2  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LBB_LIGHT_BORDER_GREEN]
 00001ED5  26: 88 47 20	      C                         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_GREEN],al
 00001ED9  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LBB_LIGHT_BORDER_BLUE]
 00001EDC  26: 88 47 21	      C                         mov     byte ptr es:[edi+_O_BB_LIGHT_BORDER+_OBJECT_BLUE],al
 00001EE0  83 C6 04	      C                         add     esi,_O_LBB_LIGHT_BORDER_SIZE
			      C                     .ELSEIF (al == _BBP_SHADOW_BORDER)
 00001EE3  E9 0000024F	   *	    jmp    @C0341
 00001EE8		   *@C033F:
 00001EE8  3C 04	   *	    cmp    al, _BBP_SHADOW_BORDER
 00001EEA  75 1D	   *	    jne    @C0342
 00001EEC  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_SHADOW_BORDER_RED]
 00001EEF  26: 88 47 22	      C                         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_RED],al
 00001EF3  8A 46 02	      C                         mov     al,byte ptr ds:[esi+_O_LBB_SHADOW_BORDER_GREEN]
 00001EF6  26: 88 47 23	      C                         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_GREEN],al
 00001EFA  8A 46 03	      C                         mov     al,byte ptr ds:[esi+_O_LBB_SHADOW_BORDER_BLUE]
 00001EFD  26: 88 47 24	      C                         mov     byte ptr es:[edi+_O_BB_SHADOW_BORDER+_OBJECT_BLUE],al
 00001F01  83 C6 04	      C                         add     esi,_O_LBB_SHADOW_BORDER_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_1)
 00001F04  E9 0000022E	   *	    jmp    @C0344
 00001F09		   *@C0342:
 00001F09  3C 05	   *	    cmp    al, _BBP_MISC_1
 00001F0B  75 0F	   *	    jne    @C0345
 00001F0D  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LBB_MISC_1]
 00001F10  26: 89 47 28	      C                         mov     dword ptr es:[edi+_O_BB_MISC_1],eax
 00001F14  83 C6 05	      C                         add     esi,_O_LBB_MISC_1_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_2)
 00001F17  E9 0000021B	   *	    jmp    @C0347
 00001F1C		   *@C0345:
 00001F1C  3C 06	   *	    cmp    al, _BBP_MISC_2
 00001F1E  75 0F	   *	    jne    @C0348
 00001F20  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LBB_MISC_2]
 00001F23  26: 89 47 2C	      C                         mov     dword ptr es:[edi+_O_BB_MISC_2],eax
 00001F27  83 C6 05	      C                         add     esi,_O_LBB_MISC_2_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_3)
 00001F2A  E9 00000208	   *	    jmp    @C034A
 00001F2F		   *@C0348:
 00001F2F  3C 07	   *	    cmp    al, _BBP_MISC_3
 00001F31  75 0F	   *	    jne    @C034B
 00001F33  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LBB_MISC_3]
 00001F36  26: 89 47 30	      C                         mov     dword ptr es:[edi+_O_BB_MISC_3],eax
 00001F3A  83 C6 05	      C                         add     esi,_O_LBB_MISC_3_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_4)
 00001F3D  E9 000001F5	   *	    jmp    @C034D
 00001F42		   *@C034B:
 00001F42  3C 08	   *	    cmp    al, _BBP_MISC_4
 00001F44  75 0F	   *	    jne    @C034E
 00001F46  8B 46 01	      C                         mov     eax,dword ptr ds:[esi+_O_LBB_MISC_4]
 00001F49  26: 89 47 34	      C                         mov     dword ptr es:[edi+_O_BB_MISC_4],eax
 00001F4D  83 C6 05	      C                         add     esi,_O_LBB_MISC_4_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_FLAG_1)
 00001F50  E9 000001E2	   *	    jmp    @C0350
 00001F55		   *@C034E:
 00001F55  3C 09	   *	    cmp    al, _BBP_MISC_FLAG_1
 00001F57  75 0F	   *	    jne    @C0351
 00001F59  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_MISC_FLAG_1]
 00001F5C  26: 88 47 38	      C                         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_1],al
 00001F60  83 C6 02	      C                         add     esi,_O_LBB_MISC_FLAG_1_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_FLAG_2)
 00001F63  E9 000001CF	   *	    jmp    @C0353
 00001F68		   *@C0351:
 00001F68  3C 0A	   *	    cmp    al, _BBP_MISC_FLAG_2
 00001F6A  75 0F	   *	    jne    @C0354
 00001F6C  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_MISC_FLAG_2]
 00001F6F  26: 88 47 39	      C                         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_2],al
 00001F73  83 C6 02	      C                         add     esi,_O_LBB_MISC_FLAG_2_SIZE
			      C                     .ELSEIF (al == _BBP_MISC_FLAG_3)
 00001F76  E9 000001BC	   *	    jmp    @C0356
 00001F7B		   *@C0354:
 00001F7B  3C 0B	   *	    cmp    al, _BBP_MISC_FLAG_3
 00001F7D  75 0F	   *	    jne    @C0357
 00001F7F  8A 46 01	      C                         mov     al,byte ptr ds:[esi+_O_LBB_MISC_FLAG_3]
 00001F82  26: 88 47 3A	      C                         mov     byte ptr es:[edi+_O_BB_MISC_FLAG_3],al
 00001F86  83 C6 02	      C                         add     esi,_O_LBB_MISC_FLAG_3_SIZE
			      C                     .ELSE
 00001F89  E9 000001A9	   *	    jmp    @C0359
 00001F8E		   *@C0357:
			      C                       ; Unknown property, abort
 00001F8E  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_PROPERTY
	   00000003
 00001F96  F9		      C                         stc
 00001F97  E9 000001A4	      C                         jmp     quit
			      C                     .ENDIF
			      C                 .ELSE
 00001F9C  E9 00000196	   *	    jmp    @C035A
 00001FA1		   *@C0334:
			      C                   ; They're setting an event, which one?
 00001FA1  8B 4E 01	      C                     mov     ecx,dword ptr ds:[esi+1]
			      C                     .IF     (al == _BBE_ACTIVATE)
 00001FA4  0A C0	   *	    or	al, al
 00001FA6  75 0C	   *	    jne    @C035B
 00001FA8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_ACTIVATE],ecx
	   00000080
			      C                     .ELSEIF (al == _BBE_CLICK_BOTH_SINGLE)
 00001FAF  E9 00000180	   *	    jmp    @C035D
 00001FB4		   *@C035B:
 00001FB4  3C 01	   *	    cmp    al, _BBE_CLICK_BOTH_SINGLE
 00001FB6  75 0C	   *	    jne    @C035E
 00001FB8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_BOTH_SINGLE],ecx
	   00000084
			      C                     .ELSEIF (al == _BBE_CLICK_BOTH_DOUBLE)
 00001FBF  E9 00000170	   *	    jmp    @C0360
 00001FC4		   *@C035E:
 00001FC4  3C 02	   *	    cmp    al, _BBE_CLICK_BOTH_DOUBLE
 00001FC6  75 0C	   *	    jne    @C0361
 00001FC8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_BOTH_DOUBLE],ecx
	   00000088
			      C                     .ELSEIF (al == _BBE_CLICK_LEFT_SINGLE)
 00001FCF  E9 00000160	   *	    jmp    @C0363
 00001FD4		   *@C0361:
 00001FD4  3C 03	   *	    cmp    al, _BBE_CLICK_LEFT_SINGLE
 00001FD6  75 0C	   *	    jne    @C0364
 00001FD8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_LEFT_SINGLE],ecx
	   0000008C
			      C                     .ELSEIF (al == _BBE_CLICK_LEFT_DOUBLE)
 00001FDF  E9 00000150	   *	    jmp    @C0366
 00001FE4		   *@C0364:
 00001FE4  3C 04	   *	    cmp    al, _BBE_CLICK_LEFT_DOUBLE
 00001FE6  75 0C	   *	    jne    @C0367
 00001FE8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_LEFT_DOUBLE],ecx
	   00000090
			      C                     .ELSEIF (al == _BBE_CLICK_LEFT_DOWN)
 00001FEF  E9 00000140	   *	    jmp    @C0369
 00001FF4		   *@C0367:
 00001FF4  3C 05	   *	    cmp    al, _BBE_CLICK_LEFT_DOWN
 00001FF6  75 0C	   *	    jne    @C036A
 00001FF8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_LEFT_DOWN],ecx
	   00000094
			      C                     .ELSEIF (al == _BBE_CLICK_LEFT_UP)
 00001FFF  E9 00000130	   *	    jmp    @C036C
 00002004		   *@C036A:
 00002004  3C 06	   *	    cmp    al, _BBE_CLICK_LEFT_UP
 00002006  75 0C	   *	    jne    @C036D
 00002008  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_LEFT_UP],ecx
	   00000098
			      C                     .ELSEIF (al == _BBE_CLICK_RIGHT_SINGLE)
 0000200F  E9 00000120	   *	    jmp    @C036F
 00002014		   *@C036D:
 00002014  3C 07	   *	    cmp    al, _BBE_CLICK_RIGHT_SINGLE
 00002016  75 0C	   *	    jne    @C0370
 00002018  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_RIGHT_SINGLE],ecx
	   0000009C
			      C                     .ELSEIF (al == _BBE_CLICK_RIGHT_DOUBLE)
 0000201F  E9 00000110	   *	    jmp    @C0372
 00002024		   *@C0370:
 00002024  3C 08	   *	    cmp    al, _BBE_CLICK_RIGHT_DOUBLE
 00002026  75 0C	   *	    jne    @C0373
 00002028  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_RIGHT_DOUBLE],ecx
	   000000A0
			      C                     .ELSEIF (al == _BBE_CLICK_RIGHT_DOWN)
 0000202F  E9 00000100	   *	    jmp    @C0375
 00002034		   *@C0373:
 00002034  3C 09	   *	    cmp    al, _BBE_CLICK_RIGHT_DOWN
 00002036  75 0C	   *	    jne    @C0376
 00002038  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_RIGHT_DOWN],ecx
	   000000A4
			      C                     .ELSEIF (al == _BBE_CLICK_RIGHT_UP)
 0000203F  E9 000000F0	   *	    jmp    @C0378
 00002044		   *@C0376:
 00002044  3C 0A	   *	    cmp    al, _BBE_CLICK_RIGHT_UP
 00002046  75 0C	   *	    jne    @C0379
 00002048  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_CLICK_RIGHT_UP],ecx
	   000000A8
			      C                     .ELSEIF (al == _BBE_DROPPED_INTO_LEFT)
 0000204F  E9 000000E0	   *	    jmp    @C037B
 00002054		   *@C0379:
 00002054  3C 0B	   *	    cmp    al, _BBE_DROPPED_INTO_LEFT
 00002056  75 0C	   *	    jne    @C037C
 00002058  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DROPPED_INTO_LEFT],ecx
	   000000AC
			      C                     .ELSEIF (al == _BBE_DROPPED_INTO_RIGHT)
 0000205F  E9 000000D0	   *	    jmp    @C037E
 00002064		   *@C037C:
 00002064  3C 0C	   *	    cmp    al, _BBE_DROPPED_INTO_RIGHT
 00002066  75 0C	   *	    jne    @C037F
 00002068  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DROPPED_INTO_RIGHT],ecx
	   000000B0
			      C                     .ELSEIF (al == _BBE_DRAG_LEFT_START)
 0000206F  E9 000000C0	   *	    jmp    @C0381
 00002074		   *@C037F:
 00002074  3C 0D	   *	    cmp    al, _BBE_DRAG_LEFT_START
 00002076  75 0C	   *	    jne    @C0382
 00002078  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DRAG_LEFT_START],ecx
	   000000B4
			      C                     .ELSEIF (al == _BBE_DRAG_LEFT_STOP)
 0000207F  E9 000000B0	   *	    jmp    @C0384
 00002084		   *@C0382:
 00002084  3C 0E	   *	    cmp    al, _BBE_DRAG_LEFT_STOP
 00002086  75 0C	   *	    jne    @C0385
 00002088  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DRAG_LEFT_STOP],ecx
	   000000B8
			      C                     .ELSEIF (al == _BBE_DRAG_RIGHT_START)
 0000208F  E9 000000A0	   *	    jmp    @C0387
 00002094		   *@C0385:
 00002094  3C 0F	   *	    cmp    al, _BBE_DRAG_RIGHT_START
 00002096  75 0C	   *	    jne    @C0388
 00002098  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DRAG_RIGHT_START],ecx
	   000000BC
			      C                     .ELSEIF (al == _BBE_DRAG_RIGHT_STOP)
 0000209F  E9 00000090	   *	    jmp    @C038A
 000020A4		   *@C0388:
 000020A4  3C 10	   *	    cmp    al, _BBE_DRAG_RIGHT_STOP
 000020A6  75 0C	   *	    jne    @C038B
 000020A8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_DRAG_RIGHT_STOP],ecx
	   000000C0
			      C                     .ELSEIF (al == _BBE_FOCUS_GOT)
 000020AF  E9 00000080	   *	    jmp    @C038D
 000020B4		   *@C038B:
 000020B4  3C 11	   *	    cmp    al, _BBE_FOCUS_GOT
 000020B6  75 09	   *	    jne    @C038E
 000020B8  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_FOCUS_GOT],ecx
	   000000C4
			      C                     .ELSEIF (al == _BBE_FOCUS_LOST)
 000020BF  EB 73	   *	    jmp    @C0390
 000020C1		   *@C038E:
 000020C1  3C 12	   *	    cmp    al, _BBE_FOCUS_LOST
 000020C3  75 09	   *	    jne    @C0391
 000020C5  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_FOCUS_LOST],ecx
	   000000C8
			      C                     .ELSEIF (al == _BBE_FOCUS_SET)
 000020CC  EB 66	   *	    jmp    @C0393
 000020CE		   *@C0391:
 000020CE  3C 13	   *	    cmp    al, _BBE_FOCUS_SET
 000020D0  75 09	   *	    jne    @C0394
 000020D2  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_FOCUS_SET],ecx
	   000000CC
			      C                     .ELSEIF (al == _BBE_HOVER)
 000020D9  EB 59	   *	    jmp    @C0396
 000020DB		   *@C0394:
 000020DB  3C 14	   *	    cmp    al, _BBE_HOVER
 000020DD  75 09	   *	    jne    @C0397
 000020DF  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_HOVER],ecx
	   000000D0
			      C                     .ELSEIF (al == _BBE_KEYSTROKE)
 000020E6  EB 4C	   *	    jmp    @C0399
 000020E8		   *@C0397:
 000020E8  3C 15	   *	    cmp    al, _BBE_KEYSTROKE
 000020EA  75 09	   *	    jne    @C039A
 000020EC  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_KEYSTROKE],ecx
	   000000D4
			      C                     .ELSEIF (al == _BBE_WHEN_CREATED)
 000020F3  EB 3F	   *	    jmp    @C039C
 000020F5		   *@C039A:
 000020F5  3C 16	   *	    cmp    al, _BBE_WHEN_CREATED
 000020F7  75 09	   *	    jne    @C039D
 000020F9  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_WHEN_CREATED],ecx
	   000000D8
			      C                     .ELSEIF (al == _BBE_WHEN_DESTROYED)
 00002100  EB 32	   *	    jmp    @C039F
 00002102		   *@C039D:
 00002102  3C 17	   *	    cmp    al, _BBE_WHEN_DESTROYED
 00002104  75 09	   *	    jne    @C03A0
 00002106  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_WHEN_DESTROYED],ecx
	   000000DC
			      C                     .ELSEIF (al == _BBE_REQUESTOR)
 0000210D  EB 25	   *	    jmp    @C03A2
 0000210F		   *@C03A0:
 0000210F  3C 18	   *	    cmp    al, _BBE_REQUESTOR
 00002111  75 09	   *	    jne    @C03A3
 00002113  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_REQUESTOR],ecx
	   000000E0
			      C                     .ELSEIF (al == _BBE_REFRESH)
 0000211A  EB 18	   *	    jmp    @C03A5
 0000211C		   *@C03A3:
 0000211C  3C 19	   *	    cmp    al, _BBE_REFRESH
 0000211E  75 09	   *	    jne    @C03A6
 00002120  26: 89 8A	      C                         mov     dword ptr es:[edx+_O_BB_REFRESH],ecx
	   000000E4
			      C                     .ELSE
 00002127  EB 0B	   *	    jmp    @C03A8
 00002129		   *@C03A6:
			      C                       ; Unknown property, abort
 00002129  C7 44 24 1C	      C                         mov     dword ptr ss:[esp+28],_UNKNOWN_OBJECT_EVENT
	   00000004
 00002131  F9		      C                         stc
 00002132  EB 0C	      C                         jmp     quit
			      C                     .ENDIF
 00002134		   *@C03A8:
 00002134		   *@C03A5:
 00002134		   *@C03A2:
 00002134		   *@C039F:
 00002134		   *@C039C:
 00002134		   *@C0399:
 00002134		   *@C0396:
 00002134		   *@C0393:
 00002134		   *@C0390:
 00002134		   *@C038D:
 00002134		   *@C038A:
 00002134		   *@C0387:
 00002134		   *@C0384:
 00002134		   *@C0381:
 00002134		   *@C037E:
 00002134		   *@C037B:
 00002134		   *@C0378:
 00002134		   *@C0375:
 00002134		   *@C0372:
 00002134		   *@C036F:
 00002134		   *@C036C:
 00002134		   *@C0369:
 00002134		   *@C0366:
 00002134		   *@C0363:
 00002134		   *@C0360:
 00002134		   *@C035D:
 00002134  83 C6 05	      C                     add     esi,5
			      C                 .ENDIF
			      C             .ENDIF
 00002137		   *@C035A:
 00002137		   *@C0359:
 00002137		   *@C0356:
 00002137		   *@C0353:
 00002137		   *@C0350:
 00002137		   *@C034D:
 00002137		   *@C034A:
 00002137		   *@C0347:
 00002137		   *@C0344:
 00002137		   *@C0341:
 00002137		   *@C033E:
 00002137		   *@C033B:
 00002137		   *@C0338:
			      C         .ENDW
 00002137		   *@C0333:
 00002137		   *@C032E:
 00002137  80 3E FF	   *	    cmp    byte ptr ds : [esi], _OBJECT_END
 0000213A  0F 85 FFFFFD26  *	    jne    @C032F
			      C 
 00002140		      C       quit:
 00002140  61		      C         popad
 00002141  C3		      C         ret
 00002142		      C     invOBJECT_create_border_box     ENDP
			      C 
			      C     INCLUDE redraw.asp                                              ; Redraw algorithms for base objects and objects
			      C ; redraw.asp
			      C ;
			      C ; Exodus BIOS Object Handler - Object redraw algorithms
			      C ;
			      C ;
			      C 
			      C 
			      C 
			      C 
			      C 
 00002142		      C     iOBJECT_redraw_task         PROC
			      C     ; This routine is called when the entire task's objects need to be redrawn
			      C     ;
			      C     ; Upon entry:   gs:[edi] - far ptr to this task's structure
			      C     ;
			      C     ; Upon exit:    All objects for this task are re-drawn
			      C     ;
 00002142  60		      C         pushad
 00002143  1E		      C         push    ds
			      C 
 00002144  65: 8E 5F 06	      C         mov     ds,dword ptr gs:[edi+_TASK_ENTRY_SELECTOR_OBJECTS]
 00002148  67& 8B 36 0004     C         mov     esi,dword ptr ds:[_OBJECT_HEADER_FIRST_BASE_OBJECT]
			      C         .WHILE (esi != -1)
 0000214D  EB 21	   *	    jmp    @C03AA
 0000214F		   *@C03AB:
			      C           ; Display this base object
 0000214F  E8 00000024	      C             call    invOBJECT_redraw_base_object
			      C             .IF (!carry?)
 00002154  72 18	   *	    jb     @C03AC
			      C               ; Now, draw any objects on it
 00002156  56		      C                 push    esi
 00002157  57		      C                 push    edi
			      C 
 00002158  8B FE	      C                 mov     edi,esi
 0000215A  8B 76 08	      C                 mov     esi,dword ptr ds:[esi+_OBJECT_FIRST_OBJECT]
			      C                 .WHILE (esi != -1)
 0000215D  EB 08	   *	    jmp    @C03AE
 0000215F		   *@C03AF:
 0000215F  E8 000000B3	      C                     call    invOBJECT_redraw_object
 00002164  8B 76 08	      C                     mov     esi,dword ptr ds:[esi+_OBJECT_NEXT_OBJECT]
			      C                 .ENDW
 00002167		   *@C03AE:
 00002167  83 FE FF	   *	    cmp    esi, - 001h
 0000216A  75 F3	   *	    jne    @C03AF
			      C 
 0000216C  5F		      C                 pop     edi
 0000216D  5E		      C                 pop     esi
			      C             .ENDIF
			      C 
			      C           ; Move to the next base object
 0000216E		   *@C03AC:
 0000216E  8B 36	      C             mov     esi,dword ptr ds:[esi+_OBJECT_NEXT_BASE_OBJECT]
			      C         .ENDW
 00002170		   *@C03AA:
 00002170  83 FE FF	   *	    cmp    esi, - 001h
 00002173  75 DA	   *	    jne    @C03AB
			      C       ; Right now, all base objects and objects have been redrawn (everything's been brought to the front)
			      C 
			      C       ;; Now, redraw the base object and objects that currently have focus (to bring them to the very front
			      C 
 00002175  1F		      C         pop     ds
 00002176  61		      C         popad
 00002177  CB		      C         retf
 00002178		      C     iOBJECT_redraw_task         ENDP
			      C 
			      C 
			      C 
			      C 
 00002178		      C     invOBJECT_redraw_base_object        PROC
			      C     ; This routine is used to redraw a base object.  When it is called it is known that the entire object should be redrawn
			      C     ; completely overlaying whatever is underneath the area it will inhabit on the screen.
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The base object is redrawn (if it has visual components)
			      C     ;
 00002178  8A 46 04	      C         mov     al,byte ptr ds:[esi+_BASE_OBJECT_TYPE]
			      C         .IF (al == _DESKTOP)
 0000217B  3C 01	   *	    cmp    al, _DESKTOP
 0000217D  75 07	   *	    jne    @C03B2
			      C           ; It's a desktop item
 0000217F  E8 00000038	      C             call    invOBJECT_redraw_desktop
			      C         .ELSEIF (al == _WINDOW)
 00002184  EB 35	   *	    jmp    @C03B4
 00002186		   *@C03B2:
 00002186  3C 02	   *	    cmp    al, _WINDOW
 00002188  75 07	   *	    jne    @C03B5
			      C           ; It's a window item
 0000218A  E8 00000083	      C             call    invOBJECT_redraw_window
			      C         .ELSEIF (al == _CONSOLE)
 0000218F  EB 2A	   *	    jmp    @C03B7
 00002191		   *@C03B5:
 00002191  3C 03	   *	    cmp    al, _CONSOLE
 00002193  75 07	   *	    jne    @C03B8
			      C           ; It's a console item
 00002195  E8 00000079	      C             call    invOBJECT_redraw_console
			      C         .ELSEIF (al == _MONO_DESKTOP)
 0000219A  EB 1F	   *	    jmp    @C03BA
 0000219C		   *@C03B8:
 0000219C  3C 05	   *	    cmp    al, _MONO_DESKTOP
 0000219E  75 07	   *	    jne    @C03BB
			      C           ; It's a desktop item (on the mono monitor)
 000021A0  E8 0000006F	      C             call    invOBJECT_redraw_mono_desktop
			      C         .ELSEIF (al == _MONO_WINDOW)
 000021A5  EB 14	   *	    jmp    @C03BD
 000021A7		   *@C03BB:
 000021A7  3C 06	   *	    cmp    al, _MONO_WINDOW
 000021A9  75 07	   *	    jne    @C03BE
			      C           ; It's a window item (on the mono monitor)
 000021AB  E8 00000065	      C             call    invOBJECT_redraw_mono_window
			      C         .ELSEIF (al == _MONO_CONSOLE)
 000021B0  EB 09	   *	    jmp    @C03C0
 000021B2		   *@C03BE:
 000021B2  3C 07	   *	    cmp    al, _MONO_CONSOLE
 000021B4  75 05	   *	    jne    @C03C1
			      C           ; It's a console item (on the mono monitor)
 000021B6  E8 0000005B	      C             call    invOBJECT_redraw_mono_console
			      C         .ENDIF
 000021BB		   *@C03C1:
 000021BB		   *@C03C0:
 000021BB		   *@C03BD:
 000021BB		   *@C03BA:
 000021BB		   *@C03B7:
 000021BB		   *@C03B4:
 000021BB  C3		      C         ret
 000021BC		      C     invOBJECT_redraw_base_object        ENDP
			      C 
			      C 
			      C 
			      C 
 000021BC		      C     invOBJECT_redraw_desktop        PROC
			      C     ; This routine is called to redraw a desktop object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to desktop object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
			      C         .IF (dword ptr ds:[esi+_BO_D_VISIBLE] != 0)
 000021BC  83 7E 1D 00	   *	    cmp    dword ptr ds : [esi + _BO_D_VISIBLE], 000h
 000021C0  74 4E	   *	    je     @C03C3
			      C             .IF (dword ptr ds:[esi+_BO_D_WALLPAPER] == -1)
 000021C2  83 7E 26 FF	   *	    cmp    dword ptr ds : [esi + _BO_D_WALLPAPER], - 001h
 000021C6  75 26	   *	    jne    @C03C5
			      C               ; No wallpaper, just a color
 000021C8  9C		      C                 pushfd
 000021C9  FF 76 0C	      C                 push    dword ptr ds:[esi+_BO_D_TOP]
 000021CC  FF 76 10	      C                 push    dword ptr ds:[esi+_BO_D_LEFT]
 000021CF  FF 76 14	      C                 push    dword ptr ds:[esi+_BO_D_WIDTH]
 000021D2  FF 76 18	      C                 push    dword ptr ds:[esi+_BO_D_HEIGHT]
 000021D5  BB 0000001E	      C                 mov     ebx,_BO_D_BACKGROUND
 000021DA  2E: FF 1D	      C                 call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 000021E1  50		      C                 push    eax
 000021E2  FA		      C                 cli
 000021E3  2E: FF 1D	      C                 call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
 000021EA  9D		      C                 popfd
 000021EB  F8		      C                 clc
			      C             .ELSE
 000021EC  EB 23	   *	    jmp    @C03C7
 000021EE		   *@C03C5:
			      C               ; Wallpaper
 000021EE  CC		      C                 int  3
 000021EF  57 61 6C 6C 70     C                 db  'Wallpaper algorithm for desktop'
	   61 70 65 72 20
	   61 6C 67 6F 72
	   69 74 68 6D 20
	   66 6F 72 20 64
	   65 73 6B 74 6F
	   70
			      C             .ENDIF
			      C         .ELSE
 0000220E  EB 01	   *	    jmp    @C03C8
 00002210		   *@C03C3:
 00002210  F9		      C             stc
			      C         .ENDIF
 00002211		   *@C03C8:
 00002211		   *@C03C7:
 00002211  C3		      C         ret
 00002212		      C     invOBJECT_redraw_desktop        ENDP
			      C 
			      C 
			      C 
			      C 
 00002212		      C     invOBJECT_redraw_window     PROC
			      C     ; This routine is called to redraw a window object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to window object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002212  C3		      C         ret
 00002213		      C     invOBJECT_redraw_window     ENDP
			      C 
			      C 
			      C 
			      C 
 00002213		      C     invOBJECT_redraw_console    PROC
			      C     ; This routine is called to redraw a console object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to console object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002213  C3		      C         ret
 00002214		      C     invOBJECT_redraw_console    ENDP
			      C 
			      C 
			      C 
			      C 
 00002214		      C     invOBJECT_redraw_mono_desktop       PROC
			      C     ; This routine is called to redraw a mono desktop object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to mono desktop object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002214  C3		      C         ret
 00002215		      C     invOBJECT_redraw_mono_desktop       ENDP
			      C 
			      C 
			      C 
			      C 
 00002215		      C     invOBJECT_redraw_mono_window        PROC
			      C     ; This routine is called to redraw a mono window object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to mono window object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002215  C3		      C         ret
 00002216		      C     invOBJECT_redraw_mono_window        ENDP
			      C 
			      C 
			      C 
			      C 
 00002216		      C     invOBJECT_redraw_mono_console       PROC
			      C     ; This routine is called to redraw a mono console object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to mono console object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002216  C3		      C         ret
 00002217		      C     invOBJECT_redraw_mono_console       ENDP
			      C 
			      C 
			      C 
			      C 
 00002217		      C     invOBJECT_redraw_object     PROC
			      C     ; This routine is used
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to object
			      C     ;
			      C     ; Upon exit:    The object is redrawn (if it has visual components)
			      C     ;
 00002217  8A 46 04	      C         mov     al,byte ptr ds:[esi+_OBJECT_TYPE]
			      C         .IF (al == _INPUT_FIELD)
 0000221A  0A C0	   *	    or	al, al
 0000221C  75 0A	   *	    jne    @C03C9
			      C           ; It's a input field
 0000221E  E8 0000013E	      C             call    invOBJECT_redraw_input_field
			      C         .ELSEIF (al == _TEXT_FIELD)
 00002223  E9 00000138	   *	    jmp    @C03CB
 00002228		   *@C03C9:
 00002228  3C 01	   *	    cmp    al, _TEXT_FIELD
 0000222A  75 0A	   *	    jne    @C03CC
			      C           ; It's a text field
 0000222C  E8 00000131	      C             call    invOBJECT_redraw_text_field
			      C         .ELSEIF (al == _BUTTON)
 00002231  E9 0000012A	   *	    jmp    @C03CE
 00002236		   *@C03CC:
 00002236  3C 02	   *	    cmp    al, _BUTTON
 00002238  75 0A	   *	    jne    @C03CF
			      C           ; It's a button
 0000223A  E8 000001D9	      C             call    invOBJECT_redraw_button
			      C         .ELSEIF (al == _MENU_BAR)
 0000223F  E9 0000011C	   *	    jmp    @C03D1
 00002244		   *@C03CF:
 00002244  3C 03	   *	    cmp    al, _MENU_BAR
 00002246  75 0A	   *	    jne    @C03D2
			      C           ; It's a menu bar
 00002248  E8 000001CC	      C             call    invOBJECT_redraw_menu_bar
			      C         .ELSEIF (al == _MENU_POPUP)
 0000224D  E9 0000010E	   *	    jmp    @C03D4
 00002252		   *@C03D2:
 00002252  3C 04	   *	    cmp    al, _MENU_POPUP
 00002254  75 0A	   *	    jne    @C03D5
			      C           ; It's a menu popup
 00002256  E8 000001BF	      C             call    invOBJECT_redraw_popup
			      C         .ELSEIF (al == _RADIO_DIAL)
 0000225B  E9 00000100	   *	    jmp    @C03D7
 00002260		   *@C03D5:
 00002260  3C 05	   *	    cmp    al, _RADIO_DIAL
 00002262  75 0A	   *	    jne    @C03D8
			      C           ; It's a radio dail
 00002264  E8 000001B2	      C             call    invOBJECT_redraw_radio_dial
			      C         .ELSEIF (al == _CHECK_BOX)
 00002269  E9 000000F2	   *	    jmp    @C03DA
 0000226E		   *@C03D8:
 0000226E  3C 06	   *	    cmp    al, _CHECK_BOX
 00002270  75 0A	   *	    jne    @C03DB
			      C           ; It's a check box
 00002272  E8 000001A5	      C             call    invOBJECT_redraw_check_box
			      C         .ELSEIF (al == _CIRCLE_BOX)
 00002277  E9 000000E4	   *	    jmp    @C03DD
 0000227C		   *@C03DB:
 0000227C  3C 07	   *	    cmp    al, _CIRCLE_BOX
 0000227E  75 0A	   *	    jne    @C03DE
			      C           ; It's a circle box
 00002280  E8 00000198	      C             call    invOBJECT_redraw_circle_box
			      C         .ELSEIF (al == _PULLDOWN)
 00002285  E9 000000D6	   *	    jmp    @C03E0
 0000228A		   *@C03DE:
 0000228A  3C 08	   *	    cmp    al, _PULLDOWN
 0000228C  75 0A	   *	    jne    @C03E1
			      C           ; It's a pulldown
 0000228E  E8 0000018B	      C             call    invOBJECT_redraw_pulldown
			      C         .ELSEIF (al == _SLIDE_BAR)
 00002293  E9 000000C8	   *	    jmp    @C03E3
 00002298		   *@C03E1:
 00002298  3C 09	   *	    cmp    al, _SLIDE_BAR
 0000229A  75 0A	   *	    jne    @C03E4
			      C           ; It's a slide bar
 0000229C  E8 0000017E	      C             call    invOBJECT_redraw_slide_bar
			      C         .ELSEIF (al == _PERCENT_BAR)
 000022A1  E9 000000BA	   *	    jmp    @C03E6
 000022A6		   *@C03E4:
 000022A6  3C 0A	   *	    cmp    al, _PERCENT_BAR
 000022A8  75 0A	   *	    jne    @C03E7
			      C           ; It's a percent bar
 000022AA  E8 00000171	      C             call    invOBJECT_redraw_percent_bar
			      C         .ELSEIF (al == _TRAY)
 000022AF  E9 000000AC	   *	    jmp    @C03E9
 000022B4		   *@C03E7:
 000022B4  3C 0B	   *	    cmp    al, _TRAY
 000022B6  75 0A	   *	    jne    @C03EA
			      C           ; It's a tray
 000022B8  E8 00000164	      C             call    invOBJECT_redraw_tray
			      C         .ELSEIF (al == _ICON)
 000022BD  E9 0000009E	   *	    jmp    @C03EC
 000022C2		   *@C03EA:
 000022C2  3C 0C	   *	    cmp    al, _ICON
 000022C4  75 0A	   *	    jne    @C03ED
			      C           ; It's an icon
 000022C6  E8 00000157	      C             call    invOBJECT_redraw_icon
			      C         .ELSEIF (al == _BITMAP)
 000022CB  E9 00000090	   *	    jmp    @C03EF
 000022D0		   *@C03ED:
 000022D0  3C 0D	   *	    cmp    al, _BITMAP
 000022D2  75 0A	   *	    jne    @C03F0
			      C           ; It's a bitmap
 000022D4  E8 0000014A	      C             call    invOBJECT_redraw_bitmap
			      C         .ELSEIF (al == _HLINE)
 000022D9  E9 00000082	   *	    jmp    @C03F2
 000022DE		   *@C03F0:
 000022DE  3C 0E	   *	    cmp    al, _HLINE
 000022E0  75 07	   *	    jne    @C03F3
			      C           ; It's a horizontal line
 000022E2  E8 0000013D	      C             call    invOBJECT_redraw_horizontal_line
			      C         .ELSEIF (al == _VLINE)
 000022E7  EB 77	   *	    jmp    @C03F5
 000022E9		   *@C03F3:
 000022E9  3C 0F	   *	    cmp    al, _VLINE
 000022EB  75 07	   *	    jne    @C03F6
			      C           ; It's a vertical line
 000022ED  E8 00000167	      C             call    invOBJECT_redraw_vertical_line
			      C         .ELSEIF (al == _LINE)
 000022F2  EB 6C	   *	    jmp    @C03F8
 000022F4		   *@C03F6:
 000022F4  3C 10	   *	    cmp    al, _LINE
 000022F6  75 07	   *	    jne    @C03F9
			      C           ; It's a diagonal line
 000022F8  E8 0000015D	      C             call    invOBJECT_redraw_line
			      C         .ELSEIF (al == _OVAL)
 000022FD  EB 61	   *	    jmp    @C03FB
 000022FF		   *@C03F9:
 000022FF  3C 11	   *	    cmp    al, _OVAL
 00002301  75 07	   *	    jne    @C03FC
			      C           ; It's a oval
 00002303  E8 00000153	      C             call    invOBJECT_redraw_oval
			      C         .ELSEIF (al == _RECTANGLE)
 00002308  EB 56	   *	    jmp    @C03FE
 0000230A		   *@C03FC:
 0000230A  3C 12	   *	    cmp    al, _RECTANGLE
 0000230C  75 07	   *	    jne    @C03FF
			      C           ; It's a rectangle
 0000230E  E8 00000149	      C             call    invOBJECT_redraw_rectangle
			      C         .ELSEIF (al == _SCROLL_BAR_HORIZONTAL)
 00002313  EB 4B	   *	    jmp    @C0401
 00002315		   *@C03FF:
 00002315  3C 13	   *	    cmp    al, _SCROLL_BAR_HORIZONTAL
 00002317  75 07	   *	    jne    @C0402
			      C           ; It's a horizontal scroll bar
 00002319  E8 00000174	      C             call    invOBJECT_redraw_horizontal_scroll_bar
			      C         .ELSEIF (al == _SCROLL_BAR_VERTICAL)
 0000231E  EB 40	   *	    jmp    @C0404
 00002320		   *@C0402:
 00002320  3C 14	   *	    cmp    al, _SCROLL_BAR_VERTICAL
 00002322  75 07	   *	    jne    @C0405
			      C           ; It's a vertical scroll bar
 00002324  E8 0000016A	      C             call    invOBJECT_redraw_vertical_scroll_bar
			      C         .ELSEIF (al == _CASK)
 00002329  EB 35	   *	    jmp    @C0407
 0000232B		   *@C0405:
 0000232B  3C 15	   *	    cmp    al, _CASK
 0000232D  75 07	   *	    jne    @C0408
			      C           ; It's a cask
 0000232F  E8 00000160	      C             call    invOBJECT_redraw_cask
			      C         .ELSEIF (al == _CFSCA_WINDOW)
 00002334  EB 2A	   *	    jmp    @C040A
 00002336		   *@C0408:
 00002336  3C 16	   *	    cmp    al, _CFSCA_WINDOW
 00002338  75 07	   *	    jne    @C040B
			      C           ; It's a cfsca window
 0000233A  E8 00000156	      C             call    invOBJECT_redraw_cfsca_window
			      C         .ELSEIF (al == _NUMBERS_WINDOW)
 0000233F  EB 1F	   *	    jmp    @C040D
 00002341		   *@C040B:
 00002341  3C 17	   *	    cmp    al, _NUMBERS_WINDOW
 00002343  75 07	   *	    jne    @C040E
			      C           ; It's a numbers window
 00002345  E8 0000014C	      C             call    invOBJECT_redraw_numbers_window
			      C         .ELSEIF (al == _TYPESET_WINDOW)
 0000234A  EB 14	   *	    jmp    @C0410
 0000234C		   *@C040E:
 0000234C  3C 18	   *	    cmp    al, _TYPESET_WINDOW
 0000234E  75 07	   *	    jne    @C0411
			      C           ; It's a typeset window
 00002350  E8 00000142	      C             call    invOBJECT_redraw_typeset_window
			      C         .ELSEIF (al == _BORDER_BOX)
 00002355  EB 09	   *	    jmp    @C0413
 00002357		   *@C0411:
 00002357  3C 19	   *	    cmp    al, _BORDER_BOX
 00002359  75 05	   *	    jne    @C0414
			      C           ; It's a border box
 0000235B  E8 00000138	      C             call    invOBJECT_redraw_border_box
			      C         .ENDIF
 00002360		   *@C0414:
 00002360		   *@C0413:
 00002360		   *@C0410:
 00002360		   *@C040D:
 00002360		   *@C040A:
 00002360		   *@C0407:
 00002360		   *@C0404:
 00002360		   *@C0401:
 00002360		   *@C03FE:
 00002360		   *@C03FB:
 00002360		   *@C03F8:
 00002360		   *@C03F5:
 00002360		   *@C03F2:
 00002360		   *@C03EF:
 00002360		   *@C03EC:
 00002360		   *@C03E9:
 00002360		   *@C03E6:
 00002360		   *@C03E3:
 00002360		   *@C03E0:
 00002360		   *@C03DD:
 00002360		   *@C03DA:
 00002360		   *@C03D7:
 00002360		   *@C03D4:
 00002360		   *@C03D1:
 00002360		   *@C03CE:
 00002360		   *@C03CB:
 00002360  C3		      C         ret
 00002361		      C     invOBJECT_redraw_object     ENDP
			      C 
			      C 
			      C 
			      C 
 00002361		      C     invOBJECT_redraw_input_field        PROC
			      C     ; This routine is called to redraw an input field object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to input field object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002361  C3		      C         ret
 00002362		      C     invOBJECT_redraw_input_field        ENDP
			      C 
			      C 
			      C 
			      C 
 00002362		      C     invOBJECT_redraw_text_field     PROC
			      C     ; This routine is called to redraw a text field object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to text field object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
			      C         .IF (byte ptr ds:[esi+_O_TF_VISIBLE] != 0)
 00002362  80 7E 3B 00	   *	    cmp    byte ptr ds : [esi + _O_TF_VISIBLE], 000h
 00002366  0F 84 000000AA  *	    je     @C0416
			      C           ; Draw the rectangle around the text
 0000236C  9C		      C             pushfd
 0000236D  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_TF_TOP]
 00002370  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 00002373  53		      C             push    ebx
 00002374  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_TF_LEFT]
 00002377  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 0000237A  53		      C             push    ebx
 0000237B  FF 76 14	      C             push    dword ptr ds:[esi+_O_TF_WIDTH]
 0000237E  FF 76 18	      C             push    dword ptr ds:[esi+_O_TF_HEIGHT]
			      C             .IF (byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_REVERSE] != 0)
 00002381  80 7E 38 00	   *	    cmp    byte ptr ds : [esi + _O_TF_FONT_TYPEFACE_REVERSE], 000h
 00002385  74 07	   *	    je     @C0418
 00002387  BB 00000022	      C                 mov     ebx,_O_TF_FOREGROUND
			      C             .ELSE
 0000238C  EB 05	   *	    jmp    @C041A
 0000238E		   *@C0418:
 0000238E  BB 0000001F	      C                 mov     ebx,_O_TF_BACKGROUND
			      C             .ENDIF
 00002393		   *@C041A:
 00002393  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 0000239A  50		      C             push    eax
 0000239B  FA		      C             cli
 0000239C  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
 000023A3  9D		      C             popfd
			      C 
			      C           ; Draw the text
 000023A4  9C		      C             pushfd
 000023A5  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_TF_TOP]
 000023A8  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 000023AB  53		      C             push    ebx
 000023AC  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_TF_LEFT]
 000023AF  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 000023B2  53		      C             push    ebx
 000023B3  FF 76 14	      C             push    dword ptr ds:[esi+_O_TF_WIDTH]
 000023B6  FF 76 18	      C             push    dword ptr ds:[esi+_O_TF_HEIGHT]
			      C 
 000023B9  BB 0000001F	      C             mov     ebx,_O_TF_BACKGROUND
 000023BE  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 000023C5  50		      C             push    eax
			      C 
 000023C6  BB 00000022	      C             mov     ebx,_O_TF_FOREGROUND
 000023CB  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 000023D2  50		      C             push    eax
			      C 
 000023D3  0F B7 5E 40	      C             movzx   ebx,word ptr ds:[esi+_O_TF_MARGIN_LEFT]
 000023D7  53		      C             push    ebx
			      C 
 000023D8  0F B7 5E 42	      C             movzx   ebx,word ptr ds:[esi+_O_TF_MARGIN_TOP]
 000023DC  53		      C             push    ebx
			      C 
 000023DD  FF 76 3C	      C             push    dword ptr ds:[esi+_O_TF_FONT_NAME_ID]
 000023E0  FF 76 28	      C             push    dword ptr ds:[esi+_O_TF_SOURCE_PTR_SEGMENT]
 000023E3  FF 76 2C	      C             push    dword ptr ds:[esi+_O_TF_SOURCE_PTR_OFFSET]
			      C 
 000023E6  33 C0	      C             xor     eax,eax
 000023E8  8A 46 35	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_BOLD]
 000023EB  C1 E0 08	      C             shl     eax,8
 000023EE  8A 46 36	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_DITHER]
 000023F1  50		      C             push    eax
			      C 
 000023F2  33 C0	      C             xor     eax,eax
 000023F4  8A 46 37	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_ITALICS]
 000023F7  C1 E0 08	      C             shl     eax,8
 000023FA  8A 46 38	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_REVERSE]
 000023FD  C1 E0 08	      C             shl     eax,8
 00002400  8A 46 39	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_STRIKETHROUGH]
 00002403  C1 E0 08	      C             shl     eax,8
 00002406  8A 46 3A	      C             mov     al,byte ptr ds:[esi+_O_TF_FONT_TYPEFACE_UNDERLINE]
 00002409  50		      C             push    eax
 0000240A  FA		      C             cli
 0000240B  2E: FF 1D	      C             call    fword ptr cs:_VID_g_draw_text
	   000025DC R
 00002412  9D		      C             popfd
 00002413  F8		      C             clc
			      C         .ELSE
 00002414  EB 01	   *	    jmp    @C041B
 00002416		   *@C0416:
 00002416  F9		      C             stc
			      C         .ENDIF
 00002417		   *@C041B:
 00002417  C3		      C         ret
 00002418		      C     invOBJECT_redraw_text_field     ENDP
			      C 
			      C 
			      C 
			      C 
 00002418		      C     invOBJECT_redraw_button     PROC
			      C     ; This routine is called to redraw a button object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to button object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002418  C3		      C         ret
 00002419		      C     invOBJECT_redraw_button     ENDP
			      C 
			      C 
			      C 
			      C 
 00002419		      C     invOBJECT_redraw_menu_bar       PROC
			      C     ; This routine is called to redraw a menu bar object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to menu bar object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002419  C3		      C         ret
 0000241A		      C     invOBJECT_redraw_menu_bar       ENDP
			      C 
			      C 
			      C 
			      C 
 0000241A		      C     invOBJECT_redraw_popup      PROC
			      C     ; This routine is called to redraw a popup object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to popup object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241A  C3		      C         ret
 0000241B		      C     invOBJECT_redraw_popup      ENDP
			      C 
			      C 
			      C 
			      C 
 0000241B		      C     invOBJECT_redraw_radio_dial     PROC
			      C     ; This routine is called to redraw a radio dial object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to radio dial object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241B  C3		      C         ret
 0000241C		      C     invOBJECT_redraw_radio_dial     ENDP
			      C 
			      C 
			      C 
			      C 
 0000241C		      C     invOBJECT_redraw_check_box      PROC
			      C     ; This routine is called to redraw a check box object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to check box object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241C  C3		      C         ret
 0000241D		      C     invOBJECT_redraw_check_box      ENDP
			      C 
			      C 
			      C 
			      C 
 0000241D		      C     invOBJECT_redraw_circle_box     PROC
			      C     ; This routine is called to redraw a circle box object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to circle box object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241D  C3		      C         ret
 0000241E		      C     invOBJECT_redraw_circle_box     ENDP
			      C 
			      C 
			      C 
			      C 
 0000241E		      C     invOBJECT_redraw_pulldown       PROC
			      C     ; This routine is called to redraw a pulldown object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to pulldown object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241E  C3		      C         ret
 0000241F		      C     invOBJECT_redraw_pulldown       ENDP
			      C 
			      C 
			      C 
			      C 
 0000241F		      C     invOBJECT_redraw_slide_bar      PROC
			      C     ; This routine is called to redraw a slide bar object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to slide bar object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000241F  C3		      C         ret
 00002420		      C     invOBJECT_redraw_slide_bar      ENDP
			      C 
			      C 
			      C 
			      C 
 00002420		      C     invOBJECT_redraw_percent_bar        PROC
			      C     ; This routine is called to redraw a percent bar object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to percent bar object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002420  C3		      C         ret
 00002421		      C     invOBJECT_redraw_percent_bar        ENDP
			      C 
			      C 
			      C 
			      C 
 00002421		      C     invOBJECT_redraw_tray       PROC
			      C     ; This routine is called to redraw a tray object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to tray object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002421  C3		      C         ret
 00002422		      C     invOBJECT_redraw_tray       ENDP
			      C 
			      C 
			      C 
			      C 
 00002422		      C     invOBJECT_redraw_icon       PROC
			      C     ; This routine is called to redraw a icon object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to icon object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002422  C3		      C         ret
 00002423		      C     invOBJECT_redraw_icon       ENDP
			      C 
			      C 
			      C 
			      C 
 00002423		      C     invOBJECT_redraw_bitmap     PROC
			      C     ; This routine is called to redraw a bitmap object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to bitmap object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002423  C3		      C         ret
 00002424		      C     invOBJECT_redraw_bitmap     ENDP
			      C 
			      C 
			      C 
			      C 
 00002424		      C     invOBJECT_redraw_horizontal_line        PROC
			      C     ; This routine is called to redraw a horizontal line object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to horizontal line object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
			      C         .IF (byte ptr ds:[esi+_O_HL_VISIBLE] != 0)
 00002424  80 7E 2F 00	   *	    cmp    byte ptr ds : [esi + _O_HL_VISIBLE], 000h
 00002428  74 2D	   *	    je     @C041C
 0000242A  9C		      C             pushfd
 0000242B  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_HL_TOP]
 0000242E  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 00002431  53		      C             push    ebx
 00002432  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_HL_LEFT]
 00002435  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 00002438  53		      C             push    ebx
 00002439  FF 76 14	      C             push    dword ptr ds:[esi+_O_HL_WIDTH]
 0000243C  6A 01	      C             push    1
 0000243E  BB 00000018	      C             mov     ebx,_O_HL_BACKGROUND
 00002443  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 0000244A  50		      C             push    eax
 0000244B  FA		      C             cli
 0000244C  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
 00002453  9D		      C             popfd
 00002454  F8		      C             clc
			      C         .ELSE
 00002455  EB 01	   *	    jmp    @C041E
 00002457		   *@C041C:
 00002457  F9		      C             stc
			      C         .ENDIF
 00002458		   *@C041E:
 00002458  C3		      C         ret
 00002459		      C     invOBJECT_redraw_horizontal_line        ENDP
			      C 
			      C 
			      C 
			      C 
 00002459		      C     invOBJECT_redraw_vertical_line      PROC
			      C     ; This routine is called to redraw a vertical line object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to vertical line object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002459  C3		      C         ret
 0000245A		      C     invOBJECT_redraw_vertical_line      ENDP
			      C 
			      C 
			      C 
			      C 
 0000245A		      C     invOBJECT_redraw_line       PROC
			      C     ; This routine is called to redraw a line object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to line object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000245A  C3		      C         ret
 0000245B		      C     invOBJECT_redraw_line       ENDP
			      C 
			      C 
			      C 
			      C 
 0000245B		      C     invOBJECT_redraw_oval       PROC
			      C     ; This routine is called to redraw a oval object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to oval object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 0000245B  C3		      C         ret
 0000245C		      C     invOBJECT_redraw_oval       ENDP
			      C 
			      C 
			      C 
			      C 
 0000245C		      C     invOBJECT_redraw_rectangle      PROC
			      C     ; This routine is called to redraw a rectangle object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to rectangle object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
			      C         .IF (byte ptr ds:[esi+_O_R_VISIBLE] != 0)
 0000245C  80 7E 33 00	   *	    cmp    byte ptr ds : [esi + _O_R_VISIBLE], 000h
 00002460  74 2E	   *	    je     @C041F
 00002462  9C		      C             pushfd
 00002463  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_R_TOP]
 00002466  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 00002469  53		      C             push    ebx
 0000246A  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_R_LEFT]
 0000246D  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 00002470  53		      C             push    ebx
 00002471  FF 76 14	      C             push    dword ptr ds:[esi+_O_R_WIDTH]
 00002474  FF 76 18	      C             push    dword ptr ds:[esi+_O_R_HEIGHT]
 00002477  BB 0000001C	      C             mov     ebx,_O_R_BACKGROUND
 0000247C  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 00002483  50		      C             push    eax
 00002484  FA		      C             cli
 00002485  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
 0000248C  9D		      C             popfd
 0000248D  F8		      C             clc
			      C         .ELSE
 0000248E  EB 01	   *	    jmp    @C0421
 00002490		   *@C041F:
 00002490  F9		      C             stc
			      C         .ENDIF
 00002491		   *@C0421:
 00002491  C3		      C         ret
 00002492		      C     invOBJECT_redraw_rectangle      ENDP
			      C 
			      C 
			      C 
			      C 
 00002492		      C     invOBJECT_redraw_horizontal_scroll_bar      PROC
			      C     ; This routine is called to redraw a horizontal scroll bar object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to horizontal scroll bar object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002492  C3		      C         ret
 00002493		      C     invOBJECT_redraw_horizontal_scroll_bar      ENDP
			      C 
			      C 
			      C 
			      C 
 00002493		      C     invOBJECT_redraw_vertical_scroll_bar        PROC
			      C     ; This routine is called to redraw a vertical scroll bar object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to vertical scroll bar object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002493  C3		      C         ret
 00002494		      C     invOBJECT_redraw_vertical_scroll_bar        ENDP
			      C 
			      C 
			      C 
			      C 
 00002494		      C     invOBJECT_redraw_cask       PROC
			      C     ; This routine is called to redraw a cask object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to cask object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002494  C3		      C         ret
 00002495		      C     invOBJECT_redraw_cask       ENDP
			      C 
			      C 
			      C 
			      C 
 00002495		      C     invOBJECT_redraw_cfsca_window       PROC
			      C     ; This routine is called to redraw a cfsca window object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to cfsca window object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002495  C3		      C         ret
 00002496		      C     invOBJECT_redraw_cfsca_window       ENDP
			      C 
			      C 
			      C 
			      C 
 00002496		      C     invOBJECT_redraw_numbers_window     PROC
			      C     ; This routine is called to redraw a numbers window object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to numbers window object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002496  C3		      C         ret
 00002497		      C     invOBJECT_redraw_numbers_window     ENDP
			      C 
			      C 
			      C 
			      C 
 00002497		      C     invOBJECT_redraw_typeset_window     PROC
			      C     ; This routine is called to redraw a typeset window object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to typeset window object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
 00002497  C3		      C         ret
 00002498		      C     invOBJECT_redraw_typeset_window     ENDP
			      C 
			      C 
			      C 
			      C 
 00002498		      C     invOBJECT_redraw_border_box     PROC
			      C     ; This routine is called to redraw a border box object
			      C     ;
			      C     ; Upon entry:   ds:[esi] - far ptr to border box object
			      C     ;               ds:[edi] - far ptr to base object
			      C     ;
			      C     ; Upon exit:    The object is redrawn
			      C     ;               carry? - Object is not currently visible
			      C     ;
			      C         .IF (byte ptr ds:[esi+_O_BB_VISIBLE] != 0)
 00002498  80 7E 27 00	   *	    cmp    byte ptr ds : [esi + _O_BB_VISIBLE], 000h
 0000249C  0F 84 000000D7  *	    je     @C0422
			      C           ;; Draw the rectangle
 000024A2  9C		      C             pushfd
 000024A3  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_BB_TOP]
 000024A6  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 000024A9  53		      C             push    ebx
 000024AA  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_BB_LEFT]
 000024AD  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 000024B0  53		      C             push    ebx
 000024B1  FF 76 14	      C             push    dword ptr ds:[esi+_O_BB_WIDTH]
 000024B4  FF 76 18	      C             push    dword ptr ds:[esi+_O_BB_HEIGHT]
 000024B7  BB 0000001C	      C             mov     ebx,_O_BB_BACKGROUND
 000024BC  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 000024C3  50		      C             push    eax
 000024C4  FA		      C             cli
 000024C5  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
			      C 
			      C           ;; Draw the bottom
 000024CC  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_BB_TOP]
 000024CF  03 5E 18	      C             add     ebx,dword ptr ds:[esi+_O_BB_HEIGHT]
 000024D2  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 000024D5  53		      C             push    ebx
 000024D6  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_BB_LEFT]
 000024D9  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 000024DC  53		      C             push    ebx
 000024DD  FF 76 14	      C             push    dword ptr ds:[esi+_O_BB_WIDTH]
 000024E0  6A 01	      C             push    1
 000024E2  BB 00000022	      C             mov     ebx,_O_BB_SHADOW_BORDER
 000024E7  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 000024EE  50		      C             push    eax
 000024EF  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
			      C 
			      C           ;; Draw the right-side
 000024F6  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_BB_TOP]
 000024F9  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 000024FC  53		      C             push    ebx
 000024FD  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_BB_LEFT]
 00002500  03 5E 14	      C             add     ebx,dword ptr ds:[esi+_O_BB_WIDTH]
 00002503  4B		      C             dec     ebx
 00002504  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 00002507  53		      C             push    ebx
 00002508  6A 01	      C             push    1
 0000250A  FF 76 18	      C             push    dword ptr ds:[esi+_O_BB_HEIGHT]
 0000250D  FF 04 24	      C             inc     dword ptr ss:[esp+00]
 00002510  BB 00000022	      C             mov     ebx,_O_BB_SHADOW_BORDER
 00002515  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 0000251C  50		      C             push    eax
 0000251D  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
			      C 
			      C           ;; Draw the top
 00002524  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_BB_TOP]
 00002527  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 0000252A  53		      C             push    ebx
 0000252B  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_BB_LEFT]
 0000252E  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 00002531  53		      C             push    ebx
 00002532  FF 76 14	      C             push    dword ptr ds:[esi+_O_BB_WIDTH]
 00002535  6A 01	      C             push    1
 00002537  BB 0000001F	      C             mov     ebx,_O_BB_LIGHT_BORDER
 0000253C  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 00002543  50		      C             push    eax
 00002544  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
			      C 
			      C           ;; Draw the left-side
 0000254B  8B 5E 0C	      C             mov     ebx,dword ptr ds:[esi+_O_BB_TOP]
 0000254E  03 5F 0C	      C             add     ebx,dword ptr ds:[edi+_BO_TOP]
 00002551  53		      C             push    ebx
 00002552  8B 5E 10	      C             mov     ebx,dword ptr ds:[esi+_O_BB_LEFT]
 00002555  03 5F 10	      C             add     ebx,dword ptr ds:[edi+_BO_LEFT]
 00002558  53		      C             push    ebx
 00002559  6A 01	      C             push    1
 0000255B  FF 76 18	      C             push    dword ptr ds:[esi+_O_BB_HEIGHT]
 0000255E  FF 04 24	      C             inc     dword ptr ss:[esp+00]
 00002561  BB 0000001F	      C             mov     ebx,_O_BB_LIGHT_BORDER
 00002566  2E: FF 1D	      C             call    fword ptr cs:_VID_g_derive_color
	   000025D8 R
 0000256D  50		      C             push    eax
 0000256E  2E: FF 1D	      C             call    fword ptr cs:_VID_g_fill_rectangle
	   000025DA R
 00002575  9D		      C             popfd
 00002576  F8		      C             clc
			      C         .ELSE
 00002577  EB 01	   *	    jmp    @C0424
 00002579		   *@C0422:
 00002579  F9		      C             stc
			      C         .ENDIF
 0000257A		   *@C0424:
 0000257A  C3		      C         ret
 0000257B		      C     invOBJECT_redraw_border_box     ENDP
			      C 
			      C 





				; DATA
 0000257B 4D 6F 74 68 65	    driver_name                             db  "Motherboard BIOS Driver",0
	   72 62 6F 61 72
	   64 20 42 49 4F
	   53 20 44 72 69
	   76 65 72 00
 00002593 31 30 2E 31 30	    version                                 db  "10.10.2010",0
	   2E 32 30 31 30
	   00
 0000259E 28 63 29 20 43	    copyright                               db  "(c) Copyright Beatleworks, Inc.",0
	   6F 70 79 72 69
	   67 68 74 20 42
	   65 61 74 6C 65
	   77 6F 72 6B 73
	   2C 20 49 6E 63
	   2E 00
 000025BE 52 69 63 6B 20	    author                                  db  "Rick C. Hodgin",0
	   43 2E 20 48 6F
	   64 67 69 6E 00
 000025CD 01			    bootup                                  db  1                   ; Indicates bootup status, changes to 0 after initialization
 000025CE 0000			    data_segment                            dw  0

				; CALL GATES
 000025D0 0000			    _EXODUS_requestor                       dw  0
 000025D2			  primative_call_gates:
 000025D2 0000			    _VID_draw_logo                          dw  0
 000025D4 00B0			    _VID_display_string_nr_vga              dw  _sEXODUS_REQUESTOR
 000025D6 F000			    _iDEBI_timer_interface                  dw  0f000h
 000025D8 F000			    _VID_g_derive_color                     dw  0f000h
 000025DA F000			    _VID_g_fill_rectangle                   dw  0f000h
 000025DC F000			    _VID_g_draw_text                        dw  0f000h
 000025DE F000			    _VID_g_display_radix_in_edx_mono        dw  0f000h
 000025E0 F000			    _VID_g_mouse_pointer                    dw  0f000h
 000025E2  F000			                                            dw  0f000h
 000025E4  F000			                                            dw  0f000h

				; DATA only used at load time (released thereafter)
 000025E6 0D 56 49 44 5F	    required_primatives                     db  13, "VID_draw_logo"
	   64 72 61 77 5F
	   6C 6F 67 6F
 000025F4  19 56 49 44 5F	                                            db  25, "VID_display_string_nr_vga"
	   64 69 73 70 6C
	   61 79 5F 73 74
	   72 69 6E 67 5F
	   6E 72 5F 76 67
	   61
 0000260E  15 69 44 45 42	                                            db  21, "iDEBI_timer_interface"
	   49 5F 74 69 6D
	   65 72 5F 69 6E
	   74 65 72 66 61
	   63 65
 00002624  12 56 49 44 5F	                                            db  18, "VID_g_derive_color"
	   67 5F 64 65 72
	   69 76 65 5F 63
	   6F 6C 6F 72
 00002637  14 56 49 44 5F	                                            db  20, "VID_g_fill_rectangle"
	   67 5F 66 69 6C
	   6C 5F 72 65 63
	   74 61 6E 67 6C
	   65
 0000264C  0F 56 49 44 5F	                                            db  15, "VID_g_draw_text"
	   67 5F 64 72 61
	   77 5F 74 65 78
	   74
 0000265C  1F 56 49 44 5F	                                            db  31, "VID_g_display_radix_in_edx_mono"
	   67 5F 64 69 73
	   70 6C 61 79 5F
	   72 61 64 69 78
	   5F 69 6E 5F 65
	   64 78 5F 6D 6F
	   6E 6F
 0000267C  13 56 49 44 5F	                                            db  19, "VID_g_mouse_pointer"
	   67 5F 6D 6F 75
	   73 65 5F 70 6F
	   69 6E 74 65 72
 00002690  FF			                                            db  0ffh

 00002691 01			    bios_logo                               db  1       ; how many extra 18x16 pictures wide?
 00002692  00 00 00 00 00	                                            db  00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00
 000026B8  07 07 00 00 00	                                            db  07h,07h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00
 000026DE  00 07 00 00 00	                                            db  00h,07h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00 00 00
	   00 00 00
 00002704  00 07 07 02 02	                                            db  00h,07h,07h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,00h
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 00
 0000272A  00 07 07 02 02	                                            db  00h,07h,07h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,0ah,0ah,0ah,0ah,0ah,0ah,0ah,0ah,0ah,0ah,02h,02h,02h,02h,07h,07h,07h,07h,02h,00h
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 0A 0A
	   0A 0A 0A 0A 0A
	   0A 0A 0A 02 02
	   02 02 07 07 07
	   07 02 00
 00002750  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,07h,07h,07h,07h,07h,07h,02h,02h,07h,07h,07h,07h,07h,07h,07h,07h,02h,02h,02h,02h,02h,0ah,0ah,0ah,0ah,0ah,07h,08h,08h,07h,02h,00h
	   07 07 07 07 07
	   07 07 02 02 07
	   07 07 07 07 07
	   07 07 02 02 02
	   02 02 0A 0A 0A
	   0A 0A 07 08 08
	   07 02 00
 00002776  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,00h,00h,00h,00h,00h,07h,0ah,0ah,07h,00h,00h,00h,00h,00h,00h,07h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,07h,07h,07h,07h,02h,00h
	   07 00 00 00 00
	   00 07 0A 0A 07
	   00 00 00 00 00
	   00 07 02 02 02
	   02 02 02 02 02
	   02 02 07 07 07
	   07 02 00
 0000279C  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,00h,08h,08h,08h,00h,07h,02h,02h,07h,00h,08h,08h,08h,08h,00h,07h,02h,02h,02h,02h,07h,07h,07h,07h,07h,02h,02h,02h,0ah,02h,02h,00h
	   07 00 08 08 08
	   00 07 02 02 07
	   00 08 08 08 08
	   00 07 02 02 02
	   02 07 07 07 07
	   07 02 02 02 0A
	   02 02 00
 000027C2  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,00h,08h,08h,08h,00h,07h,0ah,0ah,07h,00h,08h,08h,08h,08h,00h,07h,0ah,0ah,0ah,0ah,07h,08h,08h,00h,07h,0ah,0ah,0ah,0ah,02h,02h,00h
	   07 00 08 08 08
	   00 07 0A 0A 07
	   00 08 08 08 08
	   00 07 0A 0A 0A
	   0A 07 08 08 00
	   07 0A 0A 0A 0A
	   02 02 00
 000027E8  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,00h,00h,00h,00h,00h,07h,02h,02h,07h,00h,08h,08h,08h,08h,00h,07h,02h,02h,02h,02h,07h,00h,08h,08h,07h,02h,02h,02h,02h,02h,02h,00h
	   07 00 00 00 00
	   00 07 02 02 07
	   00 08 08 08 08
	   00 07 02 02 02
	   02 07 00 08 08
	   07 02 02 02 02
	   02 02 00
 0000280E  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,07h,07h,07h,07h,07h,07h,07h,02h,02h,07h,07h,07h,07h,07h,07h,07h,07h,0ah,0ah,0ah,0ah,07h,07h,07h,07h,07h,02h,02h,02h,02h,02h,02h,00h
	   07 07 07 07 07
	   07 07 02 02 07
	   07 07 07 07 07
	   07 07 0A 0A 0A
	   0A 07 07 07 07
	   07 02 02 02 02
	   02 02 00
 00002834  00 07 00 02 02	                                            db  00h,07h,00h,02h,02h,02h,0ah,02h,02h,02h,02h,0ah,02h,02h,02h,02h,0ah,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,00h
	   02 0A 02 02 02
	   02 0A 02 02 02
	   02 0A 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 00
 0000285A  00 07 07 02 02	                                            db  00h,07h,07h,02h,02h,02h,0ah,02h,02h,02h,02h,02h,0ah,02h,02h,02h,02h,0ah,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,00h
	   02 0A 02 02 02
	   02 02 0A 02 02
	   02 02 0A 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 02 02 02
	   02 02 00
 00002880  00 07 07 02 0E	                                            db  00h,07h,07h,02h,0eh,02h,0eh,02h,0eh,02h,0eh,02h,0eh,02h,0eh,02h,0eh,02h,02h,0eh,02h,0eh,02h,0eh,02h,0eh,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,00h
	   02 0E 02 0E 02
	   0E 02 0E 02 0E
	   02 0E 02 02 0E
	   02 0E 02 0E 02
	   0E 02 02 02 02
	   02 02 02 02 02
	   02 02 00
 000028A6  00 07 00 02 0E	                                            db  00h,07h,00h,02h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,02h,02h,0eh,06h,0eh,06h,0eh,06h,0eh,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,02h,00h
	   06 0E 06 0E 06
	   0E 06 0E 06 0E
	   06 0E 02 02 0E
	   06 0E 06 0E 06
	   0E 02 02 02 02
	   02 02 02 02 02
	   02 02 00
 000028CC  00 07 00 00 0E	                                            db  00h,07h,00h,00h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,06h,0eh,00h,00h,0eh,06h,0eh,06h,0eh,06h,0eh,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	   06 0E 06 0E 06
	   0E 06 0E 06 0E
	   06 0E 00 00 0E
	   06 0E 06 0E 06
	   0E 00 00 00 00
	   00 00 00 00 00
	   00 00 00

 000028F2			 end_of_required_data:
 000028F2 0E 42 49 4F 53	    this_drivers_primatives                 db  14, "BIOS_requestor"
	   5F 72 65 71 75
	   65 73 74 6F 72
 00002901  000002AC R		                                            dd  offset BIOS_requestor
 00002905  0000			                                            dw  0

 00002907  16 42 49 4F 53	                                            db  22, "BIOS_iPIC_redirect_irq"
	   5F 69 50 49 43
	   5F 72 65 64 69
	   72 65 63 74 5F
	   69 72 71
 0000291E  00000108 R		                                            dd  offset BIOS_iPIC_redirect_irq
 00002922  0000			                                            dw  0

 00002924  12 42 49 4F 53	                                            db  18, "BIOS_iPIC_mask_irq"
	   5F 69 50 49 43
	   5F 6D 61 73 6B
	   5F 69 72 71
 00002937  00000155 R		                                            dd  offset BIOS_iPIC_mask_irq
 0000293B  0000			                                            dw  0

 0000293D  14 42 49 4F 53	                                            db  20, "BIOS_iPIC_unmask_irq"
	   5F 69 50 49 43
	   5F 75 6E 6D 61
	   73 6B 5F 69 72
	   71
 00002952  000001B1 R		                                            dd  offset BIOS_iPIC_unmask_irq
 00002956  0000			                                            dw  0

 00002958  17 42 49 4F 53	                                            db  23, "BIOS_iPIC_mask_all_irqs"
	   5F 69 50 49 43
	   5F 6D 61 73 6B
	   5F 61 6C 6C 5F
	   69 72 71 73
 00002970  0000020D R		                                            dd  offset BIOS_iPIC_mask_all_irqs
 00002974  0000			                                            dw  0

 00002976  19 42 49 4F 53	                                            db  25, "BIOS_iPIC_unmask_all_irqs"
	   5F 69 50 49 43
	   5F 75 6E 6D 61
	   73 6B 5F 61 6C
	   6C 5F 69 72 71
	   73
 00002990  00000223 R		                                            dd  offset BIOS_iPIC_unmask_all_irqs
 00002994  0000			                                            dw  0

 00002996  13 69 42 49 4F	                                            db  19, "iBIOS_read_8042_64h"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 34 68
 000029AA  00000239 R		                                            dd  offset iBIOS_read_8042_64h
 000029AE  0000			                                            dw  0

 000029B0  13 69 42 49 4F	                                            db  19, "iBIOS_read_8042_60h"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 30 68
 000029C4  00000242 R		                                            dd  offset iBIOS_read_8042_60h
 000029C8  0000			                                            dw  0

 000029CA  14 69 42 49 4F	                                            db  20, "iBIOS_write_8042_64h"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 34
	   68
 000029DF  0000025B R		                                            dd  offset iBIOS_write_8042_64h
 000029E3  0000			                                            dw  0

 000029E5  14 69 42 49 4F	                                            db  20, "iBIOS_write_8042_60h"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 30
	   68
 000029FA  00000266 R		                                            dd  offset iBIOS_write_8042_60h
 000029FE  0000			                                            dw  0

 00002A00  18 69 42 49 4F	                                            db  24, "iBIOS_read_8042_64h_fast"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 34 68
	   5F 66 61 73 74
 00002A19  00000288 R		                                            dd  offset iBIOS_read_8042_64h_fast
 00002A1D  0000			                                            dw  0

 00002A1F  18 69 42 49 4F	                                            db  24, "iBIOS_read_8042_60h_fast"
	   53 5F 72 65 61
	   64 5F 38 30 34
	   32 5F 36 30 68
	   5F 66 61 73 74
 00002A38  0000028D R		                                            dd  offset iBIOS_read_8042_60h_fast
 00002A3C  0000			                                            dw  0

 00002A3E  19 69 42 49 4F	                                            db  25, "iBIOS_write_8042_64h_fast"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 34
	   68 5F 66 61 73
	   74
 00002A58  000002A2 R		                                            dd  offset iBIOS_write_8042_64h_fast
 00002A5C  0000			                                            dw  0

 00002A5E  19 69 42 49 4F	                                            db  25, "iBIOS_write_8042_60h_fast"
	   53 5F 77 72 69
	   74 65 5F 38 30
	   34 32 5F 36 30
	   68 5F 66 61 73
	   74
 00002A78  000002A7 R		                                            dd  offset iBIOS_write_8042_60h_fast
 00002A7C  0000			                                            dw  0

 00002A7E  14 54 49 4D 45	                                            db  20, "TIMER_wait_next_tick"
	   52 5F 77 61 69
	   74 5F 6E 65 78
	   74 5F 74 69 63
	   6B
 00002A93  00000384 R		                                            dd  offset TIMER_wait_next_tick
 00002A97  0000			                                            dw  0

 00002A99  14 54 49 4D 45	                                            db  20, "TIMER_wait_full_tick"
	   52 5F 77 61 69
	   74 5F 66 75 6C
	   6C 5F 74 69 63
	   6B
 00002AAE  000003A0 R		                                            dd  offset TIMER_wait_full_tick
 00002AB2  0000			                                            dw  0

 00002AB4  12 54 49 4D 45	                                            db  18, "TIMER_wait_x_ticks"
	   52 5F 77 61 69
	   74 5F 78 5F 74
	   69 63 6B 73
 00002AC7  000003C2 R		                                            dd  offset TIMER_wait_x_ticks
 00002ACB  0000			                                            dw  0

 00002ACD  1F 69 54 49 4D	                                            db  31, "iTIMER_activate_debi_timer_feed"
	   45 52 5F 61 63
	   74 69 76 61 74
	   65 5F 64 65 62
	   69 5F 74 69 6D
	   65 72 5F 66 65
	   65 64
 00002AED  00000350 R		                                            dd  offset iTIMER_activate_debi_timer_feed
 00002AF1  0000			                                            dw  0

 00002AF3  21 69 54 49 4D	                                            db  33, "iTIMER_deactivate_debi_timer_feed"
	   45 52 5F 64 65
	   61 63 74 69 76
	   61 74 65 5F 64
	   65 62 69 5F 74
	   69 6D 65 72 5F
	   66 65 65 64
 00002B15  0000036F R		                                            dd  offset iTIMER_deactivate_debi_timer_feed
 00002B19  0000			                                            dw  0

 00002B1B  0E 54 41 53 4B	                                            db  14, "TASK_set_focus"
	   5F 73 65 74 5F
	   66 6F 63 75 73
 00002B2A  000009AD R		                                            dd  offset TASK_set_focus
 00002B2E  0000			                                            dw  0

 00002B30  10 54 41 53 4B	                                            db  16, "TASK_read_events"
	   5F 72 65 61 64
	   5F 65 76 65 6E
	   74 73
 00002B41  000009CE R		                                            dd  offset TASK_read_events
 00002B45  0000			                                            dw  0

 00002B47  16 54 41 53 4B	                                            db  22, "TASK_release_timeslice"
	   5F 72 65 6C 65
	   61 73 65 5F 74
	   69 6D 65 73 6C
	   69 63 65
 00002B5E  000009E7 R		                                            dd  offset TASK_release_timeslice
 00002B62  0000			                                            dw  0

 00002B64  13 69 54 41 53	                                            db  19, "iTASK_kbd_interface"
	   4B 5F 6B 62 64
	   5F 69 6E 74 65
	   72 66 61 63 65
 00002B78  000009FC R		                                            dd  offset iTASK_kbd_interface
 00002B7C  0000			                                            dw  0

 00002B7E  19 4F 42 4A 45	                                            db  25, "OBJECT_create_base_object"
	   43 54 5F 63 72
	   65 61 74 65 5F
	   62 61 73 65 5F
	   6F 62 6A 65 63
	   74
 00002B98  00000B1A R		                                            dd  offset OBJECT_create_base_object
 00002B9C  0000			                                            dw  0

 00002B9E  14 4F 42 4A 45	                                            db  20, "OBJECT_create_object"
	   43 54 5F 63 72
	   65 61 74 65 5F
	   6F 62 6A 65 63
	   74
 00002BB3  0000102A R		                                            dd  offset OBJECT_create_object
 00002BB7  0000			                                            dw  0

 00002BB9  1D 45 78 6F 64	                                            db  29, "Exodus_TASK_release_timeslice"
	   75 73 5F 54 41
	   53 4B 5F 72 65
	   6C 65 61 73 65
	   5F 74 69 6D 65
	   73 6C 69 63 65
 00002BD7  000009F1 R		                                            dd  offset Exodus_TASK_release_timeslice
 00002BDB  0000			                                            dw  0

 00002BDD  19 69 54 41 53	                                            db  25, "iTASK_prevent_task_switch"
	   4B 5F 70 72 65
	   76 65 6E 74 5F
	   74 61 73 6B 5F
	   73 77 69 74 63
	   68
 00002BF7  000009AB R		                                            dd  offset iTASK_prevent_task_switch
 00002BFB  0000			                                            dw  0

 00002BFD  17 69 54 41 53	                                            db  23, "iTASK_allow_task_switch"
	   4B 5F 61 6C 6C
	   6F 77 5F 74 61
	   73 6B 5F 73 77
	   69 74 63 68
 00002C15  000009AC R		                                            dd  offset iTASK_allow_task_switch
 00002C19  0000			                                            dw  0

 00002C1B  15 69 54 41 53	                                            db  21, "iTASK_mouse_interface"
	   4B 5F 6D 6F 75
	   73 65 5F 69 6E
	   74 65 72 66 61
	   63 65
 00002C31  0000075C R		                                            dd  offset iTASK_mouse_interface
 00002C35  0000			                                            dw  0

 00002C37  FFFF			                                            dw  0ffffh              ; Teriminator

 2C39				_TEXT32 ENDS

				END
