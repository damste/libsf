JWasm v2.06e, Nov 25 2011
boot.asm
                                ; boot.asm
                                ;
                                ; Exodus - 512 byte boot record for floppy disk
                                ;          * Note:  It is known that this disk is bootable, the only error we'll have to report is missing "Exodus Boot Program"
                                ;          * Note:  Many of the labels have been added for illustrative purposes.  They may not be referenced.
                                ;          * Note:  The final thing this boot algorithm does before transferring control to BOOTUP.COM is point ds:[si] to
                                ;                   a parameter block.  Refer to parameter_block: below for more information.

                                    .MODEL tiny

                                    .386P
                                ;_XDEBUG		EQU 1

                                INCLUDE ../source/common/equates.asp
                              C ; equates.asp
                              C ;
                              C ; Exodus constants.  These are used at various places.
                              C ; This file provides a common area to modify constant values, rather than sifting through programs, etc.
                              C ;
                              C 
                              C 
                              C 
                              C INCLUDE x86_eq.asp
                              C ; x86_eq.asp
                              C ;
                              C ; Constants specific to the Intel architecture
                              C ;
                              C 
                              C 
                              C 
 = 0                          C _TSS_BACK_LINK              EQU 0
 = 4                          C _TSS_ESP0                   EQU 4
 = 8                          C _TSS_SS0                    EQU 8
 = C                          C _TSS_ESP1                   EQU 12
 = 10                         C _TSS_SS1                    EQU 16
 = 14                         C _TSS_ESP2                   EQU 20
 = 18                         C _TSS_SS2                    EQU 24
 = 1C                         C _TSS_CR3                    EQU 28
 = 20                         C _TSS_EIP                    EQU 32
 = 24                         C _TSS_EFLAGS                 EQU 36
 = 28                         C _TSS_EAX                    EQU 40
 = 2C                         C _TSS_ECX                    EQU 44
 = 30                         C _TSS_EDX                    EQU 48
 = 34                         C _TSS_EBX                    EQU 52
 = 38                         C _TSS_ESP                    EQU 56
 = 3C                         C _TSS_EBP                    EQU 60
 = 40                         C _TSS_ESI                    EQU 64
 = 44                         C _TSS_EDI                    EQU 68
 = 48                         C _TSS_ES                     EQU 72
 = 4C                         C _TSS_CS                     EQU 76
 = 50                         C _TSS_SS                     EQU 80
 = 54                         C _TSS_DS                     EQU 84
 = 58                         C _TSS_FS                     EQU 88
 = 5C                         C _TSS_GS                     EQU 92
 = 60                         C _TSS_LDT                    EQU 96
 = 64                         C _TSS_TRAP_BIT               EQU 100
 = 1                          C _TSS_TRAP_BIT_MASK          EQU 1b
 = 66                         C _TSS_IO_MAP                 EQU 102
                              C ; The following area is used by Exodus.  It appears immediate after the TSS in memory
 = 68                         C _TSS_FPU_SAVE_AREA          EQU 104
                              C 
                              C 
                              C ; EFLAGS register constants to access individual flags
 = 0                          C _EFLAGS_CF                  EQU 0
 = 2                          C _EFLAGS_PF                  EQU 2
 = 4                          C _EFLAGS_ACF                 EQU 4
 = 6                          C _EFLAGS_ZF                  EQU 6
 = 7                          C _EFLAGS_SF                  EQU 7
 = 8                          C _EFLAGS_TF                  EQU 8
 = 9                          C _EFLAGS_IF                  EQU 9
 = A                          C _EFLAGS_DF                  EQU 10
 = B                          C _EFLAGS_OF                  EQU 11
 = C                          C _EFLAGS_IOPL                EQU 12
 = E                          C _EFLAGS_NT                  EQU 14
 = 10                         C _EFLAGS_RF                  EQU 16
 = 11                         C _EFLAGS_VM                  EQU 17
                              C ; Masks to access specific bits
 = 1                          C _EFLAGS_CF_MASK             EQU  1b SHL _EFLAGS_CF
 = 4                          C _EFLAGS_PF_MASK             EQU  1b SHL _EFLAGS_PF
 = 10                         C _EFLAGS_ACF_MASK            EQU  1b SHL _EFLAGS_ACF
 = 40                         C _EFLAGS_ZF_MASK             EQU  1b SHL _EFLAGS_ZF
 = 80                         C _EFLAGS_SF_MASK             EQU  1b SHL _EFLAGS_SF
 = 100                        C _EFLAGS_TF_MASK             EQU  1b SHL _EFLAGS_TF
 = 200                        C _EFLAGS_IF_MASK             EQU  1b SHL _EFLAGS_IF
 = 400                        C _EFLAGS_DF_MASK             EQU  1b SHL _EFLAGS_DF
 = 800                        C _EFLAGS_OF_MASK             EQU  1b SHL _EFLAGS_OF
 = 3000                       C _EFLAGS_IOPL_MASK           EQU 11b SHL _EFLAGS_IOPL
 = 4000                       C _EFLAGS_NT_MASK             EQU  1b SHL _EFLAGS_NT
 = 10000                      C _EFLAGS_RF_MASK             EQU  1b SHL _EFLAGS_RF
 = 20000                      C _EFLAGS_VM_MASK             EQU  1b SHL _EFLAGS_VM
                              C 
 = 1000                       C _CW_INFINITY                EQU 1000000000000b
 = C00                        C _CW_ROUNDING                EQU  110000000000b
 = 0                          C _CW_ROUNDING_00             EQU  000000000000b
 = 400                        C _CW_ROUNDING_01             EQU  010000000000b
 = 800                        C _CW_ROUNDING_10             EQU  100000000000b
 = C00                        C _CW_ROUNDING_11             EQU  110000000000b
 = 300                        C _CW_PRECISION               EQU    1100000000b
 = 0                          C _CW_PRECISION_00            EQU    0000000000b
 = 100                        C _CW_PRECISION_01            EQU    0100000000b
 = 200                        C _CW_PRECISION_10            EQU    1000000000b
 = 300                        C _CW_PRECISION_11            EQU    1100000000b
 = 20                         C _CW_PM                      EQU        100000b
 = 10                         C _CW_UM                      EQU         10000b
 = 8                          C _CW_OM                      EQU          1000b
 = 4                          C _CW_ZM                      EQU           100b
 = 2                          C _CW_DM                      EQU            10b
 = 1                          C _CW_IM                      EQU             1b
                              C 
 = 8000                       C _SW_BUSY                    EQU 1000000000000000b
 = 4000                       C _SW_C3                      EQU  100000000000000b
 = 3800                       C _SW_TOS                     EQU   11100000000000b
 = 400                        C _SW_C2                      EQU      10000000000b
 = 200                        C _SW_C1                      EQU       1000000000b
 = 100                        C _SW_C0                      EQU        100000000b
 = 80                         C _SW_ERROR_SUMMARY           EQU         10000000b
 = 40                         C _SW_STACK_FAULT             EQU          1000000b
 = 20                         C _SW_PE                      EQU           100000b
 = 10                         C _SW_UE                      EQU            10000b
 = 8                          C _SW_OE                      EQU             1000b
 = 4                          C _SW_ZE                      EQU              100b
 = 2                          C _SW_DE                      EQU               10b
 = 1                          C _SW_IE                      EQU                1b
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ GDT ENTRIES ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 8                          C     _sIDT                       EQU 1 * 8       ; IDT
 = 10                         C     _sGDT                       EQU 2 * 8       ; GDT
 = 18                         C     _sSTACK                     EQU 3 * 8       ; STACK
 = 20                         C     _sCODE                      EQU 4 * 8       ; kernel CODE for kernel code
 = 48                         C     _sDATA                      EQU 9 * 8       ; kernel DATA selector for kernel data
 = 28                         C     _sGRAPHICS                  EQU 5 * 8       ; Graphics video (0a0000h)
 = 30                         C     _sMONO                      EQU 6 * 8       ; Mono video (0b0000h)
 = 38                         C     _sVGA                       EQU 7 * 8       ; VGA video (0b8000h)
 = 40                         C     _sALL_MEM                   EQU 8 * 8       ; All memory (for debugging)
                              C     ; 9 is above, _sDATA
 = 50                         C     _sEXODUS_MEM                EQU 10 * 8      ; Exodus assigned memory
 = 58                         C     _sEXODUS_PORTS              EQU 11 * 8      ; Exodus assigned ports
 = 60                         C     _sEXODUS_INTS               EQU 12 * 8      ; Exodus assigned ints
                              C     ;_sNOT_USED                                 ; available
 = 70                         C     _sEXODUS_TSS                EQU 14 * 8      ; Exodus TSS
 = 78                         C     _sEXODUS_TASK_GATE          EQU 15 * 8      ; Exodus kernel task gate (points to _sEXODUS_TSS)
 = 80                         C     _sEXODUS_SLAVE_TSS          EQU 16 * 8      ; Exodus Slave TSS
 = 88                         C     _sEXODUS_SLAVE_TASK_GATE    EQU 17 * 8      ; Exodus kernel slave task gate (points to _sEXODUS_SLAVE_TSS)
                              C     ;_sNOT USED
 = 98                         C     _sPRIMATIVES                EQU 19 * 8      ; Primative structure for natives
 = A0                         C     _sPRIMATIVE_LOAD_INFO       EQU 20 * 8      ; Primative load information (for reporting on each driver)
 = A8                         C     _sSYSTEM                    EQU 21 * 8      ; Exodus system memory
 = B0                         C     _sEXODUS_REQUESTOR          EQU 22 * 8      ; Call gate to Exodus's requestor() function
 = B8                         C     _sSYSTEM_RING1              EQU 23 * 8      ; Exodus system memory for ring-1 apps
 = C0                         C     _sSYSTEM_RING2              EQU 24 * 8      ; Exodus system memory for ring-2 apps
 = C8                         C     _sSYSTEM_RING3              EQU 25 * 8      ; Exodus system memory for ring-3 apps
 = D0                         C     _sDEBI_screen               EQU 26 * 8      ; low-level DEBI debugger's save screen buffer
 = D8                         C     _sDEBI_memory               EQU 27 * 8      ; low-level DEBI debugger's memory
 = E0                         C     _sFLOPPY_TRACK              EQU 28 * 8      ; Floppy disk data I/O for one full track
 = E8                         C     _sVGA_BACKUP                EQU 29 * 8      ; VGA video (060000h, used when in a graphics mode so writes
                              C                                                 ;  to the text screen are still valid)
 = F0                         C     _sDEBI_screen2              EQU 30 * 8      ; low-level DEBI debugger's save screen buffer2 (for popups and menus)
 = F8                         C     _sDEBI_temp                 EQU 31 * 8      ; low-level DEBI debugger's temporary selector (used for various things)
 = 100                        C     _sEXODUS_OBJECTS            EQU 32 * 8      ; Exodus objects
 = 108                        C     _sTASK_SWITCH_TSS           EQU 33 * 8      ; Task Manager's switch_task() function
 = 110                        C     _sTASK_SWITCH_TASK_GATE     EQU 34 * 8      ; Task Manager's task gate (points to _sTASK_SWITCH_TSS)
 = 118                        C     _sTASK_STACK                EQU 35 * 8      ; Task Manger task's stack
 = 120                        C     _sSTACK0                    EQU 36 * 8      ; Exodus Stack 0
 = 128                        C     _sSTACK1                    EQU 37 * 8      ; Exodus Stack 1
 = 130                        C     _sSTACK2                    EQU 38 * 8      ; Exodus Stack 2
 = 138                        C     _sDEBI_dt                   EQU 39 * 8      ; low-level DEBI debugger's DT storage
 = 140                        C     _sDEBI_np                   EQU 40 * 8      ; low-level DEBI debugger's NP storage
 = 148                        C     _sDEBI_rp                   EQU 41 * 8      ; low-level DEBI debugger's RP storage
                              C 
                              C   ; Variable base/limit GDT slots setup in INIT32.ASP
 = 190                        C     _sEXODUS_INI                EQU 50 * 8      ; Holds the parsed EXODUS.INI sructure
 = 198                        C     _sEXODUS_INI_ERRORS         EQU 51 * 8      ; Holds any errors found while parsing EXODUS.INI
 = 1A0                        C     _sTASK_SYSTEM               EQU 52 * 8      ; Holds all tasks
                              C 
 = 5DA0                       C     _cgTEMP_PRIMATIVE_MAIN      EQU 2996 * 8
 = 5DA8                       C     _cgTEMP_PRIMATIVE_REQUESTOR EQU 2997 * 8
 = 5DB0                       C     _csTEMP_PRIMATIVE           EQU 2998 * 8
 = 5DB8                       C     _dsTEMP_PRIMATIVE           EQU 2999 * 8
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ CONSTANTS ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÙ
 = C8                         C     _MIN_PRIMATIVE              EQU 200                             ; Start of the primatives
 = BB3                        C     _MAX_PRIMATIVE              EQU 2995                            ; End of the primatives
 = FFF                        C     _lastGDT                    EQU 4095                            ; Last valid GDT in the GDT
 = 32                         C     _firstASSIGNMENT            EQU 50                              ; The first Exodus assigned GDT entry for various items
 = C7                         C     _lastASSIGNMENT             EQU 199                             ; The last Exodus assigned GDT entry for various items
 = BB8                        C     _firstUSER_ASSIGNMENT       EQU 3000
 = FFF                        C     _lastUSER_ASSIGNMENT        EQU 4095
 = C7                         C     _sGDT_init                  EQU 199                             ; Only initialize the first 199 GDT entries
                              C 
                              C 
                              C   ; Required memory structures for Exodus
                              C   ; Refer to Bootup(internal) document for definitive memory locations
 = 8A000                      C     _sIDT_base                  EQU 8a000h
 = 800                        C     _sIDT_limit                 EQU 800h
 = 800                        C     _sGDT_base                  EQU 0800h
 = 8000                       C     _sGDT_limit                 EQU 8000h
 = 98000                      C     _sSTACK_base                EQU 98000h
 = 8000                       C     _sSTACK_limit               EQU 8000h
 = 10000                      C     _sCODE_base                 EQU 10000h
 = 40000                      C     _sCODE_limit                EQU 40000h
 = 10000                      C     _sDATA_base                 EQU 10000h
 = 30000                      C     _sDATA_limit                EQU 30000h
 = A0000                      C     _sGRAPHICS_base             EQU 0a0000h
 = 10000                      C     _sGRAPHICS_limit            EQU 10000h
 = B0000                      C     _sMONO_base                 EQU 0b0000h
 = 8000                       C     _sMONO_limit                EQU 8000h
 = B8000                      C     _sVGA_base                  EQU 0b8000h     ; Also, see _sVGA_BACKUP_ below
 = 8000                       C     _sVGA_limit                 EQU 8000h
 = 0                          C     _sALL_MEM_base              EQU 0
 = FFFFFFFF                   C     _sALL_MEM_limit             EQU 0ffffffffh
 = 70C00                      C     _sEXODUS_MEM_base           EQU 70c00h
 = 4000                       C     _sEXODUS_MEM_limit          EQU 4000h
 = 6CC00                      C     _sEXODUS_PORTS_base         EQU 6cc00h
 = 4000                       C     _sEXODUS_PORTS_limit        EQU 4000h
 = 97E00                      C     _sEXODUS_INTS_base          EQU 97e00h
 = 200                        C     _sEXODUS_INTS_limit         EQU 200h
 = 68100                      C     _sEXODUS_TSS_base           EQU 68100h
 = 100                        C     _sEXODUS_TSS_limit          EQU 100h        ; 256 bytes
                              C    ;_sEXODUS_TASK_GATE          EQU task gate pointing to _sEXODUS_TSS
 = 68200                      C     _sEXODUS_SLAVE_TSS_base     EQU 68200h
 = 100                        C     _sEXODUS_SLAVE_TSS_limit    EQU 100h        ; 256 bytes
 = 8D380                      C     _sPRIMATIVES_base           EQU 8d380h
 = 4000                       C     _sPRIMATIVES_limit          EQU 4000h       ; 16k
 = 8C380                      C     _sPRIMATIVE_LOAD_INFO_base  EQU 8c380h
 = 1000                       C     _sPRIMATIVE_LOAD_INFO_limit EQU 1000h       ; 4k
 = 89400                      C     _sSYSTEM_base               EQU 89400h
 = C00                        C     _sSYSTEM_limit              EQU 0c00h       ; 3k
 = 800                        C     _sSYSTEM_USER_limit         EQU 0800h       ; 2k
 = 281400                     C     _sDEBI_screen_base          EQU 281400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000                       C     _sDEBI_screen_limit         EQU 8000h       ; 32k
 = 279400                     C     _sDEBI_memory_base          EQU 279400h                         ; ; ; ; ; Added 2 MB, 02/26/2009 - RCH
 = 8000                       C     _sDEBI_memory_limit         EQU 8000h       ; 32k
 = 74C00                      C     _sFLOPPY_TRACK_base         EQU 74c00h
 = 4800                       C     _sFLOPPY_TRACK_limit        EQU 4800h       ; 512 bytes per sector * 18 sectors * 2 sides = 18k
 = 60000                      C     _sVGA_BACKUP_base           EQU 60000h      ; Note, the backup area is used when in graphics modes that use a0000h
 = 8000                       C     _sVGA_BACKUP_limit          EQU 8000h       ; so all video writes to the text window are still saved
 = 258000                     C     _sDEBI_screen2_base         EQU 258000h
 = 28000                      C     _sDEBI_screen2_limit        EQU 28000h       ; 32k
 = 68000                      C     _sTASK_SWITCH_TSS_base      EQU 68000h
 = 100                        C     _sTASK_SWITCH_TSS_limit     EQU 100h        ; 256 bytes
 = 220000                     C     _sTASK_STACK_base           EQU 220000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000                       C     _sTASK_STACK_limit          EQU 8000h       ; 32k
 = 95380                      C     _sSTACK0_base               EQU 95380h
 = 2000                       C     _sSTACK0_limit              EQU 2000h       ; 8k
 = 93380                      C     _sSTACK1_base               EQU 93380h
 = 2000                       C     _sSTACK1_limit              EQU 2000h       ; 8k
 = 91380                      C     _sSTACK2_base               EQU 91380h
 = 2000                       C     _sSTACK2_limit              EQU 2000h       ; 8k
 = 240000                     C     _sDEBI_dt_base              EQU 240000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000                       C     _sDEBI_dt_limit             EQU 8000h       ; 32k
 = 248000                     C     _sDEBI_np_base              EQU 248000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000                       C     _sDEBI_np_limit             EQU 8000h       ; 32k
 = 250000                     C     _sDEBI_rp_base              EQU 250000h                         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 8000                       C     _sDEBI_rp_limit             EQU 8000h       ; 32k
                              C 
 = 50000                      C     _sEXODUS_OBJECTS_base       EQU 50000h
 = 8000                       C     _sEXODUS_OBJECTS_limit      EQU 8000h       ; 32k
 = 200000                     C     _sEXODUS_INI_base           EQU 200000h     ; 1MB               ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 10000                      C     _sEXODUS_INI_limit          EQU 10000h      ; 64k
 = 210000                     C     _sEXODUS_INI_ERRORS_base    EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 4000                       C     _sEXODUS_INI_ERRORS_limit   EQU 4000h       ; 16k
 = 210000                     C     _sTASK_SYSTEM_base          EQU 210000h     ; 1MB + 64k         ; ; ; ; ; Added 1 MB, 03/01/2009 - RCH
 = 10000                      C     _sTASK_SYSTEM_limit         EQU 010000h     ; 64k
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ BOOT DT STRUCTURE ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0                          C     _BOOT_DT_object_type        EQU 0
 = 1                          C     _BOOT_DT_days               EQU 1
 = 5                          C     _BOOT_DT_seconds            EQU 5
 = 8                          C     _BOOT_DT_rp_offset          EQU 8
 = A                          C     _BOOT_DT_entry_type         EQU 10
 = B                          C     _BOOT_DT_np_offset          EQU 11
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ BOOT RP STRUCTURE ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0                          C     _BOOT_RP_length				EQU 0
 = 4                          C     _BOOT_RP_requestor			EQU 4
 = 8                          C     _BOOT_RP_main				EQU 8
                              C ;; For original version using head/track/sector
 = C                          C 	_BOOT_RP_start_head			EQU	12
 = D                          C 	_BOOT_RP_start_track		EQU	13
 = E                          C 	_BOOT_RP_start_sector		EQU	14
 = 10                         C 	_BOOT_RP_end_head			EQU	16
 = 11                         C 	_BOOT_RP_end_track			EQU	17
 = 12                         C 	_BOOT_RP_end_sector			EQU	18
                              C ;; For new version using linear disk offsets
 = C                          C     _BOOT_RP_disk_offset		EQU 12
 = 10                         C 	_BOOT_RP_nuserved			EQU 16 
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ BOOT PARAMETER BLOCK STRUCTURE ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0                          C     _BOOT_PB_size               EQU 0
 = 4                          C     _BOOT_PB_main               EQU 4
 = 8                          C     _BOOT_PB_requestor          EQU 8
 = C                          C     _BOOT_PB_start_head         EQU 12
 = D                          C     _BOOT_PB_start_track        EQU 13
 = E                          C     _BOOT_PB_start_sector       EQU 14
 = 10                         C     _BOOT_PB_end_head           EQU 16
 = 11                         C     _BOOT_PB_end_track          EQU 17
 = 12                         C     _BOOT_PB_end_sector         EQU 18
 = 14                         C     _BOOT_PB_entry_type         EQU 20
 = 16                         C     _BOOT_PB_linear_offset      EQU 22
 = 1A                         C     _BOOT_PB_dt_offset          EQU 26
 = 1C                         C     _BOOT_PB_crc16              EQU 28
 = 20                         C     _BOOT_PB_structure_size     EQU 32
                              C 
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ EXODUS.INI STRUCTURES ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0                          C     _EXODUS_INI_FIRST_BRACKET       EQU 0
 = 4                          C     _EXODUS_INI_TOTAL_BYTES         EQU 4
 = 8                          C     _EXODUS_INI_TOTAL_BRACKET_GROUPS EQU 8
 = C                          C     _EXODUS_INI_TOTAL_PAREN_CASKS   EQU 12
 = 10                         C     _EXODUS_INI_HEADER_LENGTH       EQU 16
                              C 
 = 0                          C     _EXODUS_BRACKET_NEXT            EQU 0
 = 4                          C     _EXODUS_BRACKET_PAREN_CASKS     EQU 4
 = 8                          C     _EXODUS_BRACKET_TOTAL_PARENS    EQU 8
 = C                          C     _EXODUS_BRACKET_NAME            EQU 12
 = 10                         C     _EXODUS_BRACKET_HANDLE          EQU 16
 = 14                         C     _EXODUS_BRACKET_REQUESTOR       EQU 20
 = 16                         C     _EXODUS_BRACKET_REQUESTOR_FUNC  EQU 22
 = 1A                         C     _EXODUS_BRACKET_SCRATCH_AREA    EQU 26
 = 1E                         C     _EXODUS_BRACKET_LENGTH          EQU 30
                              C 
 = 0                          C     _EXODUS_PAREN_NEXT              EQU 0
 = 4                          C     _EXODUS_PAREN_NEXT_SAME_LINE    EQU 4
 = 8                          C     _EXODUS_PAREN_DATA_ITEMS        EQU 8
 = C                          C     _EXODUS_PAREN_TOTAL_DATA_ITEMS  EQU 12
 = 10                         C     _EXODUS_PAREN_SOURCE_LINE       EQU 16
 = 14                         C     _EXODUS_PAREN_SOURCE_LINE_LENGTH EQU 20
 = 18                         C     _EXODUS_PAREN_HANDLE            EQU 24
 = 1A                         C     _EXODUS_PAREN_REQUESTOR         EQU 26
 = 1E                         C     _EXODUS_PAREN_REQUESTOR_FUNC    EQU 30
 = 22                         C     _EXODUS_PAREN_SCRATCH_AREA      EQU 34
 = 26                         C     _EXODUS_PAREN_LENGTH            EQU 38
                              C 
 = 0                          C     _EXODUS_DATA_NEXT               EQU 0
 = 4                          C     _EXODUS_DATA_DATA_ITEM_SOURCE   EQU 4
 = 8                          C     _EXODUS_DATA_DATA_ITEM_LENGTH   EQU 8
 = C                          C     _EXODUS_DATA_LENGTH             EQU 12
                              C 
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ EXODUS xxx STRUCTURES ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 = 0                          C     _EXODUS_MEM_type                EQU 0
 = 4                          C     _EXODUS_MEM_base                EQU 4
 = 8                          C     _EXODUS_MEM_limit               EQU 8
 = C                          C     _EXODUS_MEM_gdt                 EQU 12
 = E                          C     _EXODUS_MEM_ldt                 EQU 14
 = 10                         C     _EXODUS_MEM_size                EQU 16
                              C 
 = 10                         C     _EXODUS_PORTS_size              EQU 16
                              C 
 = 2                          C     _EXODUS_INTS_size               EQU 2
                              C 
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ EXODUS SYSTEM MEMORY ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                              C ; Note, when updates are made here they need to be reflected in INF\SYSTEM.INF
                              C ; Note, when updates are made here and INF\SYSTEM.INF, the "Exodus Quick Reference" manual needs to be updated
 = 0                          C     _SYSTEM_SECONDS_SINCE_BOOTUP    EQU 0                           ; dword
 = 4                          C     _SYSTEM_SECONDS_SINCE_MIDNIGHT  EQU 4                           ; dword
 = 8                          C     _SYSTEM_HOURS                   EQU 8                           ; byte
 = 9                          C     _SYSTEM_MINUTES                 EQU 9                           ; byte
 = A                          C     _SYSTEM_SECONDS                 EQU 10                          ; byte
 = B                          C     _SYSTEM_182S_OF_A_SECOND        EQU 11                          ; byte
 = C                          C     _SYSTEM_DAY                     EQU 12                          ; byte
 = D                          C     _SYSTEM_MONTH                   EQU 13                          ; byte
 = E                          C     _SYSTEM_YEAR                    EQU 14                          ; word
 = 10                         C     _SYSTEM_DAY_OF_YEAR             EQU 16                          ; word
 = 12                         C     _SYSTEM_BUILD                   EQU 18                          ; 10-byte string in the format: "mm.dd.yyyy"
 = 1C                         C     _SYSTEM_TOTAL_MEMORY            EQU 28                          ; dword, total ram in bytes
 = 20                         C     _SYSTEM_VGA_HORIZONTAL          EQU 32                          ; word (pixels-graphics, or columns-text)
 = 22                         C     _SYSTEM_VGA_VERTICAL            EQU 34                          ; word (pixels-graphics, or rows-text)
 = 24                         C     _SYSTEM_VGA_VIDEO_MODE          EQU 36                          ; byte (0-graphics, 1-text)
 = 25                         C     _SYSTEM_MONO_VIDEO_MODE         EQU 37                          ; byte (0-graphics, 1-text, 0ffh-Unknown)
                              C 
                              C   ; Non-user accessible system memory areas (Exodus internal, hence the use of the _i_)
 = 800                        C     _SYSTEM_i_FATAL                 EQU 2048                        ; dword
 = 804                        C     _SYSTEM_i_TASKS_CREATED         EQU 2052                        ; dword
 = 808                        C     _SYSTEM_i_TASKS_BY_USER         EQU 2056                        ; dword
 = 80C                        C     _SYSTEM_i_TASKS_BY_ERROR        EQU 2060                        ; dword
 = 810                        C     _SYSTEM_i_IRQ6_INDICATOR        EQU 2064                        ; byte, IRQ6 indicator (changes each time an IRQ6 is signaled)
 = 811                        C     _SYSTEM_i_IRQ6_INDICATOR_LAST   EQU 2065                        ; byte, IRQ6 indicator previous, used to see when an IRQ6 is signaled
 = 812                        C     _SYSTEM_i_BASE                  EQU 2066                        ; dword
 = 816                        C     _SYSTEM_i_LIMIT                 EQU 2070                        ; dword
 = 81A                        C     _SYSTEM_i_DWORD_TO_COPY         EQU 2074                        ; word
 = 81C                        C     _SYSTEM_i_LAST_GDT_REFERENCED   EQU 2076                        ; qword
 = 824                        C     _SYSTEM_i_CODE_GDT_OFFSET       EQU 2084                        ; dword (used temporarily during native primative install)
 = 828                        C     _SYSTEM_i_DATA_GDT_OFFSET       EQU 2088                        ; dword (used temporarily during native primative install)
 = 82C                        C     _SYSTEM_i_MAIN_GDT_OFFSET       EQU 2092                        ; dword (used temporarily during native primative install)
 = 830                        C     _SYSTEM_i_REQUESTOR_GDT_OFFSET  EQU 2096                        ; dword (used temporarily during native primative install)
 = 834                        C     _SYSTEM_i_GDT_TO_ASSIGN         EQU 2100                        ; word (used various places to assign GDT entries)
 = 836                        C     _SYSTEM_i_USER_GDT_TO_ASSIGN    EQU 2102                        ; word (used various places to assign USER Program GDTs)
                              C   ; Next offset is 2104
                              C 
                              C 
                              C   ; These scratch items exist from end of memory down
 = BF8                        C     _SYSTEM_i_SCRATCH_DWORD2        EQU 3064                        ; dword (used various places as a scratch buffer)
 = BFC                        C     _SYSTEM_i_SCRATCH_DWORD1        EQU 3068                        ; dword (used various places as a scratch buffer)
                              C 
                              C 
                              C 
                              C 
                              C ; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                              C ; ³ BOCHS SUPPORT ³
                              C ; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                              C ; These equates are used to communicate via INT 0FFh
                              C ; Values here are in ecx, with edx being used for data information.
                              C ; Values in eax must be
 = 12345678                   C     _BOCHS1                         EQU 12345678h
 = 87654321                   C     _BOCHS2                         EQU 87654321h
 = 0                          C     _BOCHS_GET_MONO_MOUSE_XY        EQU 0
 = 1                          C     _BOCHS_GET_MONO_CURSOR          EQU 1

                                ; Used for local variables
 = FFFFFFF5                     _START_TRACK	EQU	-11
 = FFFFFFF4                     _START_HEAD		EQU -12
 = FFFFFFF3                     _START_SECTOR	EQU -13
 = FFFFFFF2                     _END_TRACK		EQU -14
 = FFFFFFF1                     _END_HEAD		EQU -15
 = FFFFFFF0                     _END_SECTOR		EQU -16
 = FFFFFFEF                     _DT_identifier	EQU -17
 = FFFFFFE4                     _LOAD_OFFSET	EQU -28
 = FFFFFFE0                     _BYTES_LOADED	EQU -32


                                ; Beginning of boot code:
00000000                        _MAIN       SEGMENT WORD PUBLIC 'CODE'
                                    ORG 0
                                ;; Transfer control to linear 7c0h:<offset> (it makes it a SEG0 reference)
00000000                          absolute_begin:
                                ;; These next two lines are the instruction: JMP FAR 07C0h:000Fh
00000000  EA                        db  0eah
00000001  0F00C007                  dd  007c0000fh                                                  ; cs = 07c0h, ip = 000fh

                                ;; Identify this version's DNR file structure
00000005  0100                      db  1,0                                                         ; version 1.0
00000007  44542F4E502F5250          db  "DT/NP/RP"                                                  ; TAG/identifier

                                ;; JMP FAR 07C0H:000Fh lands here:
                                ;; Note, start_of_code is at offset 15 = 0fh
0000000F                          start_of_code:
                                ;; The far jump was to give us CS:0 as our starting point
0000000F  FA                        cli																; Clear interrupts
00000010  680040                    push    word ptr 4000h											; Store 4000h on the stack, to give SS: a value of 4000h
00000013  17                        pop     ss														; SS: now equals 4000h
00000014  BCFEFF                    mov     sp,0fffeh                                               ; Stack now points to linear address of 4fffeh
                                																	; Note:  Exodus will load from 10000h to 50000h (256 KB)
00000017  FB                        sti                                                             ; Set interrupts again

00000018                          Setup_Local_Variables:
00000018  C8200000                  enter   32,0
                                  ; [bp-4]  - --Nuserved
                                  ; [bp-8]  - --Nuserved
                                  ; [bp-10] - --Nuserved
                                  ;
                                  ; For floppy disks:
                                  ; [bp-11] - byte	- _START_TRACK, start track
                                  ; [bp-12] - byte	- _START_HEAD, start head
                                  ; [bp-13] - byte	- _START_SECTOR, start sector
                                  ;
                                  ; For floppy disks:
                                  ; [bp-14] - byte	- _END_TRACK, end track
                                  ; [bp-15] - byte	- _END_HEAD, end head
                                  ; [bp-16] - byte	- _END_SECTOR, end sector
                                  ;
                                  ; For file system:
                                  ; [bp-17] - byte	- _DT_identifier, DT identifier
                                  ; [bp-18] - --Nuserved
                                  ; [bp-22] - --Nuserved
                                  ; [bp-24] - --Nuserved
                                  ;
                                  ; For boot.asm's internal use:
                                  ; [bp-28] - dword	- _LOAD_OFFSET, offset into memory where we're loading data from disk
                                  ; [bp-32] - dword	- _BYTES_LOADED, bytes loaded so far
                                  ;  others - --Nuserved

                                ;; Display bootup identification
0000001C                          display_bootup_id:
0000001C  0E                        push    cs														; Copy CS: to DS: and ES: (a unified system)
0000001D  0E                        push    cs
0000001E  1F                        pop     ds
0000001F  07                        pop     es
                                	; Video services INT 10h, write string function for ax=1301h
00000020  B80113                    mov     ax,01301h
00000023  BB0700                    mov     bx,7													; Color 7, standard low-intensity white
00000026  B90600                    mov     cx,offset Boot_Message_End - offset Boot_Message		; Length of text to display
00000029  33D2                      xor     dx,dx                                                   ; Begin at dh=0, dl=0, equals (0,0) on screen
0000002B  BDD701                    mov     bp,offset Boot_Message									; Message to display
0000002E  CD10                      int     10h														; Ask video BIOS to do it


                                ;; Reads 3x 512 bytes, loads the Data Table, Name Pool and Resource Pool
                                ;; BIOS disk read of physical disk sectors 2, 3 and 4 (plus the optional real-mode debugger if included, see note below)
00000030                          Read_Sectors:
00000030  B80302                    mov     ax,0200h + 03                                           ; Read 3 sectors, one each for DT, NP & RP
00000033  680008                    push    word ptr 0800h                                          ; Store at 0800:0000h, or 8000h
00000036  07                        pop     es
00000037  33DB                      xor     bx,bx
00000039  B90200                    mov     cx,0002h                                                ; track 0/sector 2
0000003C  33D2                      xor     dx,dx                                                   ; head 0/drive 0
0000003E  CD13                      int     13h                                                     ; Read data
00000040  7302                      jnc     Read_Sectors1											; carry? is low if no error
00000042  EBEC                      jmp     Read_Sectors											; If error, try again
                                	
00000044                          Read_Sectors1:
                                ;; Note - Right here is where the LOAD_XDEBUG() function would go if a debugger is required (see code in SAVE.ASP)


00000044                          Parse_Entry_Begin:
                                ;; Identify which entries are load-bootable
00000044  680008                    push    word ptr 0800h                                          ; Set ES to point to the DT
00000047  07                        pop     es
00000048  BE0204                    mov     si,(512 * 2) + 2                                        ; Pointer to RP (stored at 0800:0000 + (512*2) (from the BIOS disk read above))
0000004B  66BAF2010000              mov     edx,offset end_of_data_label                            ; Get our starting offset from the memory variable
00000051  33C9                      xor     cx,cx
00000053  BF0200                    mov     di,2													; First two bytes of DT are pointer to next DT, which isn't used by boot loader
                                  ; Right now, es:[si] - Pointer to RP
                                  ;            es:[di] - Pointer to DT
                                	
                                ;-[ loop ]------
                                ; Iterating through es:[di] to read DT data
                                ; Note:  See "BOOT DT STRUCTURE" in equates.asp for information on this layout
00000056                          Top_Loop:
                                      ; es:[di] - iterate through DT
00000056  26803D80                      cmp     byte ptr es:[di],128                                ; Is this an entry to load at boot-time?
0000005A  7571                          jnz     Next_Item                                           ; No if branch

                                      ; This is an entry to load at boot time
                                	  ; Now, test if it's a replacement boot loader, one to replace this 512-byte version
0000005C  268A650A                      mov     ah,byte ptr es:[di+10]                              ; Get the boot attribute byte
00000060  8866EF                        mov     byte ptr [bp + _DT_identifier],ah                   ; Store for future use
00000063  80FC05                        cmp     ah,0101b                                            ; Is it a special boot loader (this replaces this program as boot loader, and transfers control there)
00000066  7507                          jnz     Load_Immediately                                    ; No if branch
                                		
00000068                              Boot_Loader_Found:
                                      ; Is is a boot loader, we load this and transfer control
00000068  BAF201                        mov     dx,offset end_of_data_label                         ; Restore the original value
0000006B  33C9                          xor     cx,cx                                               ; Sortof fake out any previous loads that might've taken place
0000006D  EB05                          jmp     Do_This_One                                         ; Continue on and load this one
                                		
0000006F                              Load_Immediately:
0000006F  F6C401                        test    ah,1b                                               ; Should we load it immediately?
00000072  7459                          jz      Next_Item                                           ; No if branch
                                      ; Yes, load immediately, goes into memory and is there for initial startup
                                	  
00000074                              Boot_Program_Found:
00000074                              Do_This_One:
                                	  ; es:[si] - Iterates through RP entries
00000074  8BDE                          mov     bx,si
00000076  26035D08                      add     bx,word ptr es:[di+_BOOT_DT_rp_offset]              ; Store the data structure in the following format:
                                                                                                    ; See the complete breakdown of this structure at end of file
0000007A  66268B07                      mov     eax,dword ptr es:[bx]                               ; 0-3, File size (in bytes)
0000007E  67668902                      mov     dword ptr [edx+_BOOT_PB_size],eax

00000082  66268B4704                    mov     eax,dword ptr es:[bx+_BOOT_PB_main]                 ; 4-7, Offset into executable for main() (where to jmp far)
00000087  6766894204                    mov     dword ptr [edx+_BOOT_PB_main],eax

0000008C  66268B4708                    mov     eax,dword ptr es:[bx+_BOOT_PB_requestor]            ; 8-11, Offset into executable for requestor()
00000091  6766894208                    mov     dword ptr [edx+_BOOT_PB_requestor],eax

00000096  66268B470C                    mov     eax,dword ptr es:[bx+_BOOT_PB_start_head]           ; 12-15, Start Head/Track/Sector/not used
0000009B  676689420C                    mov     dword ptr [edx+_BOOT_PB_start_head],eax

000000A0  66268B4710                    mov     eax,dword ptr es:[bx+_BOOT_PB_end_head]             ; 16-20, End Head/Track/Sector/not used
000000A5  6766894210                    mov     dword ptr [edx+_BOOT_PB_end_head],eax               ;        * Note:  This information is *NOT USED* during bootup

000000AA  268B4514                      mov     ax,word ptr es:[di+_BOOT_PB_entry_type]             ; 20, Entry type
000000AE  67894214                      mov     word ptr [edx+_BOOT_PB_entry_type],ax

000000B2  67897A1A                      mov     word ptr [edx+_BOOT_PB_dt_offset],di                ; 26, DT offset for this entry
000000B6  67836A1A02                    sub     word ptr [edx+_BOOT_PB_dt_offset],2

000000BB  268B451C                      mov     ax,word ptr es:[di+_BOOT_PB_crc16]                  ; 28, CRC16
000000BF  6789421C                      mov     word ptr [edx+_BOOT_PB_crc16],ax

000000C3  83C220                        add     dx,_BOOT_PB_structure_size                          ; Move to the next one
000000C6  41                            inc     cx                                                  ; Increase our count
000000C7  807EEF05                      cmp     byte ptr [bp + _DT_identifier],0101b                ; If this is a special boot loader then we don't need to load any more programs, just this one
000000CB  7414                          jz      Load_It                                             ; It is a special boot loader if branch
000000CD                          Next_Item:
000000CD  83C710                    add     di,16                                                   ; Move to the next item in the DT
000000D0  81FF0002                  cmp     di,512                                                  ; Are we beyond the size of the DT?
000000D4  7C80                      jl      Top_Loop                                                ; No if branch
                                ;---------------


                                  ; We're done with the first DT
000000D6  67C64214FF                mov     byte ptr [edx+_BOOT_PB_entry_type],0ffh                 ; Terminate our listing
000000DB  0BC9                      or      cx,cx
000000DD  0F84DD00                  jz      Reboot_With_Message_And_Key                             ; If branch here there then no were bootable record(s) found

                                ;; Load the data from the disk
000000E1                          Load_It:                                                          ; Load at 10000h, or 64k
000000E1  2E8916E301                mov     total_bp_bytes,dx
000000E6  2E812EE301F101            sub     total_bp_bytes,offset parameter_block
000000ED  66BEF2010000              mov     esi,offset end_of_data_label                            ; Get the pointer to load information
000000F3  66C746E400000100          mov     dword ptr [bp + _LOAD_OFFSET],10000h
                                	
                                	
000000FB                          Read_Next_File:
000000FB  668B46E4                  mov     eax,dword ptr [bp + _LOAD_OFFSET]
000000FF  66894416                  mov     dword ptr [si+_BOOT_PB_linear_offset],eax
00000103  66C746E000000000          mov     dword ptr [bp + _BYTES_LOADED],0                        ; Reset our "bytes loaded so far" count
                                	
0000010B                          Read_Next_Sector:
0000010B  6633C9                    xor     ecx,ecx
0000010E  6633DB                    xor     ebx,ebx

00000111  8A740C                    mov     dh,byte ptr [si+_BOOT_PB_start_head]                    ; Head
00000114  8A6C0D                    mov     ch,byte ptr [si+_BOOT_PB_start_track]                   ; Track
00000117  8A4C0E                    mov     cl,byte ptr [si+_BOOT_PB_start_sector]                  ; Sector
0000011A  32D2                      xor     dl,dl                                                   ; drive

0000011C  680009                    push    word ptr 0900h                                          ; Load this sector of data to 9000h
0000011F  07                        pop     es
00000120  33DB                      xor     bx,bx

00000122  B80102                    mov     ax,0201h                                                ; BIOS Read disk sectors/read 1
00000125  CD13                      int     13h                                                     ; Read it
00000127  7308                      jnc     @F
00000129  80FC06                    cmp     ah,6
0000012C  74DD                      jz      Read_Next_Sector
                                ;    jmp     Read_Next_Sector
0000012E  E98D00                    jmp     Reboot_With_Message_And_Key
00000131                          @@:
                                  ; Right now the file was loaded to 09000h, we need to copy it to the correct location
                                  ; So, we do that here
00000131  56                        push    si
00000132  1E                        push    ds

00000133  06                        push    es
00000134  1F                        pop     ds
00000135  33F6                      xor     si,si
                                  ; Get es:[di] - far ptr to where it's supposed to go
00000137  668B46E4                  mov     eax,dword ptr [bp + _LOAD_OFFSET]                      ; Memory location to load into es:[bx]
0000013B  8BF8                      mov     di,ax
0000013D  83E70F                    and     di,0fh
00000140  66C1E804                  shr     eax,4
00000144  8EC0                      mov     es,ax
00000146  B90002                    mov     cx,512
                                  ; Right now, es:[di] - far ptr to where it's supposed to go
00000149  FC                        cld
0000014A  F3A4                      rep     movsb

0000014C  1F                        pop     ds
0000014D  5E                        pop     si

0000014E  66BB00020000              mov     ebx,512                                                 ; Bytes_per_sector
00000154  66015EE4                  add     dword ptr [bp + _LOAD_OFFSET],ebx                       ; Increase the offset by the bytes per sector
00000158  66015EE0                  add     dword ptr [bp + _BYTES_LOADED],ebx                      ; Increase the number of bytes loaded so far
0000015C  668B56E0                  mov     edx,dword ptr [bp + _BYTES_LOADED]
00000160  663B14                    cmp     edx,dword ptr [si]                                      ; Total number of bytes to load
00000163  732D                      jae     Check_More_Boot_Programs

00000165  FE440E                    inc     byte ptr [si+_BOOT_PB_start_sector]
00000168  2EA0E201                  mov     al,cs:sectors
0000016C  38440E                    cmp     byte ptr [si+_BOOT_PB_start_sector],al
0000016F  7E9A                      jle     Read_Next_Sector
00000171  C6440E01                  mov     byte ptr [si+_BOOT_PB_start_sector],1                   ; We're passed the last sector

                                  ; Display a dot each time we read an entire track for one head
00000175  60                        pusha
00000176  B82E0E                    mov     ax,00e2eh                                               ; Write character (2eh = ".")
00000179  BB1F00                    mov     bx,31                                                   ; bh=page, bl=color
0000017C  CD10                      int     10h
0000017E  61                        popa
0000017F  FE440C                    inc     byte ptr [si+_BOOT_PB_start_head]
00000182  807C0C01                  cmp     byte ptr [si+_BOOT_PB_start_head],1
00000186  7E83                      jle     Read_Next_Sector
00000188  C6440C00                  mov     byte ptr [si+_BOOT_PB_start_head],0                     ; We're past the maximum head

0000018C  FE440D                    inc     byte ptr [si+_BOOT_PB_start_track]                      ; Move to the next track
0000018F  E979FF                    jmp     Read_Next_Sector

00000192                          Check_More_Boot_Programs:
00000192  83C620                    add     si,_BOOT_PB_structure_size
00000195  8346E410                  add     dword ptr [bp + _LOAD_OFFSET],16                        ; Paragraph align the next item (if any)
00000199  668166E4F0FFFFFF          and     dword ptr [bp + _LOAD_OFFSET],0fffffff0h
000001A1  807C14FF                  cmp     byte ptr [si+_BOOT_PB_entry_type],0ffh
000001A5  0F8552FF                  jne     Read_Next_File

000001A9                          Finished:
000001A9  0E                        push    cs
000001AA  1F                        pop     ds
000001AB  BEF101                    mov     si,offset parameter_block
000001AE  2E8B0EE301                mov     cx,total_bp_bytes
000001B3  668B56E4                  mov     edx,dword ptr [bp + _LOAD_OFFSET]

                                  ; Transfer control to linear 10000h
000001B7  680010                    push    word ptr 1000h                                          ; cs
000001BA  680000                    push    word ptr 0                                              ; ip
000001BD  CB                        retf
                                  ; The program will never return here...
                                  ; This is the absolute end of the boot code


000001BE                          Reboot_With_Message_And_Key:
000001BE  0E                        push    cs
000001BF  07                        pop     es
000001C0  B80113                    mov     ax,01301h
000001C3  BB0700                    mov     bx,7													; Color 7, standard low-intensity white
000001C6  B90500                    mov     cx,offset Error_Message_End - offset Error_Message		; "Error" message
000001C9  BA0001                    mov     dx,00100h                                               ; Begin at dh=1, dl=0, equals (1,0) on screen
000001CC  BDDD01                    mov     bp,offset Error_Message
000001CF  CD10                      int     10h
                                	
000001D1                          Wait_For_Key:
000001D1  32E4                      xor     ah,ah
000001D3  CD16                      int     16h
                                	
000001D5                          Reboot:
000001D5  CD19                      int     19h

000001D7                          Boot_Message:
000001D7  45786F647573              db  "Exodus"
000001DD                          Boot_Message_End:

000001DD                          Error_Message:
000001DD  4572726F72                db  "Error"
000001E2                          Error_Message_End:

                                ;; How many sectors to read
000001E2  12                        sectors         db  18
000001E3  0000                      total_bp_bytes  dw  0

                                ;; Locations of boot DT/NP/RP, each 512 bytes in length
000001E5  00800000                  dt_linear       dd 8000h
000001E9  00820000                  np_linear       dd 8200h
000001ED  00830000                  rp_linear       dd 8300h
000001F1                          parameter_block:
000001F1  41                        boot_drive      db  "A"                                         ; Drive letter the operating system was booting from

000001F2                          End_Of_Data_Label:

                                ;
                                ; The disk contains a 512-byte DT entry at a known location which contains
                                ; a repeating series of these structures, called the boot_parameter_block,
                                ; one for every file to load at startup.
                                ;
                                ; Note:  See "BOOT PARAMETER BLOCK STRUCTURE" section of equates.asp
                                ;
                                ; Bootable program structure
                                ; --------------------------
                                ; Repeated once entry for every "Exodus Boot Program" found in the first DT:
                                ;     Offset  Length    Decription
                                ;     ------  ------    -------------
                                ;       0       4       file size
                                ;       4       4       Offset for main()
                                ;       8       4       Offset for requestor()
                                ;
                                ;       12      1       (starting) Head
                                ;       13      1       (starting) Track
                                ;       14      1       (starting) Sector
                                ;       15      1       --Nuserved
                                ;
                                ;       16      1       (ending) Head
                                ;       17      1       (ending) Track
                                ;       18      1       (ending) Sector
                                ;       19      1       --Nuserved
                                ;
                                ;       20      1       Entry type
                                ;       21      1       --Nuserved
                                ;
                                ;       22      4       Linear offset in memory where this file starts
                                ;       26      2       DT offset
                                ;       28      2       CRC16 (copied from DT)
                                ;       30      2       --Nuserved
                                ;     Total = 32 bytes
                                ;

                                ; File needs to be exactly 512 bytes
                                    ORG 511
000001FF  00                    	db	0

00000200                        _MAIN   ENDS

                                END


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_MAIN  . . . . . . . . . . . . .        16 Bit   0200     Word    Public  'CODE'
DGROUP . . . . . . . . . . . . .        GROUP
_TEXT  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'CODE'
_DATA  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'DATA'


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             0h 
@Model . . . . . . . . . . . . .        Number             1h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   DGROUP
@stack . . . . . . . . . . . . .        Text   DGROUP
Boot_Loader_Found  . . . . . . .        L Near            68h _MAIN 
Boot_Message . . . . . . . . . .        L Near           1D7h _MAIN 
Boot_Message_End . . . . . . . .        L Near           1DDh _MAIN 
Boot_Program_Found . . . . . . .        L Near            74h _MAIN 
Check_More_Boot_Programs . . . .        L Near           192h _MAIN 
Do_This_One  . . . . . . . . . .        L Near            74h _MAIN 
Error_Message  . . . . . . . . .        L Near           1DDh _MAIN 
Error_Message_End  . . . . . . .        L Near           1E2h _MAIN 
Finished . . . . . . . . . . . .        L Near           1A9h _MAIN 
L&_0001  . . . . . . . . . . . .        L Near           131h _MAIN 
Load_Immediately . . . . . . . .        L Near            6Fh _MAIN 
Load_It  . . . . . . . . . . . .        L Near            E1h _MAIN 
Next_Item  . . . . . . . . . . .        L Near            CDh _MAIN 
Parse_Entry_Begin  . . . . . . .        L Near            44h _MAIN 
Read_Next_File . . . . . . . . .        L Near            FBh _MAIN 
Read_Next_Sector . . . . . . . .        L Near           10Bh _MAIN 
Read_Sectors . . . . . . . . . .        L Near            30h _MAIN 
Read_Sectors1  . . . . . . . . .        L Near            44h _MAIN 
Reboot . . . . . . . . . . . . .        L Near           1D5h _MAIN 
Reboot_With_Message_And_Key  . .        L Near           1BEh _MAIN 
Setup_Local_Variables  . . . . .        L Near            18h _MAIN 
Top_Loop . . . . . . . . . . . .        L Near            56h _MAIN 
Wait_For_Key . . . . . . . . . .        L Near           1D1h _MAIN 
_BOCHS1  . . . . . . . . . . . .        Number      12345678h 
_BOCHS2  . . . . . . . . . . . .        Number      87654321h 
_BOCHS_GET_MONO_CURSOR . . . . .        Number             1h 
_BOCHS_GET_MONO_MOUSE_XY . . . .        Number             0h 
_BOOT_DT_days  . . . . . . . . .        Number             1h 
_BOOT_DT_entry_type  . . . . . .        Number             Ah 
_BOOT_DT_np_offset . . . . . . .        Number             Bh 
_BOOT_DT_object_type . . . . . .        Number             0h 
_BOOT_DT_rp_offset . . . . . . .        Number             8h 
_BOOT_DT_seconds . . . . . . . .        Number             5h 
_BOOT_PB_crc16 . . . . . . . . .        Number            1Ch 
_BOOT_PB_dt_offset . . . . . . .        Number            1Ah 
_BOOT_PB_end_head  . . . . . . .        Number            10h 
_BOOT_PB_end_sector  . . . . . .        Number            12h 
_BOOT_PB_end_track . . . . . . .        Number            11h 
_BOOT_PB_entry_type  . . . . . .        Number            14h 
_BOOT_PB_linear_offset . . . . .        Number            16h 
_BOOT_PB_main  . . . . . . . . .        Number             4h 
_BOOT_PB_requestor . . . . . . .        Number             8h 
_BOOT_PB_size  . . . . . . . . .        Number             0h 
_BOOT_PB_start_head  . . . . . .        Number             Ch 
_BOOT_PB_start_sector  . . . . .        Number             Eh 
_BOOT_PB_start_track . . . . . .        Number             Dh 
_BOOT_PB_structure_size  . . . .        Number            20h 
_BOOT_RP_disk_offset . . . . . .        Number             Ch 
_BOOT_RP_end_head  . . . . . . .        Number            10h 
_BOOT_RP_end_sector  . . . . . .        Number            12h 
_BOOT_RP_end_track . . . . . . .        Number            11h 
_BOOT_RP_length  . . . . . . . .        Number             0h 
_BOOT_RP_main  . . . . . . . . .        Number             8h 
_BOOT_RP_nuserved  . . . . . . .        Number            10h 
_BOOT_RP_requestor . . . . . . .        Number             4h 
_BOOT_RP_start_head  . . . . . .        Number             Ch 
_BOOT_RP_start_sector  . . . . .        Number             Eh 
_BOOT_RP_start_track . . . . . .        Number             Dh 
_BYTES_LOADED  . . . . . . . . .        Number      FFFFFFE0h 
_CW_DM . . . . . . . . . . . . .        Number             2h 
_CW_IM . . . . . . . . . . . . .        Number             1h 
_CW_INFINITY . . . . . . . . . .        Number          1000h 
_CW_OM . . . . . . . . . . . . .        Number             8h 
_CW_PM . . . . . . . . . . . . .        Number            20h 
_CW_PRECISION  . . . . . . . . .        Number           300h 
_CW_PRECISION_00 . . . . . . . .        Number             0h 
_CW_PRECISION_01 . . . . . . . .        Number           100h 
_CW_PRECISION_10 . . . . . . . .        Number           200h 
_CW_PRECISION_11 . . . . . . . .        Number           300h 
_CW_ROUNDING . . . . . . . . . .        Number           C00h 
_CW_ROUNDING_00  . . . . . . . .        Number             0h 
_CW_ROUNDING_01  . . . . . . . .        Number           400h 
_CW_ROUNDING_10  . . . . . . . .        Number           800h 
_CW_ROUNDING_11  . . . . . . . .        Number           C00h 
_CW_UM . . . . . . . . . . . . .        Number            10h 
_CW_ZM . . . . . . . . . . . . .        Number             4h 
_DT_identifier . . . . . . . . .        Number      FFFFFFEFh 
_EFLAGS_ACF  . . . . . . . . . .        Number             4h 
_EFLAGS_ACF_MASK . . . . . . . .        Number            10h 
_EFLAGS_CF . . . . . . . . . . .        Number             0h 
_EFLAGS_CF_MASK  . . . . . . . .        Number             1h 
_EFLAGS_DF . . . . . . . . . . .        Number             Ah 
_EFLAGS_DF_MASK  . . . . . . . .        Number           400h 
_EFLAGS_IF . . . . . . . . . . .        Number             9h 
_EFLAGS_IF_MASK  . . . . . . . .        Number           200h 
_EFLAGS_IOPL . . . . . . . . . .        Number             Ch 
_EFLAGS_IOPL_MASK  . . . . . . .        Number          3000h 
_EFLAGS_NT . . . . . . . . . . .        Number             Eh 
_EFLAGS_NT_MASK  . . . . . . . .        Number          4000h 
_EFLAGS_OF . . . . . . . . . . .        Number             Bh 
_EFLAGS_OF_MASK  . . . . . . . .        Number           800h 
_EFLAGS_PF . . . . . . . . . . .        Number             2h 
_EFLAGS_PF_MASK  . . . . . . . .        Number             4h 
_EFLAGS_RF . . . . . . . . . . .        Number            10h 
_EFLAGS_RF_MASK  . . . . . . . .        Number         10000h 
_EFLAGS_SF . . . . . . . . . . .        Number             7h 
_EFLAGS_SF_MASK  . . . . . . . .        Number            80h 
_EFLAGS_TF . . . . . . . . . . .        Number             8h 
_EFLAGS_TF_MASK  . . . . . . . .        Number           100h 
_EFLAGS_VM . . . . . . . . . . .        Number            11h 
_EFLAGS_VM_MASK  . . . . . . . .        Number         20000h 
_EFLAGS_ZF . . . . . . . . . . .        Number             6h 
_EFLAGS_ZF_MASK  . . . . . . . .        Number            40h 
_END_HEAD  . . . . . . . . . . .        Number      FFFFFFF1h 
_END_SECTOR  . . . . . . . . . .        Number      FFFFFFF0h 
_END_TRACK . . . . . . . . . . .        Number      FFFFFFF2h 
_EXODUS_BRACKET_HANDLE . . . . .        Number            10h 
_EXODUS_BRACKET_LENGTH . . . . .        Number            1Eh 
_EXODUS_BRACKET_NAME . . . . . .        Number             Ch 
_EXODUS_BRACKET_NEXT . . . . . .        Number             0h 
_EXODUS_BRACKET_PAREN_CASKS  . .        Number             4h 
_EXODUS_BRACKET_REQUESTOR  . . .        Number            14h 
_EXODUS_BRACKET_REQUESTOR_FUNC .        Number            16h 
_EXODUS_BRACKET_SCRATCH_AREA . .        Number            1Ah 
_EXODUS_BRACKET_TOTAL_PARENS . .        Number             8h 
_EXODUS_DATA_DATA_ITEM_LENGTH  .        Number             8h 
_EXODUS_DATA_DATA_ITEM_SOURCE  .        Number             4h 
_EXODUS_DATA_LENGTH  . . . . . .        Number             Ch 
_EXODUS_DATA_NEXT  . . . . . . .        Number             0h 
_EXODUS_INI_FIRST_BRACKET  . . .        Number             0h 
_EXODUS_INI_HEADER_LENGTH  . . .        Number            10h 
_EXODUS_INI_TOTAL_BRACKET_GROUPS         Number             8h 
_EXODUS_INI_TOTAL_BYTES  . . . .        Number             4h 
_EXODUS_INI_TOTAL_PAREN_CASKS  .        Number             Ch 
_EXODUS_INTS_size  . . . . . . .        Number             2h 
_EXODUS_MEM_base . . . . . . . .        Number             4h 
_EXODUS_MEM_gdt  . . . . . . . .        Number             Ch 
_EXODUS_MEM_ldt  . . . . . . . .        Number             Eh 
_EXODUS_MEM_limit  . . . . . . .        Number             8h 
_EXODUS_MEM_size . . . . . . . .        Number            10h 
_EXODUS_MEM_type . . . . . . . .        Number             0h 
_EXODUS_PAREN_DATA_ITEMS . . . .        Number             8h 
_EXODUS_PAREN_HANDLE . . . . . .        Number            18h 
_EXODUS_PAREN_LENGTH . . . . . .        Number            26h 
_EXODUS_PAREN_NEXT . . . . . . .        Number             0h 
_EXODUS_PAREN_NEXT_SAME_LINE . .        Number             4h 
_EXODUS_PAREN_REQUESTOR  . . . .        Number            1Ah 
_EXODUS_PAREN_REQUESTOR_FUNC . .        Number            1Eh 
_EXODUS_PAREN_SCRATCH_AREA . . .        Number            22h 
_EXODUS_PAREN_SOURCE_LINE  . . .        Number            10h 
_EXODUS_PAREN_SOURCE_LINE_LENGTH         Number            14h 
_EXODUS_PAREN_TOTAL_DATA_ITEMS .        Number             Ch 
_EXODUS_PORTS_size . . . . . . .        Number            10h 
_LOAD_OFFSET . . . . . . . . . .        Number      FFFFFFE4h 
_MAX_PRIMATIVE . . . . . . . . .        Number           BB3h 
_MIN_PRIMATIVE . . . . . . . . .        Number            C8h 
_START_HEAD  . . . . . . . . . .        Number      FFFFFFF4h 
_START_SECTOR  . . . . . . . . .        Number      FFFFFFF3h 
_START_TRACK . . . . . . . . . .        Number      FFFFFFF5h 
_SW_BUSY . . . . . . . . . . . .        Number          8000h 
_SW_C0 . . . . . . . . . . . . .        Number           100h 
_SW_C1 . . . . . . . . . . . . .        Number           200h 
_SW_C2 . . . . . . . . . . . . .        Number           400h 
_SW_C3 . . . . . . . . . . . . .        Number          4000h 
_SW_DE . . . . . . . . . . . . .        Number             2h 
_SW_ERROR_SUMMARY  . . . . . . .        Number            80h 
_SW_IE . . . . . . . . . . . . .        Number             1h 
_SW_OE . . . . . . . . . . . . .        Number             8h 
_SW_PE . . . . . . . . . . . . .        Number            20h 
_SW_STACK_FAULT  . . . . . . . .        Number            40h 
_SW_TOS  . . . . . . . . . . . .        Number          3800h 
_SW_UE . . . . . . . . . . . . .        Number            10h 
_SW_ZE . . . . . . . . . . . . .        Number             4h 
_SYSTEM_182S_OF_A_SECOND . . . .        Number             Bh 
_SYSTEM_BUILD  . . . . . . . . .        Number            12h 
_SYSTEM_DAY  . . . . . . . . . .        Number             Ch 
_SYSTEM_DAY_OF_YEAR  . . . . . .        Number            10h 
_SYSTEM_HOURS  . . . . . . . . .        Number             8h 
_SYSTEM_MINUTES  . . . . . . . .        Number             9h 
_SYSTEM_MONO_VIDEO_MODE  . . . .        Number            25h 
_SYSTEM_MONTH  . . . . . . . . .        Number             Dh 
_SYSTEM_SECONDS  . . . . . . . .        Number             Ah 
_SYSTEM_SECONDS_SINCE_BOOTUP . .        Number             0h 
_SYSTEM_SECONDS_SINCE_MIDNIGHT .        Number             4h 
_SYSTEM_TOTAL_MEMORY . . . . . .        Number            1Ch 
_SYSTEM_VGA_HORIZONTAL . . . . .        Number            20h 
_SYSTEM_VGA_VERTICAL . . . . . .        Number            22h 
_SYSTEM_VGA_VIDEO_MODE . . . . .        Number            24h 
_SYSTEM_YEAR . . . . . . . . . .        Number             Eh 
_SYSTEM_i_BASE . . . . . . . . .        Number           812h 
_SYSTEM_i_CODE_GDT_OFFSET  . . .        Number           824h 
_SYSTEM_i_DATA_GDT_OFFSET  . . .        Number           828h 
_SYSTEM_i_DWORD_TO_COPY  . . . .        Number           81Ah 
_SYSTEM_i_FATAL  . . . . . . . .        Number           800h 
_SYSTEM_i_GDT_TO_ASSIGN  . . . .        Number           834h 
_SYSTEM_i_IRQ6_INDICATOR . . . .        Number           810h 
_SYSTEM_i_IRQ6_INDICATOR_LAST  .        Number           811h 
_SYSTEM_i_LAST_GDT_REFERENCED  .        Number           81Ch 
_SYSTEM_i_LIMIT  . . . . . . . .        Number           816h 
_SYSTEM_i_MAIN_GDT_OFFSET  . . .        Number           82Ch 
_SYSTEM_i_REQUESTOR_GDT_OFFSET .        Number           830h 
_SYSTEM_i_SCRATCH_DWORD1 . . . .        Number           BFCh 
_SYSTEM_i_SCRATCH_DWORD2 . . . .        Number           BF8h 
_SYSTEM_i_TASKS_BY_ERROR . . . .        Number           80Ch 
_SYSTEM_i_TASKS_BY_USER  . . . .        Number           808h 
_SYSTEM_i_TASKS_CREATED  . . . .        Number           804h 
_SYSTEM_i_USER_GDT_TO_ASSIGN . .        Number           836h 
_TSS_BACK_LINK . . . . . . . . .        Number             0h 
_TSS_CR3 . . . . . . . . . . . .        Number            1Ch 
_TSS_CS  . . . . . . . . . . . .        Number            4Ch 
_TSS_DS  . . . . . . . . . . . .        Number            54h 
_TSS_EAX . . . . . . . . . . . .        Number            28h 
_TSS_EBP . . . . . . . . . . . .        Number            3Ch 
_TSS_EBX . . . . . . . . . . . .        Number            34h 
_TSS_ECX . . . . . . . . . . . .        Number            2Ch 
_TSS_EDI . . . . . . . . . . . .        Number            44h 
_TSS_EDX . . . . . . . . . . . .        Number            30h 
_TSS_EFLAGS  . . . . . . . . . .        Number            24h 
_TSS_EIP . . . . . . . . . . . .        Number            20h 
_TSS_ES  . . . . . . . . . . . .        Number            48h 
_TSS_ESI . . . . . . . . . . . .        Number            40h 
_TSS_ESP . . . . . . . . . . . .        Number            38h 
_TSS_ESP0  . . . . . . . . . . .        Number             4h 
_TSS_ESP1  . . . . . . . . . . .        Number             Ch 
_TSS_ESP2  . . . . . . . . . . .        Number            14h 
_TSS_FPU_SAVE_AREA . . . . . . .        Number            68h 
_TSS_FS  . . . . . . . . . . . .        Number            58h 
_TSS_GS  . . . . . . . . . . . .        Number            5Ch 
_TSS_IO_MAP  . . . . . . . . . .        Number            66h 
_TSS_LDT . . . . . . . . . . . .        Number            60h 
_TSS_SS  . . . . . . . . . . . .        Number            50h 
_TSS_SS0 . . . . . . . . . . . .        Number             8h 
_TSS_SS1 . . . . . . . . . . . .        Number            10h 
_TSS_SS2 . . . . . . . . . . . .        Number            18h 
_TSS_TRAP_BIT  . . . . . . . . .        Number            64h 
_TSS_TRAP_BIT_MASK . . . . . . .        Number             1h 
_cgTEMP_PRIMATIVE_MAIN . . . . .        Number          5DA0h 
_cgTEMP_PRIMATIVE_REQUESTOR  . .        Number          5DA8h 
_csTEMP_PRIMATIVE  . . . . . . .        Number          5DB0h 
_dsTEMP_PRIMATIVE  . . . . . . .        Number          5DB8h 
_firstASSIGNMENT . . . . . . . .        Number            32h 
_firstUSER_ASSIGNMENT  . . . . .        Number           BB8h 
_lastASSIGNMENT  . . . . . . . .        Number            C7h 
_lastGDT . . . . . . . . . . . .        Number           FFFh 
_lastUSER_ASSIGNMENT . . . . . .        Number           FFFh 
_sALL_MEM  . . . . . . . . . . .        Number            40h 
_sALL_MEM_base . . . . . . . . .        Number             0h 
_sALL_MEM_limit  . . . . . . . .        Number      FFFFFFFFh 
_sCODE . . . . . . . . . . . . .        Number            20h 
_sCODE_base  . . . . . . . . . .        Number         10000h 
_sCODE_limit . . . . . . . . . .        Number         40000h 
_sDATA . . . . . . . . . . . . .        Number            48h 
_sDATA_base  . . . . . . . . . .        Number         10000h 
_sDATA_limit . . . . . . . . . .        Number         30000h 
_sDEBI_dt  . . . . . . . . . . .        Number           138h 
_sDEBI_dt_base . . . . . . . . .        Number        240000h 
_sDEBI_dt_limit  . . . . . . . .        Number          8000h 
_sDEBI_memory  . . . . . . . . .        Number            D8h 
_sDEBI_memory_base . . . . . . .        Number        279400h 
_sDEBI_memory_limit  . . . . . .        Number          8000h 
_sDEBI_np  . . . . . . . . . . .        Number           140h 
_sDEBI_np_base . . . . . . . . .        Number        248000h 
_sDEBI_np_limit  . . . . . . . .        Number          8000h 
_sDEBI_rp  . . . . . . . . . . .        Number           148h 
_sDEBI_rp_base . . . . . . . . .        Number        250000h 
_sDEBI_rp_limit  . . . . . . . .        Number          8000h 
_sDEBI_screen  . . . . . . . . .        Number            D0h 
_sDEBI_screen2 . . . . . . . . .        Number            F0h 
_sDEBI_screen2_base  . . . . . .        Number        258000h 
_sDEBI_screen2_limit . . . . . .        Number         28000h 
_sDEBI_screen_base . . . . . . .        Number        281400h 
_sDEBI_screen_limit  . . . . . .        Number          8000h 
_sDEBI_temp  . . . . . . . . . .        Number            F8h 
_sEXODUS_INI . . . . . . . . . .        Number           190h 
_sEXODUS_INI_ERRORS  . . . . . .        Number           198h 
_sEXODUS_INI_ERRORS_base . . . .        Number        210000h 
_sEXODUS_INI_ERRORS_limit  . . .        Number          4000h 
_sEXODUS_INI_base  . . . . . . .        Number        200000h 
_sEXODUS_INI_limit . . . . . . .        Number         10000h 
_sEXODUS_INTS  . . . . . . . . .        Number            60h 
_sEXODUS_INTS_base . . . . . . .        Number         97E00h 
_sEXODUS_INTS_limit  . . . . . .        Number           200h 
_sEXODUS_MEM . . . . . . . . . .        Number            50h 
_sEXODUS_MEM_base  . . . . . . .        Number         70C00h 
_sEXODUS_MEM_limit . . . . . . .        Number          4000h 
_sEXODUS_OBJECTS . . . . . . . .        Number           100h 
_sEXODUS_OBJECTS_base  . . . . .        Number         50000h 
_sEXODUS_OBJECTS_limit . . . . .        Number          8000h 
_sEXODUS_PORTS . . . . . . . . .        Number            58h 
_sEXODUS_PORTS_base  . . . . . .        Number         6CC00h 
_sEXODUS_PORTS_limit . . . . . .        Number          4000h 
_sEXODUS_REQUESTOR . . . . . . .        Number            B0h 
_sEXODUS_SLAVE_TASK_GATE . . . .        Number            88h 
_sEXODUS_SLAVE_TSS . . . . . . .        Number            80h 
_sEXODUS_SLAVE_TSS_base  . . . .        Number         68200h 
_sEXODUS_SLAVE_TSS_limit . . . .        Number           100h 
_sEXODUS_TASK_GATE . . . . . . .        Number            78h 
_sEXODUS_TSS . . . . . . . . . .        Number            70h 
_sEXODUS_TSS_base  . . . . . . .        Number         68100h 
_sEXODUS_TSS_limit . . . . . . .        Number           100h 
_sFLOPPY_TRACK . . . . . . . . .        Number            E0h 
_sFLOPPY_TRACK_base  . . . . . .        Number         74C00h 
_sFLOPPY_TRACK_limit . . . . . .        Number          4800h 
_sGDT  . . . . . . . . . . . . .        Number            10h 
_sGDT_base . . . . . . . . . . .        Number           800h 
_sGDT_init . . . . . . . . . . .        Number            C7h 
_sGDT_limit  . . . . . . . . . .        Number          8000h 
_sGRAPHICS . . . . . . . . . . .        Number            28h 
_sGRAPHICS_base  . . . . . . . .        Number         A0000h 
_sGRAPHICS_limit . . . . . . . .        Number         10000h 
_sIDT  . . . . . . . . . . . . .        Number             8h 
_sIDT_base . . . . . . . . . . .        Number         8A000h 
_sIDT_limit  . . . . . . . . . .        Number           800h 
_sMONO . . . . . . . . . . . . .        Number            30h 
_sMONO_base  . . . . . . . . . .        Number         B0000h 
_sMONO_limit . . . . . . . . . .        Number          8000h 
_sPRIMATIVES . . . . . . . . . .        Number            98h 
_sPRIMATIVES_base  . . . . . . .        Number         8D380h 
_sPRIMATIVES_limit . . . . . . .        Number          4000h 
_sPRIMATIVE_LOAD_INFO  . . . . .        Number            A0h 
_sPRIMATIVE_LOAD_INFO_base . . .        Number         8C380h 
_sPRIMATIVE_LOAD_INFO_limit  . .        Number          1000h 
_sSTACK  . . . . . . . . . . . .        Number            18h 
_sSTACK0 . . . . . . . . . . . .        Number           120h 
_sSTACK0_base  . . . . . . . . .        Number         95380h 
_sSTACK0_limit . . . . . . . . .        Number          2000h 
_sSTACK1 . . . . . . . . . . . .        Number           128h 
_sSTACK1_base  . . . . . . . . .        Number         93380h 
_sSTACK1_limit . . . . . . . . .        Number          2000h 
_sSTACK2 . . . . . . . . . . . .        Number           130h 
_sSTACK2_base  . . . . . . . . .        Number         91380h 
_sSTACK2_limit . . . . . . . . .        Number          2000h 
_sSTACK_base . . . . . . . . . .        Number         98000h 
_sSTACK_limit  . . . . . . . . .        Number          8000h 
_sSYSTEM . . . . . . . . . . . .        Number            A8h 
_sSYSTEM_RING1 . . . . . . . . .        Number            B8h 
_sSYSTEM_RING2 . . . . . . . . .        Number            C0h 
_sSYSTEM_RING3 . . . . . . . . .        Number            C8h 
_sSYSTEM_USER_limit  . . . . . .        Number           800h 
_sSYSTEM_base  . . . . . . . . .        Number         89400h 
_sSYSTEM_limit . . . . . . . . .        Number           C00h 
_sTASK_STACK . . . . . . . . . .        Number           118h 
_sTASK_STACK_base  . . . . . . .        Number        220000h 
_sTASK_STACK_limit . . . . . . .        Number          8000h 
_sTASK_SWITCH_TASK_GATE  . . . .        Number           110h 
_sTASK_SWITCH_TSS  . . . . . . .        Number           108h 
_sTASK_SWITCH_TSS_base . . . . .        Number         68000h 
_sTASK_SWITCH_TSS_limit  . . . .        Number           100h 
_sTASK_SYSTEM  . . . . . . . . .        Number           1A0h 
_sTASK_SYSTEM_base . . . . . . .        Number        210000h 
_sTASK_SYSTEM_limit  . . . . . .        Number         10000h 
_sVGA  . . . . . . . . . . . . .        Number            38h 
_sVGA_BACKUP . . . . . . . . . .        Number            E8h 
_sVGA_BACKUP_base  . . . . . . .        Number         60000h 
_sVGA_BACKUP_limit . . . . . . .        Number          8000h 
_sVGA_base . . . . . . . . . . .        Number         B8000h 
_sVGA_limit  . . . . . . . . . .        Number          8000h 
absolute_begin . . . . . . . . .        L Near             0h _MAIN 
boot_drive . . . . . . . . . . .        Byte             1F1h _MAIN 
display_bootup_id  . . . . . . .        L Near            1Ch _MAIN 
dt_linear  . . . . . . . . . . .        DWord            1E5h _MAIN 
end_of_data_label  . . . . . . .        L Near           1F2h _MAIN 
np_linear  . . . . . . . . . . .        DWord            1E9h _MAIN 
parameter_block  . . . . . . . .        L Near           1F1h _MAIN 
rp_linear  . . . . . . . . . . .        DWord            1EDh _MAIN 
sectors  . . . . . . . . . . . .        Byte             1E2h _MAIN 
start_of_code  . . . . . . . . .        L Near             Fh _MAIN 
total_bp_bytes . . . . . . . . .        Word             1E3h _MAIN 

boot.asm: 379 lines, 3 passes, 0 ms, 0 warnings, 0 errors
