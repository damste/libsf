// debi_mac.asp
//
// Low-Level Debi Debugger defined macros
//
// This file consists of these groupings:
//   a)  common macros
//   b)  screen object macros
//   c)  mouse object macros
//




;; Macros common to all items
macro @Start
{{
    u8   _START
  // Total = 1
}}

macro @End
{{
    u8   _END
  // Total = 1
}}




;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;;
;; Screen Object Macros
;;
;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// * Note:  The constants are defined in debi_eq.asp
macro @DrawWindow
|| name
{{
// Draws the window for whatever item is specified
    u8   _DRAW_WINDOW
    u32  offset name
  // Total = 5
}}

macro @AlwaysDrawWindow
|| name
{{
// Always draws the window for whatever item is specified
    u8   _DRAW_WINDOW_ALWAYS
    u32  offset name
  // Total = 5
}}

macro @DrawDebiLogo_at_pixel
|| x
|| y
{{
// Indicates how big this item's block of memory is in the _sDEBI_objects memory area
    u8   _DRAW_DEBI_LOGO
    u32  x
    u32  y
  // Total = 9
}}

macro @ObjectMemSize
|| size
{{
// Indicates how big this item's block of memory is in the _sDEBI_objects memory area
    u8   _OBJECT_MEM_SIZE
    u8   size
  // Total = 2
}}

//@ObjectMemDefault   MACRO   type:req, parm1:REQ, parm2
;; Indicates a default condition
//    u8   _OBJECT_MEM_DEFAULT
//    u8   type
//    u32  parm1
//    IFNB <parm2>
//        u32  parm2
//    ELSE
//        u32  0ffffffffh
//    ENDIF
//  // Total = 10
//ENDM

macro @LoadTemp
|| type
|| loffset
{{
// Loads a temporary value from this item's portion of _sDEBI_objects memory
//
//       TYPE - indicates what type of temporary variable is being loaded
//    LOFFSET - offset in local memory where the pointer is taken from (usually 0 indicating the first item in temp space)
//
    u8   _LOAD_TEMP
    u8   type
    u32  loffset
  // Total = 6
}}

macro @DisplayTemp_relative
|| type
|| tempoffset
|| loffset
|| x
|| y
{{
// Used to display some data from a temporary value.  Prior to use an @LoadTemp must've been issued to setup the far pointer to
// access the memory.
//
//       TYPE - indicates what type of variable is being displayed
// TEMPOFFSET - offset relative to the @LoadTemp far ptr
//    LOFFSET - offset in local memory where the comparison is made (to highlight if it has changed)
//          X - X coordinate (in characters) relative to upper-left corner of window
//          Y - Y coordinate (in characters) relative to upper-left corner of window
//
    u8   _DISPLAY
    u8   _TEMP_RELATIVE
    u8   type
    u16  tempoffset
    u8   loffset
    u32  x * FONT_X
    u32  y * FONT_Y
    u16  0               // Nuserved
  // Total = 16
}}

macro @DisplayEBP_relative
|| type
|| ebpoffset
|| loffset
|| x
|| y
{{
// Used to dipslay a dword value.  Note that the type argument specifies what kind of EBP relative item it is.
//
//      TYPE - indicates what type of variable is being displayed
// EBPOFFSET - offset relative to the current EBP (Refer to DEBI_debug in debi.asm for information on stack arrangement)
//   LOFFSET - offset in local memory where the comparison is made (to highlight if it has changed)
//         X - X coordinate (in characters) relative to upper-left corner of window
//         Y - Y coordinate (in characters) relative to upper-left corner of window
//
    u8   _DISPLAY            // +0
    u8   _EBP_RELATIVE       // +1
    u8   type                // +2
    u16  ebpoffset           // +3
    u8   loffset             // +5
    u32  x * FONT_X          // +6
    u32  y * FONT_Y          // +10
    u16  0                   // +14, Nuserved
  // Total = 16
}}

macro @DisplayEBP_through_EBP_relative
|| type
|| ebpoffset
|| loffset
|| x
|| y
{{
// Used to dipslay a dword value.  Note that the type argument specifies what kind of EBP relative item it is.
//
//      TYPE - indicates what type of variable is being displayed
// EBPOFFSET - offset relative to the EBP derived from the stack (Refer to DEBI_debug() in debi.asm for info on stack arrangement)
//   LOFFSET - offset in local memory where the comparison is made (to highlight if it has changed)
//         X - X coordinate (in characters) relative to upper-left corner of window
//         Y - Y coordinate (in characters) relative to upper-left corner of window
//
    u8   _DISPLAY
    u8   _EBP_THROUGH_EBP_RELATIVE
    u8   type
    u16  ebpoffset
    u8   loffset
    u32  x * FONT_X
    u32  y * FONT_Y
    u16  0               // Nuserved
  // Total = 16
}}

macro @DisplayESP_through_EBP_relative
|| type
|| ebpoffset
|| loffset
|| x
|| y
{{
// Used to dipslay a dword value.  Note that the type argument specifies what kind of EBP relative item it is.
//
//      TYPE - indicates what type of variable is being displayed
// EBPOFFSET - offset relative to the EBP derived from the stack (Refer to DEBI_debug() in debi.asm for info on stack arrangement)
//   LOFFSET - offset in local memory where the comparison is made (to highlight if it has changed)
//         X - X coordinate (in characters) relative to upper-left corner of window
//         Y - Y coordinate (in characters) relative to upper-left corner of window
//
    u8   _DISPLAY
    u8   _ESP_THROUGH_EBP_RELATIVE
    u8   type
    u16  ebpoffset
    u8   loffset
    u32  x * FONT_X
    u32  y * FONT_Y
    u16  0               // Nuserved
  // Total = 16
}}

macro @DisplayEBP_flag
|| ebpoffset
|| loffset
|| use_bit
|| x
|| y
|| string
{{
// Used to display a flag.  Note that the EBP reference is an offset on the stack, the use_bit represents the bit pattern for the flag
//
//      TYPE - indicates what type of variable is being displayed
// EBPOFFSET - offset relative to the current EBP (Refer to DEBI_debug in debi.asm for information on stack arrangement)
//   LOFFSET - offset in local memory where the comparison is made (to highlight if it has changed)
//   USE_BIT - Indicates which bit in the DWORD quantity is to be examined
//         X - X coordinate (in characters) relative to upper-left corner of window
//         Y - Y coordinate (in characters) relative to upper-left corner of window
//    STRING - The string to display, note the last character is used to inidcate whether the flag is up  or down 
//
    u8   _DISPLAY
    u8   _EBP_RELATIVE_EFLAG
    u16  ebpoffset
    u8   loffset
    u32  1 SHL use_bit           // Get the bit pattern to extract this one bit
    u32  x * FONT_X
    u32  y * FONT_Y
    u8   @SizeStr(string) - 2    // The -2 is for the quotes, @SizeStr("test") returns 6
    u8   string
    u8   0                       // Null terminate the string (for display purposes)
  // Total = <varies per item>
}}

macro @ObjectPostDisplay
|| type
|| x
|| y
|| string
{{
// Used to display an object after all of the objects have been displayed.  This is done because this object references something
// that is calculated in another window.  The data item is identified by name (string) and may or may not be displayed once the
// entire processing has been completed.
//
//      TYPE - indicates what type of variable is being displayed
//         X - X coordinate (in characters) relative to upper-left corner of window
//         Y - Y coordinate (in characters) relative to upper-left corner of window
//    STRING - The string to look for.  Other windows will issue @ObjectPostObject that will be searched
//
    u8   _POST_DISPLAY
    u8   type
    u32  x * FONT_X
    u32  y * FONT_Y
    u8   @SizeStr(string) - 2    // The -2 is for the quotes, @SizeStr("test") returns 6
    u8   string
  // Total = <varies per item>
}}

macro @FunctionHandlesObject
|| func
{{
    u8   _FUNCTION
    u32  offset func
  // Total = 5
}}




;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;;
;; Mouse Object Macros
;;
;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
macro @Immediate
|| type
|| x1
|| y1
|| x2
|| y2
|| func
|| optional datum
{{
// Used when any click is recognized on these coordinates
//
//       X1 - X coordinate (in characters relative to upper-left corner of window) of the upper-left object
//       Y1 - Y coordinate (in characters relative to upper-left corner of window) of the upper-left object
//       X2 - X coordinate (in characters relative to upper-left corner of window) of the lower-right object
//       Y2 - Y coordinate (in characters relative to upper-left corner of window) of the lower-right object
//     FUNC - Function to call when this event is recognized
//
    u8   _IMMEDIATE                  // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    u16  0ffffh                      // +21
    #ifdef datum
    {
        u16  datum                   // +23
        u8   2 dup(0ffh)             // +25
    
    } #else {
        u8   4 dup(0ffh)             // +23
    }
    u8   type                        // +27
  // Total = 28
}}

macro @Any_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when any click is recognized on these coordinates
//
//       X1 - X coordinate (in characters relative to upper-left corner of window) of the upper-left object
//       Y1 - Y coordinate (in characters relative to upper-left corner of window) of the upper-left object
//       X2 - X coordinate (in characters relative to upper-left corner of window) of the lower-right object
//       Y2 - Y coordinate (in characters relative to upper-left corner of window) of the lower-right object
//     FUNC - Function to call when this event is recognized
//
    u8   _ANY_CLICK                  // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Left_single_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a left single-click is recognized on these coordinates
    u8   _LEFT_SINGLE_CLICK          // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Left_double_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a left double-click is recognized on these coordinates
    u8   _LEFT_DOUBLE_CLICK          // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Right_single_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a right single-click is recognized on these coordinates
    u8   _RIGHT_SINGLE_CLICK         // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Right_double_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a right double-click is recognized on these coordinates
    u8   _RIGHT_DOUBLE_CLICK         // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Both_single_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a both single-click is recognized on these coordinates
    u8   _BOTH_SINGLE_CLICK          // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Both_double_click
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a both double-click is recognized on these coordinates
    u8   _BOTH_DOUBLE_CLICK          // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Left_drag_start
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a left-drag is started in these coordinates
    u8   _LEFT_DRAG_START            // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Right_drag_start
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a right-drag is started in these coordinates
    u8   _RIGHT_DRAG_START           // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Left_drag_stop
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a left-drag is stopped if it started in these coordinates
    u8   _LEFT_DRAG_STOP             // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Right_drag_stop
|| x1
|| y1
|| x2
|| y2
|| func
|| optional data1
|| optional data2
|| optional data3
{{
// Used when a right-drag is stopped if it was started in these coordinates
    u8   _RIGHT_DRAG_STOP            // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    #ifdef data1
    {
        u32  data1                   // +21
    
    } #else {
        u32  0ffffffffh
    }
    #ifdef data2
    {
        u16  data2                   // +25
    
    } #else {
        u16  0ffffh
    }
    #ifdef data3
    {
        u8   data3                   // +27
    
    } #else {
        u8   0ffh
    }
  // Total = 28
}}

macro @Hover
|| x1
|| y1
|| x2
|| y2
|| loffset
|| func
|| optional datum
{{
// Used when the mouse is hovering over these coordinates
    u8   _HOVER                      // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  func                        // +17
    u16  lowword(offset loffset)     // +21
    #ifdef datum
    {
        u16  datum                   // +23
        u8   3 dup(0ffh)             // +25
    
    } #else {
        u8   5 dup(0ffh)             // +23
    }
  // Total = 28
}}

macro @Edit
|| x1
|| y1
|| x2
|| y2
|| loffset
|| type
|| optional datum
{{
// Used when a left-click is recognized on an item that can be edited
    u8   _EDIT                       // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u32  type                        // +17
    u16  lowword(offset loffset)     // +21
    #ifdef datum
    {
        u16  datum                   // +23
        u8   3 dup(0ffh)             // +25
    
    } #else {
        u8   5 dup(0ffh)             // +23
    }
  // Total = 28
}}

macro @Abandon_if_not
|| x1
|| y1
|| x2
|| y2
{{
// Used in a lengthy list.  If the coordinates are not within this range then the rest of the lengthy list is not checked
    u8   _ABANDON_IF_NOT             // +0
    u32  x1 * FONT_X                 // +1
    u32  y1 * FONT_Y                 // +5
    u32  (x2 * FONT_X) + FONT_X - 1  // +9
    u32  (y2 * FONT_Y) + FONT_Y - 1  // +13
    u8   11 dup(0ffh)                // +17
  // Total = 28
}}





;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;;
;; Menu Item Macros
;;
;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

macro @MenuItem
|| text
{{
    u8   _MENU_ITEM
    u8   @SizeStr(text) - 2      // The -2 is for the quotes, @SizeStr("test") returns 6
    u8   text
}}

macro @MenuItemEvent
|| type
|| var
{{
    u8   _MENU_ITEM_EVENT
    u8   type
    u32  offset var
}}

macro @MenuBar
{{
    u8   _MENU_BAR
}}





;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;;
;; Input Item Macros
;;
;;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// Offsets for these items are in called _DEBI_* and are in DEBI_MAC.ASP
macro @DEBI_textbox
|| x
|| y
|| len
|| var
{{
    u8   _KO_TEXTBOX             // +0
    u32  x * FONT_X              // +1
    u32  y * FONT_Y              // +5
    u32  len                     // +9
    u32  offset var              // +13
    u8   7 dup(0ffh)             // +21
  // Total = 24
}}

macro @DEBI_checkbox
|| x
|| y
|| len
|| var
|| x_offset
{{
    u8   _KO_CHECKBOX            // +0
    u32  x * FONT_X              // +1
    u32  y * FONT_Y              // +5
    u32  len                     // +9
    u32  offset var              // +13
    u8   x_offset                // +17
    u8   6 dup(0ffh)             // +18
  // Total = 24
}}

macro @DEBI_button
|| x
|| y
|| len
|| func
|| x_offset
{{
    u8   _KO_BUTTON              // +0
    u32  x * FONT_X              // +1
    u32  y * FONT_Y              // +5
    u32  len                     // +9
    u32  func                    // +13
    u8   x_offset                // +17
    u8   6 dup(0ffh)             // +18
  // Total = 24
}}

macro @DEBI_function
|| x
|| y
|| func_mouse
|| func_kbd
|| func_refresh
|| func_activate
{{
    u8   _KO_FUNCTION            // +0
    u16  x * FONT_X              // +1
    u16  y * FONT_Y              // +3
    u32  offset func_mouse       // +5,  * Note:  This function is called to process a mouse request
    u32  offset func_kbd         // +9,  * Note:  This function is entirely custom and is called for all screen updating
    u32  offset func_refresh     // +13, * Note:  This function is entirely custom and is called for all screen updating
    u32  offset func_activate    // +17, * Note:  This function is entirely custom and is called for all screen updating
    u8   3 dup(0ffh)             // +21
  // Total = 24
}}
