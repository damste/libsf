//////////
//
// /libsf/source/vjr/source/dbf/cdx_info.txt
//
//////
// Version 0.55
// Copyright (c) 2014 by Rick C. Hodgin
//////
// Last update:
//     Dec.22.2014
//////
// Change log:
//     Dec.22.2014 - Initial creation
//////
//
// This text file contains information related to traversing node-based indexes
// and the logic required therein.  It is largely by example so that the concepts
// can be understood easily.  Please report any bugs, or any issues in receiving
// a full or complete understanding, as per the examples.  My goal is to make this
// rather complex subject somewhat easier to understand for developers, so that
// some might even consider coming on board and making the index algorithms more
// efficient in a multitude of environments.
//
// This document is released as Liberty Software under a Repeat License, as governed
// by the Public Benefit License v1.0 or later (PBL).
//
// The PBL is a public domain license with a caveat:  self accountability unto God.
// You are free to use, copy, modify and share this software for any purpose, however,
// it is the desire of those working on this project that the software remain open.
// It is our request that you maintain it that way.  This is not a legal request unto
// our court systems, but rather a personal matter between you and God.  Our talents
// were received from God, and given to you through this forum.  And it is our wish
// that those talents reach out to as many as possible in a form allowing them to wield
// this content for their own betterment, as you are now considering doing.  And whereas
// we could've forced the issue through something like a copyleft-protected release, the
// truth is we are all giving an account of our lives unto God continually by the daily
// choices we make.  And here again is another case where you get to demonstrate your
// character unto God, and unto your fellow man.
//
// Jesus came to this Earth to set the captives free, to save men's eternal souls from
// the punishment demanded by our sin.  Each one of us is given the opportunity to
// receive Him in this world.  Whether we choose to receive Him, follow Him, and purpose
// our lives on the goals He has (all of which are beneficial for all involved), is one
// way we reveal our character continually.
//
// Jesus is called "Christ" because He saves men from the flames of Hell.  Do not let
// His free gift escape you because of some desire to shortcut what is right.  Do what
// is right, and do it because He is who He is, and demonstrate to Him, to me, and to
// all of mankind, and to every Heavenly host, exactly who you are on the inside.
//
// Every project released by Liberty Software Foundation will include a copy of the
// pbl.txt document, which can be found at http://www.libsf.org/licenses/.
//
// For additional information about this project, or to view the license, see:
//
//     http://www.libsf.org/
//     http://www.libsf.org/licenses/
//     http://www.visual-freepro.org/vjr/indexmain.html
//     http://www.visual-freepro.org/wiki/index.php/PBL
//
// Thank you.  And may The Lord bless you richly as you lift up your life, your
// talents, your gifts, your praise, unto Him.  In Jesus' name I pray.  Amen.
//
//





//////////
//
// The logic for traversing indexes can be confusing because there are
// a variable number of keys per node, and the nodes themselves do not
// always hold the final key data.
//
// Indexes can use index and root nodes, which contain a "branching off"
// point which then point to the actual leaf nodes (which actually contain
// key data).  This is two-tier (or multi-tier on very large indexes)
// system is used so that as the indexes grow in key count, the initial
// entry point to begin search node-to-node for the final key will not
// span a very large area, and therefore will result in less disk locks
// and reads in a multi-user environment, or for speed in an exclusive use
// environment.
// 
//////
//
// Consider searching for "frank":
//
//		------------NOT UNIQUE------------			|||			--------------UNIQUE--------------
//		Key		Ascending		Descending			|||			Key		Ascending		Descending
//		---		---------		----------			|||			---		---------		----------
//		01:		alex			zelda				|||			01:		[same]
//		02:		frank			quinn				|||			02:
//		03:		quinn			frank				|||			03:
//		04:		zelda			alex				|||			04:
//
// Comparison results ("frank" to each key):
//		01:		greater			less				|||			01:		[same]
//		02:		equal			less				|||			02:
//		03:		less			equal				|||			03:
//		04:		less			greater				|||			04:
//
// For each order, we're looking at this logic for the find:
//		01:		fail			fail				|||			01:		fail			fail
//		02:		success			fail				|||			02:		match, done*	fail
//		03:		fail			success				|||			03:		fail			match, done*
//		04:		fail			fail				|||			04:		fail			fail
//
//																* Done if leaf node, if index node then 
//																  need to traverse the leaf node to obtain
//																  the true key information.
//
// Once found, move to prior node and begin searching:
//		01:		target			n/a					|||			01:		n/a				n/a
//		02:		n/a				target				|||			02:		n/a				n/a
//		03:		n/a				n/a					|||			03:		n/a				n/a
//		04:		n/a				n/a					|||			04:		n/a				n/a
//
// In the case of non-unique indexes, the target is the node before the match, or when
// it is the opposite of its order (if ascending, then when it switches to less, if
// descending, then when it switches to greater), because it is likely the prior node
// has content like this:
//		01:		01 -- alex
//				02 -- betty
//				03 -- chandler
//				04 -- dan (jones)
//				05 -- dan (smith)
//				06 -- eric
//				07 -- fran
//				08 -- frank (allen)
//				09 -- frank (jenkins)
//				10 -- frank (rawlings)
//
//		02:		01 -- frank (thomas)
//				02 -- frank (vincent)
//				03 -- frank (zigler)
//
// Because there can be multiple keys of the same value, the match we found on node 02
// in an ascending order non-unique index means the key is potentially also on the prior
// node.  And because we return the first match for all keys, as per natural order, the
// prior node must be our starting point.
//
// If we reach the last node and it's not found, then we begin at the start of the last
// node because it can only be found on that node.
//
// If it is before the first node, it is a no-find because there are no keys beyond that
// which is found in the first key position.
//
//////
//
// Once we get to the point where we have the starting node, it requires that we now
// traverse all the keys until we find the first match, or until we reach the opposite
// of its order (if ascending, when it switches to less, if descending, then when it
// switches to greater).
//
// At this point we know the find will be either on this node, or at the very start of
// the next node.
//
//////
