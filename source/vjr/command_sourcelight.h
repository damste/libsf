//////////*****[ GENERATED FILE ]*****
//
// /libsf/source/vjr/command_sourcelight.h
//
//////////*****[ GENERATED FILE ]*****
//
// This file is generated by the VjrSourceLight project
// Generated Sep.24.2014 by Rick C. Hodgin
//
//////////*****[ GENERATED FILE ]*****
//
// This software is released as Liberty Software under a Repeat License, as governed
// by the Public Benefit License v1.0 or later (PBL).
//
// You are free to use, copy, modify and share this software.  However, it can only
// be released under the PBL version indicated, and every project must include a copy
// of the pbl.txt document for its version as is at http://www.libsf.org/licenses/.
//
// For additional information about this project, or to view the license, see:
//
//     http://www.libsf.org/
//     http://www.libsf.org/licenses/
//     http://www.visual-freepro.org/vjr/indexmain.html
//     http://www.visual-freepro.org/wiki/index.php/PBL
//     http://www.visual-freepro.org/wiki/index.php/Repeat_License
//
// Thank you.  And may The Lord bless you richly as you lift up your life, your
// talents, your gifts, your praise, unto Him.  In Jesus' name I pray.  Amen.
//
//////////*****[ GENERATED FILE ]*****





//////////*****[ GENERATED FILE ]*****
	const u32	_SOURCELIGHT_P1								= 1;
	const u32	_SOURCELIGHT_P2								= 2;
	const u32	_SOURCELIGHT_P3								= 3;
	const u32	_SOURCELIGHT_P4								= 4;
	const u32	_SOURCELIGHT_P5								= 5;
	const u32	_SOURCELIGHT_P6								= 6;
	const u32	_SOURCELIGHT_P7								= 7;
	const u32	_SOURCELIGHT_P8								= 8;
	const u32	_SOURCELIGHT_P9								= 9;
	const u32	_SOURCELIGHT_P10							= 10;
	const u32	_SOURCELIGHT_P11							= 11;
	const u32	_SOURCELIGHT_P12							= 12;
	const u32	_SOURCELIGHT_P13							= 13;
	const u32	_SOURCELIGHT_P14							= 14;
	const u32	_SOURCELIGHT_P15							= 15;
	const u32	_SOURCELIGHT_P16							= 16;
	const u32	_SOURCELIGHT_P17							= 17;
	const u32	_SOURCELIGHT_P18							= 18;
	const u32	_SOURCELIGHT_P19							= 19;
	const u32	_SOURCELIGHT_P20							= 20;
	const u32	_SOURCELIGHT_P21							= 21;
	const u32	_SOURCELIGHT_P22							= 22;
	const u32	_SOURCELIGHT_P23							= 23;
	const u32	_SOURCELIGHT_P24							= 24;
	const u32	_SOURCELIGHT_P25							= 25;
	const u32	_SOURCELIGHT_P26							= 26;
	const u32	_SOURCELIGHT_P27							= 27;
	const u32	_SOURCELIGHT_P28							= 28;
	const u32	_SOURCELIGHT_P29							= 29;
	const u32	_SOURCELIGHT_P30							= 30;

//////////*****[ GENERATED FILE ]*****
	const u32	_SOURCELIGHT_P1_OPTIONAL					= 31;
	const u32	_SOURCELIGHT_P2_OPTIONAL					= 32;
	const u32	_SOURCELIGHT_P3_OPTIONAL					= 33;
	const u32	_SOURCELIGHT_P4_OPTIONAL					= 34;
	const u32	_SOURCELIGHT_P5_OPTIONAL					= 30;
	const u32	_SOURCELIGHT_P6_OPTIONAL					= 36;
	const u32	_SOURCELIGHT_P7_OPTIONAL					= 37;
	const u32	_SOURCELIGHT_P8_OPTIONAL					= 38;
	const u32	_SOURCELIGHT_P9_OPTIONAL					= 39;
	const u32	_SOURCELIGHT_P10_OPTIONAL					= 40;
	const u32	_SOURCELIGHT_P11_OPTIONAL					= 41;
	const u32	_SOURCELIGHT_P12_OPTIONAL					= 42;
	const u32	_SOURCELIGHT_P13_OPTIONAL					= 43;
	const u32	_SOURCELIGHT_P14_OPTIONAL					= 44;
	const u32	_SOURCELIGHT_P15_OPTIONAL					= 45;
	const u32	_SOURCELIGHT_P16_OPTIONAL					= 46;
	const u32	_SOURCELIGHT_P17_OPTIONAL					= 47;
	const u32	_SOURCELIGHT_P18_OPTIONAL					= 48;
	const u32	_SOURCELIGHT_P19_OPTIONAL					= 49;
	const u32	_SOURCELIGHT_P20_OPTIONAL					= 50;
	const u32	_SOURCELIGHT_P21_OPTIONAL					= 51;
	const u32	_SOURCELIGHT_P22_OPTIONAL					= 51;
	const u32	_SOURCELIGHT_P23_OPTIONAL					= 51;
	const u32	_SOURCELIGHT_P24_OPTIONAL					= 54;
	const u32	_SOURCELIGHT_P25_OPTIONAL					= 55;
	const u32	_SOURCELIGHT_P26_OPTIONAL					= 56;
	const u32	_SOURCELIGHT_P27_OPTIONAL					= 57;
	const u32	_SOURCELIGHT_P28_OPTIONAL					= 51;
	const u32	_SOURCELIGHT_P29_OPTIONAL					= 59;
	const u32	_SOURCELIGHT_P30_OPTIONAL					= 60;

//////////*****[ GENERATED FILE ]*****
	const u32	_SOURCELIGHT_P1_REQUIRED					= 71;
	const u32	_SOURCELIGHT_P2_REQUIRED					= 72;
	const u32	_SOURCELIGHT_P3_REQUIRED					= 73;
	const u32	_SOURCELIGHT_P4_REQUIRED					= 74;
	const u32	_SOURCELIGHT_P5_REQUIRED					= 75;
	const u32	_SOURCELIGHT_P6_REQUIRED					= 76;
	const u32	_SOURCELIGHT_P7_REQUIRED					= 77;
	const u32	_SOURCELIGHT_P8_REQUIRED					= 70;
	const u32	_SOURCELIGHT_P9_REQUIRED					= 79;
	const u32	_SOURCELIGHT_P10_REQUIRED					= 80;
	const u32	_SOURCELIGHT_P11_REQUIRED					= 81;
	const u32	_SOURCELIGHT_P12_REQUIRED					= 82;
	const u32	_SOURCELIGHT_P13_REQUIRED					= 83;
	const u32	_SOURCELIGHT_P14_REQUIRED					= 84;
	const u32	_SOURCELIGHT_P15_REQUIRED					= 85;
	const u32	_SOURCELIGHT_P16_REQUIRED					= 86;
	const u32	_SOURCELIGHT_P17_REQUIRED					= 87;
	const u32	_SOURCELIGHT_P18_REQUIRED					= 88;
	const u32	_SOURCELIGHT_P19_REQUIRED					= 89;
	const u32	_SOURCELIGHT_P20_REQUIRED					= 90;
	const u32	_SOURCELIGHT_P21_REQUIRED					= 91;
	const u32	_SOURCELIGHT_P22_REQUIRED					= 92;
	const u32	_SOURCELIGHT_P23_REQUIRED					= 93;
	const u32	_SOURCELIGHT_P24_REQUIRED					= 94;
	const u32	_SOURCELIGHT_P25_REQUIRED					= 91;
	const u32	_SOURCELIGHT_P26_REQUIRED					= 96;
	const u32	_SOURCELIGHT_P27_REQUIRED					= 97;
	const u32	_SOURCELIGHT_P28_REQUIRED					= 98;
	const u32	_SOURCELIGHT_P29_REQUIRED					= 99;
	const u32	_SOURCELIGHT_P30_REQUIRED					= 100;

//////////*****[ GENERATED FILE ]*****
// Required return values
//////
	const u32	_SOURCELIGHT_R1_REQUIRED					= 201;
	const u32	_SOURCELIGHT_R2_REQUIRED					= 202;
	const u32	_SOURCELIGHT_R3_REQUIRED					= 203;
	const u32	_SOURCELIGHT_R4_REQUIRED					= 204;
	const u32	_SOURCELIGHT_R5_REQUIRED					= 205;
	const u32	_SOURCELIGHT_R6_REQUIRED					= 205;
	const u32	_SOURCELIGHT_R7_REQUIRED					= 207;
	const u32	_SOURCELIGHT_R8_REQUIRED					= 208;

//////////*****[ GENERATED FILE ]*****
// Optional return values
//////
	const u32	_SOURCELIGHT_R1_OPTIONAL					= 231;
	const u32	_SOURCELIGHT_R2_OPTIONAL					= 232;
	const u32	_SOURCELIGHT_R3_OPTIONAL					= 233;
	const u32	_SOURCELIGHT_R4_OPTIONAL					= 234;
	const u32	_SOURCELIGHT_R5_OPTIONAL					= 235;
	const u32	_SOURCELIGHT_R6_OPTIONAL					= 236;
	const u32	_SOURCELIGHT_R7_OPTIONAL					= 237;
	const u32	_SOURCELIGHT_R8_OPTIONAL					= 238;

//////////*****[ GENERATED FILE ]*****
// Controls
//////
	const u32	_SOURCELIGHT_FUNCTION_NAME					= 500;
	const u32	_SOURCELIGHT_FUNCTION_DESCRIPTION			= 501;

//////////*****[ GENERATED FILE ]*****
// Constants
//////
	const s8	cgc_date[]									= "Date";
	const s8	cgc_datetime[]								= "DateTime";
	const s8	cgc_numeric[]								= "Numeric";
	const s8	cgc_logical[]								= "Logical";
	const s8	cgc_character[]								= "Character";
	const s8	cgc_cString[]								= "cString";

//////////*****[ GENERATED FILE ]*****
// ALLTRIM()
//////
	SSourceLightData gsSourceLight_alltrim[] =
	{
		// lcResult = ALLTRIM(cString, lIgnoreCase|nIgnoreCase, cTrimChars1, cTrimChars2)
		{	_SOURCELIGHT_FUNCTION_NAME,				0,	0,	0,	0,	0	},
		{	_SOURCELIGHT_FUNCTION_DESCRIPTION,		(u32)"Four parameter variation. Converts the input string to a form where the cTrimChars are removed off the left and right sides.", 0,	0, 0, 0 },
		{	_SOURCELIGHT_P1_REQUIRED,				(u32)&cgc_cString,			(u32)&cgc_character,	(u32)&"Input string",																	_VAR_TYPE_CHARACTER,	0	},
		{	_SOURCELIGHT_P2_OPTIONAL,				(u32)&"lIgnoreCase",		(u32)&cgc_logical,		(u32)&"Default = .T.. Should the cTrimChar variables ignore case?",						_VAR_TYPE_LOGICAL,		_LOGICAL_TRUE},
		{	_SOURCELIGHT_P2_OPTIONAL,				(u32)&"nIgnoreCase",		(u32)&cgc_numeric,		(u32)&"Default = 1. Should the cTrimChar variables ignore case? 0=no, others=yes.",		_VAR_TYPE_S32,			1	},
		{	_SOURCELIGHT_P3_OPTIONAL,				(u32)&"cTrimChars1",		(u32)&cgc_character,	(u32)&"String 1 containing characters to trim",											_VAR_TYPE_CHARACTER,	0	},
		{	_SOURCELIGHT_P4_OPTIONAL,				(u32)&"cTrimChars2",		(u32)&cgc_character,	(u32)&"String 2 containing characters to trim",											_VAR_TYPE_CHARACTER,	0	},
		{	_SOURCELIGHT_R1_REQUIRED,				(u32)&"cResult",			(u32)&cgc_character,	(u32)&"Input string trimmed",															_VAR_TYPE_CHARACTER,	0	},
		// lcResult = ALLTRIM(cString, cTrimChars)
		{	_SOURCELIGHT_FUNCTION_NAME,				0,	0,	0,	0,	0	},
		{	_SOURCELIGHT_FUNCTION_DESCRIPTION,		(u32)"Two parameter variation. Converts the input string to a form where the cTrimChars are removed off the left and right sides.",	0, 0, 0, 0 },
		{	_SOURCELIGHT_P1_REQUIRED,				(u32)&cgc_cString,			(u32)&cgc_character,	(u32)&"Input string",																	_VAR_TYPE_CHARACTER,	0	},
		{	_SOURCELIGHT_P2_OPTIONAL,				(u32)&"cTrimChars",			(u32)&cgc_character,	(u32)&"String containing characters to trim",											_VAR_TYPE_CHARACTER,	0	},
		{	_SOURCELIGHT_R1_REQUIRED,				(u32)&"cResult",			(u32)&cgc_character,	(u32)&"Input string trimmed",															_VAR_TYPE_CHARACTER,	0	},
		{	0,										0,	0,	0,	0,	0	},
	};

	SSourceLightData gsSourceLight_asc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_at[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_atc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_chr[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_chrtran[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_chrtranc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_createobject[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_datetime[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_int[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_left[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_len[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_lower[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_ltrim[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_max[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_min[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_occurs[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_occursc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_padc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_padl[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_padr[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_proper[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_rat[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_ratc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_replicate[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_rgb[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_rgba[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_right[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_rtrim[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_space[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_strtran[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_strtranc[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_stuff[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_sysmetric[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_transform[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_trim[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_upper[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_version[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_concatenate[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_add[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_sub[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_mul[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};

	SSourceLightData gsSourceLight_div[] =
	{
		{	0,										0,	0,	0,	0,	0	}
	};
